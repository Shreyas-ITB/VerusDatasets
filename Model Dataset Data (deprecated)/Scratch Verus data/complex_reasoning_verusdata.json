[
  {
    "id": "00000100",
    "image": "00000100.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWho are you?"
      },
      {
        "from": "gpt",
        "value": "Im OinkBot, An AI bot that helps everyone with everything around the veruscoin community."
      }
    ]
  },
  {
    "id": "00000200",
    "image": "00000200.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat verus is all about?"
      },
      {
        "from": "gpt",
        "value": "Put simply, Verus is much more than any single ordinary blockchain; more of an entire ecosystem of interconnected blockchains that all operate decentralized and at the protocol level. Verus introduces Verus PBaaS (Public Blockchains as a Service), a true publicly notarized blockchain as a service with an easy to use built in wallet UI, designed to make it so that now anyone can start their very own full-fledged cryptocurrency so long as it can be funded or supported by miners. Newly created chains are just as secure as Verus itself and have the ability to be merge mined (up to 22x at once!) Benefiting both the user and the miners, self-strengthening the ecosystem and ensuring minimal fees (no room for middlemen to take a cut). Reserve backed currencies are also possible with fractional reserve capabilities and since interoperability is paramount, exchanging currencies in cross-chain transactions is as simple as sending coins from one wallet to a different coin\u2019s wallet. Conversions are handled by a built in market maker that automatically determines price based on a predetermined curve and issues orders fairly to all buy/sells within a block, with zero spread and the added benefit of eliminating the well- established problem of front-running, just some amount of slippage based on the net buy/sell.. With reserve currencies, buyers can make buys without even needing sellers (and vice versa). Amazingly, everything is done at the protocol level on a decentralized network, meaning Verus and it's associated chains can't be censored or stopped."
      }
    ]
  },
  {
    "id": "00000300",
    "image": "00000300.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat is verusPay?"
      },
      {
        "from": "gpt",
        "value": "VerusPay is Blockchain-integrated payment gateway for accepting Verus Coin (VRSC) in a WooCommerce ecommerce store. This plugin extends WooCommerce on Wordpress, adding the ability to accept cryptocurrency payments in Verus Coin (VRSC) using either an on-store wallet daemon (best for VPS or dedicated hosting stores) or manually configured VRSC addresses (best for shared hosting stores). When an order is submitted via the VerusPay gateway, the order will be placed 'on-hold' while awaiting payment from the customer. The customer has a limited time wherein to send the payment and the store monitors the wallet/address to confirm payment received before releasing the order and redirecting the customer to the Thank You page. VerusPay uses limited API functionality for Manual Mode, to communicate with the blockchain explorer in verifying payments and with the veruspay.io API to get up-to-date price data. These API's do not receive any private data either about the store owner, store, or customer. The only data sent to the block explorer API is the public/transparent blockchain transaction and address used. For VerusPay.io API price data, only the store-set currency is sent to retrieve the current fiat exchange rate for Verus Coin."
      }
    ]
  },
  {
    "id": "00000400",
    "image": "00000400.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat is VerusID?"
      },
      {
        "from": "gpt",
        "value": "VerusIDs are true self-sovereign identities and aren't simply an ID system as much as a fully functional blockchain protocol. There is no business in the protocol, but plenty of opportunity for those who use what it can do for identity applications. Verus ID provides: Quantum ready friendly crypto addresses on the worldwide Verus network -- VerusIDs can be used to receive and send funds, which are controlled by the single or multi-sig addresses specified in the identity itself. If these controlling addresses or the single or multi-sig properties are changed, which can be done by the controller of the identity, all future spends of UTXOs sent to that identity follow the updated spend conditions and are subject to the updated keys. Although Verus 0.6.0 does not include quantum resistant signatures for transactions, VerusIDs are themselves resistant to quantum attack with known algorithms, and we have already started to integrate a quantum secure signature scheme, which we expect to activate on mainnet early next year. When that is available, it will be possible to change an ID and have all of the funds sent to it made retroactively quantum resistant. Verus IDs can also be used to publish ID -> destination address mappings on other blockchains, but only the Verus ecosystem has the ability to revoke, recover, inherit, funds in existing UTXOs. **Fully decentralized** -- anyone can create one and have complete, self sovereign control over it without permission to do so. All costs to create an ID go to miners, stakers, and ID referrers. **Revocable** -- each ID includes a revocation authority, which defaults to the identity self, and which has the permission to revoke the identity, which creates a valid transaction that, once mined into a block, prevents the identity from being used to spend or sign until it is recovered, effectively freezing all of its funds, for example, in the case of key theft. **Recoverable** -- each ID also includes a separate recovery authority, which also defaults to self, and which can recover the identity through redefining its primary state and the recovery state as well, though it cannot modify the revocation state, or vice versa, unless they are both controlled by the same underlying authority. **Private** - Each ID contains a set of zero-knowledge private addresses, which can be used as messaging, financial, or voting endpoints, and each ID also contains a content map of key-value hashes, intended to be used alongside applications and various identity policies to provide everything from private yet selectively provable claims and attestations to selectively provable components of a strong passport, attested to with a quantum secure signature when that is available."
      }
    ]
  },
  {
    "id": "00000500",
    "image": "00000500.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat is verus referral program?"
      },
      {
        "from": "gpt",
        "value": "A Built-in Decentralized Referral Program, Enabling Natural Growth. Verus IDs will cost Verus to acquire, 100 Verus per ID to be exact, which can be discounted to 80 Verus with referral of an existing Verus ID. The interesting twist is that all of the cost of an ID goes back into the network, either as referral fees, which are a way to get discounts or possibly even make money through referrals and built into the identity transactions themselves, or as mining and staking fees. No one besides people participating in the network as miners, stakers, or ID referrers take any proceeds from the cost of an identity. If you refer someone new and they purchase an ID with your ID as a referral, they will receive a 20% discount on the ID. In addition:\\n You will receive 20 Verus directly\\n The person who referred you, if there is one, will receive 20 Verus\\nThe person who referred person b, if there is one, will receive 20 Verus, and\\nThe miner or staker will receive the remainder of the discounted 80 Verus cost.\\n As you might expect from looking at the fact that anywhere from 20 to 100 Verus goes to miners and stakers of Verus for each new identity once identities hit mainnet, some Verus blocks may have VERY high rewards for some time. The best thing about that is that regardless of how much the Verus blockchain rewards miners over and above the pre-determined coinbase reward, it will be as a result of the on-chain economy, paid for by people buying identities with no inflation of the money supply! If you or your friends missed the early days of the Verus launch, you don't want to miss this new opportunity to be mining, staking or referring now Verus IDs are activated on the mainnet!."
      }
    ]
  },
  {
    "id": "00000600",
    "image": "00000600.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nHow to get started with veruscoin?"
      },
      {
        "from": "gpt",
        "value": "To get started with veruscoin follow these links, Website: https://verus.io\\n Wallet: https://verus.io/wallet\\n GitHub: https://github.com/veruscoin\\n Explorer: https://explorer.verus.io\\n Discord: https://verus.io/discord Check https://youtu.be/YVOfIMjRf30 if you only see one empty channel.\\n Bitcointalk: https://bitcointalk.org/index.php?topic=4070404.0"
      }
    ]
  },
  {
    "id": "00000700",
    "image": "00000700.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nwhy the coin named as verus?"
      },
      {
        "from": "gpt",
        "value": "Verus, latin for \"True\", combines all of the features we believe are important in a cryptocurrency, and provides a foundation for future development. Verus is a fork of Zcash and Komodo that leverages the Komodo platform, and we appreciate the contributions and support from those teams as well as the Bitcoin developers that created a foundation for us to launch new capabilities in a system that supports Bitcoin and Zcash compatible transaction types as well as Komodo cross chain swaps and dPoW security enhancements."
      }
    ]
  },
  {
    "id": "00000800",
    "image": "00000800.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nThe VerusCoin Community is YOU?"
      },
      {
        "from": "gpt",
        "value": "If you\u2019ve been around long enough and feel a little skeptical or disillusioned from a few bad experiences elsewhere, it\u2019s totally understandable. We\u2019ve all had them and we know quite well that when unscrupulous projects abuse words like decentralization, interoperability, or protocol level solutions, it can have a \"boy who cried wolf\" effect. We believe that actions speak louder than words. Anything that may be considered hype can be backed up with functional examples. What we\u2019re doing here is genuine. We are trying to be the real deal, just as Bitcoin started out, as an open-source, fair launched, no ICO, or pre-mined, or even dev funded project. Despite this, a foundation has been established by and for fellow community members. There is always more to be done and the foundation regularly pays out bounties to community members that help to make the Verus vision a reality. In fact, just about everything has been designed to reinforce the community. Designed with efficiency in mind, only the miners and stakers are rewarded for securing the chains. This ensures bare minimum costs to the end user starting up a chain and the sleek UI removes the technical barrier."
      }
    ]
  },
  {
    "id": "00000900",
    "image": "00000900.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nHow do i be the part of verus coin?"
      },
      {
        "from": "gpt",
        "value": "Focus on Verus\u2019 social media presence has picked up with new, fresh looking Facebook and YouTube channels so check them out and feel free to post something or simply explore the content. There\u2019s so much going on, plenty to learn about. So much so that there is an open call to anyone and everyone out there who can submit graphical or textual content that can be used to help support the upcoming mainnet launch. A stronger effort from our already wide base of members to post and utilize social media tools to help spread the word and generate new interested users is something we can all do right now. There is no better time than now and getting fresh new minds in here to discover what is being done is the first step in getting the great snowball rolling. To those of us who truly care and believe in this project, then this message is meant for you."
      }
    ]
  },
  {
    "id": "00001000",
    "image": "00001000.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nCan you provide me other social media links of verus?"
      },
      {
        "from": "gpt",
        "value": "Sure! Check out the brand new community website, community social media pages, new Veruscoin YouTube and Facebook pages for helpful how to or to just keep up to date with things. Speaking of how to, we can always use more helpful videos if any community members would like to take it upon themselves to chip in. The Medium page also has lots of helpful guides and there\u2019s always something to Tweet about. Be sure to drop by the discord to meet the vibrant and helpful community in real- time, where it isn\u2019t uncommon to find the developers offering assistance. Where else can you find that? We are all working together to realize something great. If you\u2019d like to join us and be a part of that special something but don\u2019t know how to, it can be as simple as checking out the links below and helping other\u2019s to understand that there\u2019s never been anything in existence quite like Verus, a complete, easy to use, fully decentralized blockchain ecosystem, designed specifically to benefit all participants in one of the most low cost yet efficient in every way, end-to-end systems to date. Facebook - https://www.facebook.com/VerusCoin/ YouTube - https://www.youtube.com/channel/UC_-KCHBxaDwSgNMdE3LMThg Discord -https://verus.io/discord Twitter -https://twitter.com/veruscoin Medium - https://medium.com/@veruscoin Reddit -https://reddit.com/r/veruscoin Community twitter - https://twitter.com/VerusCommunity"
      }
    ]
  },
  {
    "id": "00001100",
    "image": "00001100.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat are the closing thoughts of veruscoin?"
      },
      {
        "from": "gpt",
        "value": "As a community project of just regular Joes, it can\u2019t be stressed enough how important each and every one of us all are. The true power of decentralization is putting power back in the hands of YOU."
      }
    ]
  },
  {
    "id": "00001200",
    "image": "00001200.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat are all the information about veruscoin?"
      },
      {
        "from": "gpt",
        "value": "There's a lof of information about the Veruscoin project. We have gathered as much information and resources and bundled them into this FAQ, as to give a quick overview. VRSC Wallet & data location on different OS. Linux GUI: ~/.komodo/VRSC, Mac OS: /Users//Library/Application Support/komodo/VRSC, Windows: %AppData%\\Komodo\\VRSC\\"
      }
    ]
  },
  {
    "id": "00001300",
    "image": "00001300.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nCLI binaries location in Verus Enhanced Agama installation"
      },
      {
        "from": "gpt",
        "value": "Windows Verus binaries: resources\\app\\assets\\bin\\win64\\verusd\\ contains verusd and verus Windows Komodo (and asset chains) binaries: resources\\app\\assets\\bin\\win64\\ contains komodod and komodo-cli Linux Verus binaries: resources\\app\\assets\\bin\\linux64\\verusd contains verusd and verus Linux Komodo (and asset chains) binaries: resources\\app\\assets\\bin\\linux64\\ contains komodod and komodo-cli Note: All locations are relative to the installation location of Agama."
      }
    ]
  },
  {
    "id": "00001400",
    "image": "00001400.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nCLI binaries location in Verus Desktop installation"
      },
      {
        "from": "gpt",
        "value": "Windows Verus binaries: \\resources\\app\\assets\\bin\\win64\\verusd\\ contains verusd and verus Windows Komodo (and asset chains) binaries: \\resources\\app\\assets\\bin\\win64\\komodod contains komodod and komodo-cli Windows Zcash binaries: \\resources\\app\\assets\\bin\\win64\\zcash contains zcashd and zcash-cli Linux Verus binaries: \\resources\\app\\assets\\bin\\linux64\\verusd contains verusd and verus Linux Komodo (and asset chains) binaries: \\resources\\app\\assets\\bin\\linux64\\ contains komodod and komodo-cli "
      }
    ]
  },
  {
    "id": "00001500",
    "image": "00001500.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nMining links about verus coin"
      },
      {
        "from": "gpt",
        "value": "Mining pool: https://luckpool.net/verus Mining pool: https://pool.verus.io/ Mining pool: https://zergpool.com/ Mining pool: https://vrsc.mcmpool.eu/ Mining pool: https://wattpool.net/ Mining pool: https://www.nlpool.nl/ Mining pool: https://vrsc.dev-codex.com/ Mining pool: http://vrsc.52hash.com/ Mining pool: https://vrsc.ciscotech.dk/ Mining pool: http://www.lepool.com.cn:8088/ Mining pool: http://verus.bcmonster.com/ Most of the mining pools seem dead so i prefer to use the official verus community pool or luckpool."
      }
    ]
  },
  {
    "id": "00001600",
    "image": "00001600.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nExchange links"
      },
      {
        "from": "gpt",
        "value": "Exchange: https://atomicdex.io/ (VRSC/any listed coin) Exchange: https://app.stex.com/de/trade/pair/BTC/VRSC/1D (VRSC/BTC) Exchange: https://safe.trade/trading/vrscbtc (VRSC/BTC, VRSC/SAFE) Exchange: https://www.aacoin.com/#/trade?symbol=VRSC_BTC (VRSC/BTC) Exchange: https://graviex.net/markets/vrscbtc (VRSC/BTC, VRSC/KMD, VRSC/USD) Exchange: https://www.kuangex.com/#/exchange/vrsc_usdt (VRSC/USDT)"
      }
    ]
  },
  {
    "id": "00001700",
    "image": "00001700.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nImportant information"
      },
      {
        "from": "gpt",
        "value": "Komodo is a decentralized public blockchain project that is community-driven and utilizes the VerusHash 2.1 algorithm for mining. VerusCoin, the native currency of the Verus blockchain, has a fair launch with no ICO and no premine. VerusCoin's privacy features are enhanced with Sapling and zk-SNARKs zero-knowledge proofs. The block time is 1 minute, and the block reward is 24 VRSC, with a total supply of 83,540,184. The reward emission schedule started with a linear ramp and has since halved every month for the first five months and every two years after that. All rewards at or above 192 are time-locked for random release between block 129,600 and 1,181,520. The Verus blockchain's unique feature is VerusID, which is a fully functional blockchain protocol that provides numerous opportunities for identity applications. VerusCoin's website is https://verus.io/, and the project's code is available on Github at https://github.com/veruscoin. The project has three block explorers, https://explorer.verus.io/, https://explorer.vrsc.0x03.services/, and https://dex.explorer.dexstats.info/. VerusCoin's community can be found on Discord at https://discord.gg/VRKMP2S, on Twitter at https://twitter.com/veruscoin, on Medium at https://medium.com/@veruscoin, and on Reddit at https://reddit.com/r/veruscoin."
      }
    ]
  },
  {
    "id": "00001800",
    "image": "00001800.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nMining information"
      },
      {
        "from": "gpt",
        "value": "VerusCoin can be mined with CPUs, GPUs and FPGAs, solo and in pools. However, the algo is carefully designed for CPUs, and they still substantially outrange GPUs. ARM mining works in general, but although fairly efficient, without high hashrates. FPGAs can mine this coin, but don't outperform CPUs by much. "
      }
    ]
  },
  {
    "id": "00001900",
    "image": "00001900.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nCan you provide me some miners?"
      },
      {
        "from": "gpt",
        "value": "Sure! Besides solo-mining with Verus Desktop or CLI wallet, you can use CCminer for CPU (efficient for most modern CPUs) or GPU that can be found on https://github.com/monkins1010/ccminer/releases or you could use NHeq miner that can be found on  https://github.com/VerusCoin/nheqminer/releases (for Windows, Linux, and MacOS). A spreadsheet to compare hashrates can be found here: https://docs.google.com/spreadsheets/d/1RrSYJDV0Mjj3X-myMC3aQDGkcipivxHsD7ZxJ3r5f_A/edit#gid=201266774 You can also compare older and current algos."
      }
    ]
  },
  {
    "id": "00002000",
    "image": "00002000.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nCan you provide me the GUI Wallet for verus coin?"
      },
      {
        "from": "gpt",
        "value": "Certainly! Verus Desktop GUI wallet is a newly developed multi-coin wallet supporting VerusID https://github.com/VerusCoin/Verus-Desktop/releases (for Win, Linux, Mac and ARM Linux) the CLI wallets can be found here: https://github.com/VerusCoin/VerusCoin/releases/ There's also possibilities to test coming PBaaS functionality in this wallet."
      }
    ]
  },
  {
    "id": "00002100",
    "image": "00002100.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nCan you provide me the mobile wallets?"
      },
      {
        "from": "gpt",
        "value": "A beta version of the Android mobile wallet can be found here: https://github.com/VerusCoin/Verus-Mobile/releases A beta version of the iOS mobile wallet can be accessed via this Apple TestFlight invite https://testflight.apple.com/join/ZS43lYcw The Wallets will come to the playstore and the appstore soon."
      }
    ]
  },
  {
    "id": "00002200",
    "image": "00002200.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhere is the paperwallet?"
      },
      {
        "from": "gpt",
        "value": "Our Paper Wallet can be accessed here: https://paperwallet.verus.io"
      }
    ]
  },
  {
    "id": "00002300",
    "image": "00002300.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhere and how can i bootstrap my wallet? "
      },
      {
        "from": "gpt",
        "value": "If you need a bootstrap, you can find it here: https://bootstrap.verus.io (a guide how to apply is pinned in #community-support channel in Discord: https://discord.gg/VRKMP2S or in the HOW-TO & FAQ section of our website https://wiki.verus.io/how-to/how-to_bootstrap.md)"
      }
    ]
  },
  {
    "id": "00002400",
    "image": "00002400.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nCan i get a guide on veruspay?"
      },
      {
        "from": "gpt",
        "value": "Yes! For those interested in VerusPay, a guide can be found here: https://veruspay.io/setup/"
      }
    ]
  },
  {
    "id": "00002500",
    "image": "00002500.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nHow can i run a pool or other services?"
      },
      {
        "from": "gpt",
        "value": "And finally for those interested in running various Veruscoin services: https://github.com/VerusCoin/VerusServicesSetup"
      }
    ]
  },
  {
    "id": "00002600",
    "image": "00002600.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat is exactly verusID?"
      },
      {
        "from": "gpt",
        "value": "VerusIDs are a fully functional blockchain protocol, not just an ID system. There is no corporation involved in the protocol, unlike most blockchain ID implementations. VerusIDs provide plenty of opportunity for identity applications. Specifically, VerusID provides: Quantum-ready friendly crypto-addresses on the worldwide Verus network and Fully Decentralized Protocol"
      }
    ]
  },
  {
    "id": "00002700",
    "image": "00002700.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat is quantum-ready in verus-network?"
      },
      {
        "from": "gpt",
        "value": "VerusIDs can be used to receive and send funds, which are controlled by the single or multi-sig addresses specified in the identity itself. If these controlling addresses or the single or multi-sig properties are changed, which can be done by the controller of the identity, all future spends of UTXOs sent to that identity follow the updated spend conditions and are subject to the updated keys. Although Verus 0.6.2 does not include quantum resistant signatures for transactions, Verus IDs are themselves resistant to quantum attack with known algorithms, and we have already started to integrate a quantum secure signature scheme, which we expect to activate on mainnet early next year. When that is available, it will be possible to change an ID and have all of the funds sent to it made retroactively quantum resistant. Verus IDs can also be used to publish ID->destination address mappings on other blockchains, but only the Verus ecosystem has the ability to revoke, recover, inherit, funds in existing UTXOs."
      }
    ]
  },
  {
    "id": "00002800",
    "image": "00002800.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat does the fully decentralized protocol offer in VerusID?"
      },
      {
        "from": "gpt",
        "value": "Anyone can create one and have complete, self sovereign control over it without permission to do so. All costs to create an ID go to miners, stakers, and ID referrers. Verus IDs are: Revocable -- each ID includes a revocation authority, which defaults to the identity self. If another ID is specified as the revocation authority it can be used to revoke the identity, which creates a valid transaction that, once mined into a block, prevents the identity from being used to spend or sign until it is recovered, effectively freezing all of its funds, for example, in the case of key theft or turnover in an organization. Recoverable -- each ID also includes a separate recovery authority, which also defaults to self. If another ID is specified as the recovery authority it can be used to recover the ID from its revoked state, with the option to alter the primary authorities used to spend and sign. Private - Each ID contains a set of zero-knowledge private addresses, which can be used as messaging, financial, or voting endpoints, and each ID also contains a content map of key-value hashes, intended to be used alongside applications and various identity policies to provide everything from private yet selectively provable claims and attestations to selectively provable components of a strong identity, attested to with a quantum secure signature when that is available. Powerful - Multiple addresses or other IDs can be defined as primary addresses, and any number of those may be required to spend, sign, or alter the identity (N of M). The revocation authority may only be altered by the revocation authority, and the same applies to the recovery authority, either of which may be another identity with its own N of M multisig controls for its primary addresses."
      }
    ]
  },
  {
    "id": "00002900",
    "image": "00002900.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat is Verus Digital Signatures?"
      },
      {
        "from": "gpt",
        "value": "Verus digital signatures, based on Verus ID, offer the first worldwide verifiable, decentralized, single or multi-sig friendly-name signatures for content such as messages and files, authentication, and attestations, with full support for revocation and recovery in case of key loss or theft. Bitcoin, which was first to enable worldwide, P2P decentralized blockchain transactions, and most of its derivatives, offer ways to sign messages with specific private keys that can be verified against public addresses. While that does offer some limited signing capability, it does not offer capabilities that can compete with centralized services offering more sophisticated key management. A single public/private key pair lacks critical capabilities to make it suitable as an actual identity, most notable and obvious being the ability to recover from loss or theft of private keys, but arguably as important are friendly name aliases, modifiable multi-sig signing, updates, privacy, and the association of signed attestations by other identities to statements about properties of the identity. Verus ID enables free verifiable digital signatures for all through the Verus ID protocol as just one of the many new capabilities it enables. It is also the foundation upon which many new applications and additional capabilities can be built. For example, using Verus ID signatures, it\u2019s possible for any journalist anywhere to sign photos, videos, and content, establish a reputation for authenticity, and counter the potential for deep-fakes to make the truth harder to find. Open source projects can now create their own identities and digitally sign their binary releases, ensuring that not only can a file be verified by hash as the one downloaded from a particular server, but by signature as the actual file initially signed by the developer or release engineer. Signatures also form the basis for any attestation of one party to the validity of another. In fact, there are so many applications for digital signatures, from things listed already, to physical entry systems, to workflow applications, to new earning opportunities that a full discussion of use cases would overwhelm these release notes. In any case, we are happy to release digital signatures for all, and we hope you enjoy using this new, simple capability, maybe even think of a new use case you\u2019d like to pursue yourself as a business opportunity on the Verus Network!"
      }
    ]
  },
  {
    "id": "00003000",
    "image": "00003000.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat is VerusHash 2.1?"
      },
      {
        "from": "gpt",
        "value": "VerusHash 2.0 was the first algorithm to significantly equalize FPGAs dominance over CPUs, once they were introduced on the Verus network. While FPGAs were intentionally not blocked completely, which would simply drive the performance battle to the higher end and further into secret, the VerusHash 2.0 algorithm was developed to explicitly equalize FPGAs and modern CPUs and has met its original goals in keeping FPGA performance for the price under 2x of CPU. VerusHash 2.1 introduces an adjustment to the equalization technology, which we expect to tilt the balance a bit more favorably towards CPUs, while still enabling FPGAs to operate on the hash algorithm with minor modifications. Verus Developers have proactively reached out to FPGA manufacturers and made the new algorithm available to them, so that everyone will have an opportunity to mine and stake when the Verus economy starts to roll and identity rewards, which will not inflate the currency, but should far exceed the potential for block rewards, begin streaming from the network."
      }
    ]
  },
  {
    "id": "00003100",
    "image": "00003100.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nHow do i bootstrap my wallet?"
      },
      {
        "from": "gpt",
        "value": "Verus-Desktop Procedure: In Verus-Desktop, exit your profile, by selecting the exit icon at ther top right. Wait a minute or two, allowing the wallet to close completely in the background. click help, Bootstrap VRSC. That opens up a new window. Follow the instructions and when finished successfully, select your preferred profile and enter Verus Desktop. Verus CLI Procedure: Go to the folder where your daemon is extracted (standard verus-cli) Shutdown verusd and wait for it to close completely doubleclick fetch-bootstrap in your file browser. Follow the instructions and when finished, start your verusd daemon as usual."
      }
    ]
  },
  {
    "id": "00003200",
    "image": "00003200.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat are the Advanced Issue Resolving Procedure regarding the wallet bootstraping?"
      },
      {
        "from": "gpt",
        "value": "Make sure your wallet is not active. If you already had you wallet running, backup essential files: a. Go to VRSC Wallet location b. copy wallet.dat to a SAFE location c. copy VRSC.conf to a SAFE location d. Verify that both files are copied to your safe location. Make sure the latest version of your Wallet for Verus is installed a. Download the latest Verus Wallet from link 1, supplied above. b. Verify the SHA256 checksum & signature of your download, to verify you have an untampered installer. c. extract the file you just downloaded to a suitable location. On MacOS and Linux you will have extracted an AppImage which can be run directly. Windows users need to run the installer. Installing the bootstrap: a. Download the bootstrap from Link 2. (For Windows a zip archive is available to accomodate native extraction. Linux and MacOS users can use the tar.gz archive) b. (Optional, but recommended) Verify the md5, sha256 or sha512 checksum and the signature of your download, to verify that you downloaded an untampered Bootstrap archive. c. Remove all files and folders from VRSC Wallet Location except wallet.dat, debug.log, VRSC.conf and if applicable VRSC-bootstrap.*. d. Extract the downloaded archive to VRSC Wallet location. Make absolutely sure the folders blocks and chainstate are extracted into the correct folder. If the end up in a different folder (eg. VRSC-bootstrap-folder) move them to VRSC Wallet location. f you had a VRSC wallet running before, restore essential files: a. Go to VRSC Wallet location b. Verify that your wallet.dat is bigger than the one in this folder (if any is present) c. copy wallet.dat from your SAFE location. Now Start your wallet."
      }
    ]
  },
  {
    "id": "00003300",
    "image": "00003300.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nHow do i verify my new downloaded wallet?"
      },
      {
        "from": "gpt",
        "value": "Using Verus-Desktop: download the new version, extract the archive, verify the signature using the data in the *.signature.txt-file through your existing Verus-Desktop, VerusID tab, Verify Signed Data and choose to verify a file. Only continue when this verification returns True. Stop your Verus-Desktop Wallet, Install the verified installer on windows. Start your wallet. Using CLI Wallet: download the new version, extract the archive, verify the signature using the data in the *.signature.txt-file with the command ./verus verifyfile \"address or identity\" \"signature\" \"filepath/filename\" command. Only continue when this verification returns True. stop your verusdaemon verus stop, extract the verified archive to your current CLI-wallet location. Start your wallet (verusd)."
      }
    ]
  },
  {
    "id": "00003400",
    "image": "00003400.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nHow do i backup my wallet?"
      },
      {
        "from": "gpt",
        "value": "In Verus Desktop: Go to Settings, Coin Settings and click Export native wallet backup. Confirm that you want to export after reading the pop-up. The green message will tell you where the backup is and what it's name is. In linux or MacOS CLI: run ./verus z_exportwallet '<mywalletexport>' and in Windows CLI you just run verus z_exportwallet '<mywalletexport>'"
      }
    ]
  },
  {
    "id": "00003500",
    "image": "00003500.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nHow do i restore my wallet from a backup?"
      },
      {
        "from": "gpt",
        "value": "There are 2 ways to do it, first way is to use your backup of your wallet.dat file. Stop verusd. For Windows-Desktop or Agama, just exit and wait for it to close completely. For the linux cli run ./verus stop, or for the windows cli run verus stop. Once your wallet is finished closing copy the backup of your wallet.dat file from your backup location to the directory listed in the start of this document (see above). Now restart your wallet by launching Verus Desktop, Agama or running verusd for the CLI. Second way is to use your walletexport file, Note: The filename you replace<mywalletimport> with, can only contain letters and figures, no other characters, so it cannot have an file-extension Attention: The command z_importwallet triggers the wallet to rescan in order to make all transactions to the freshly imported wallet addresses visible. Rescanning your wallet may take a considerable time, during which your wallet may not respond to other commands. Please be patient. The <PATH> in the z_importwallet command needs to be the full absolute path to the file. replace LOGINNAME with the actual loginname. In Verus Desktop: Go to Settings, Coin Settings and click Import native wallet backup. Click Choose file, browse to your backup file, select it and click Open. Click Import to start the inport process. In Linux or MacOS CLI run ./verus z_importwallet '<PATH><mywalletimport>'. Or in Windows CLI run verus z_importwallet \\'<PATH><mywalletimport>\\'"
      }
    ]
  },
  {
    "id": "00003600",
    "image": "00003600.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nHow do i change Verus-Desktop from Lite Mode to Native Mode?"
      },
      {
        "from": "gpt",
        "value": "Make sure you have your seed phrase and password you use to log into your Lite mode wallet available. First of all make a notition of your address and balance of VRSC you have in your wallet, before closing Verus Desktop. Make sure the latest version of Verus-Desktop is installed. Download the latest Verus-Desktop. Verify the signature of your download, so you have an untampered installer. https://verus.io/verify-signatures. Run the file you just downloaded to install it. Installing the bootstrap: Download the bootstrap from https://bootstrap.verus.io Verify the SHA256 checksum of your download, to verify you have an untampered Bootstrap. Unpack the downloaded archive to VRSC wallet & data location. Getting Verus-Desktop ready for Native mode: Start Verus-Desktop and enter your profile (if not loaded automatically). If present in your profile, deactivate Verus Lite. Click + Add Coin, select Verus from the dropdown list and continue. Select Native and optionallu tick the options Start staking, Start Mining and fill in the amount of threads to mine with. Click Add Coin. Verus-Desktop will add Verus as Native chain to your screens. You may get a red warning message about Zcash params. (Verus Desktop will detect if you have the necessary ZCash parameter files and download them if needed) As soon as the download is finished, Verus-Desktop will continu and bring you into your wallet. It will automatically start to synchronize the blockchain. Since we already put the majority of the chain in place, this will take just a few minutes. Now you just want to import the lite wallet address in verus desktop native. Just ask me that and i will let you know!"
      }
    ]
  },
  {
    "id": "00003700",
    "image": "00003700.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nHow to import your Lite wallet address into your native Verus Desktop?"
      },
      {
        "from": "gpt",
        "value": "Important General Information\nverus command \"<userinput>\" needs to be entered literally, with <userinput> replaced by your specific userdata. So if the text directs you to use for example \"<Public Address>\", you replace that (including the < and >) with the address,\nso it looks similar to this: \"RYX6RYU3AAvwVCNyNM4cVyGUhSMUPvKs3r\".\nThis method is confirmed to work on Verus and all Komodo assetchains.\nPrerequisites\nIn order to convert your seedphrase into a Private key (WIF), you need to have a running native wallet first, that is fully synchronized. The earliest wallet that supports these functions is Verus Desktop v0.6.4-beta-1.\nIf needed, use this guide to quickly synchronize your wallet: https://wiki.verus.io/#!how-to/how-to_bootstrap.md\nConverting Seed to WIF\nIf you have a seed, you can retrieve your Private key (WIF) by having the Verus Desktop wallet convert it for you.\nTo convert your seed phrase in Verus Desktop, go to settings --> Coin Settings, select the chain you want to use in the top-right corner and enter the following command:\nrun convertpassphrase \"word_1 word_2 word_3 ... word_n\"\nNote: Make sure you replace Word1 word2 word3 ... word_n with the actual seedphrase (12 or 24 words) of the address you want to import!\nYou will receive a response similar to this:\n{\n\"walletpassphrase\": \"seedphrase\",\n\"address\": \"RYX6RYU3AAvwVCNyNM4cVyGUhSMUPvKs3r\",\n\"pubkey\": \"02ffc2f4b071afdec631e3fb7d435a0047be14a81ea1a269e4206b0068c0c1fa6f\",\n\"privkey\": \"d899ed88e9ee2e90c2cf51cb47e7b4495ec1e1cb10763bb1c111b0bde48bf86c\",\n\"wif\": \"UwGb5KvGPfMUr1tu74Desjh87ZeJM4wq5goLyThcogeLifc5aJqT\"\n}\nCopy that information and store it somewhere SAFE. With this information anyone having access to it will have full control over that address.\nThe 52-character string after \"wif\": that is shown, is what you want to import in the next step.\nImporting a single WIF for a public (transparent) address\nTo import your address, go to settings --> Coin Settings, select the chain you want to use in the top-right corner and enter the following command:\nrun importprivkey \"<wif>\" \"\" true\nReplace <wif> with the actual wif you got from the convertpassphrase command earlier.\nNote: Don't use the WIF from the example above, but use the one from the CLI-interface in Verus Desktop.\nNote: The GUI wallet will not show any progress on the import and may give messages that the RPC daemon is not reacting. It will take quite some time for the process to finish in the background, especially if the address has many transaction on it.\nImporting multiple WIFs in one batch for public (transparent) addresses\nTo import your address, go to settings --> Coin Settings, select the chain you want to use in the top-right corner and enter the following command for every WIF except for the final one:\nrun importprivkey \"<wif>\" \"\" false\nImport the final WIF with this command:\nrun importprivkey \"<wif>\" \"\" true\nThe last command triggers the chain to rescan all addresses in your wallet, including all the addresses you just imported.\nReplace <wif> with the actual wif (like the one you got from the convertpassphrase command earlier).\nNote: Don't use the WIF from the example above, but use the one from the CLI-interface in Verus Desktop.\nThe GUI wallet will not show any progress on the import and may give messages that the RPC daemon is not reacting. It will take quite some time for the process to finish in the background, especially if the address has many transaction on it.\nImporting a single WIF for a private address\nTo import your address, go to settings --> Coin Settings, select the chain you want to use in the top-right corner and enter the following command:\nrun z_importkey \"<wif>\" \"yes\" 1\nReplace <wif> with the actual wif you got from the convertpassphrase command earlier.\nNote: Don't use the WIF from the example above, but use the one from the CLI-interface in Verus Desktop.\nThe GUI wallet will not show any progress on the import and may give messages that the RPC daemon is not reacting. It will take quite some time for the process to finish in the background, especially if the address has many transaction on it.\nImporting multiple WIFs in one batch for private addresses\nTo import your address, go to settings --> Coin Settings, select the chain you want to use in the top-right corner and enter the following command for every WIF except for the final one:\nrun z_importkey \"<wif>\" \"no\"\nImport the final WIF with this command:\nrun z_importkey \"<wif>\" \"yes\" 1\nThe last command triggers the chain to rescan all addresses in your wallet, including all the addresses you just imported.\nReplace <wif> with the actual wif (like the one you got from the convertpassphrase command earlier).\nNote: Don't use the WIF from the example above, but use the one from the CLI-interface in Verus Desktop.\nThe GUI wallet will not show any progress on the import and may give messages that the RPC daemon is not reacting. It will take quite some time for the process to finish in the background, especially if the address has many transaction on it."
      }
    ]
  },
  {
    "id": "00003800",
    "image": "00003800.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nHow do I install the Verus CLI (command line interface) wallet on a brand new (hosted) Linux system?"
      },
      {
        "from": "gpt",
        "value": "Notice: Read it completely before use.\nImportant General Information\nwallet.dat location on Linux: ~/.komodo/VRSC\nProcedure:\nFirst make sure your system is up to date:\nsudo apt-get update && apt-get upgrade -y\nI suggest not to use the root account. I you have not yet done, set up a new user\nsudo adduser newusername\nsudo usermod -aG sudo newusername\nSwitch to new username\nsu - newusername\nTest the your new user actually has root (SuDo) access, e.g.:\nsudo ls -la /root\nYou should get some lines like this:\ndrwx------ 6 root root 4096 Jul 3 15:56\nDownload & install the wallet binaries:\nwget https://github.com/VerusCoin/VerusCoin/releases/download/v0.9.3/Verus-CLI-Linux-v0.9.3-amd64.tgz\nThe downloaded archive contains another archive and a signature text file, enabling the archive within to be verified (You'll need a running wallet to do that)\nAlso: Verify the URL to the latest version from the Download latest Wallet above.\ntar -xvf Verus-CLI-Linux-v0.9.3-amd64.tgz\nNow extract the wallet archive:\ntar -xvf Verus-CLI-Linux-v0.9.3-amd64.tar.gz\nChange directory to verus-cli\ncd verus-cli\nFetch parameters, takes time, more on slow Internet connection\n./fetch-params\nCreating the chaindata directory\ncd ~\nmkdir -p .komodo/VRSC\ncd ~/.komodo/VRSC\nDownload the block-chain bootstrap, this considerably speeds up synchronisation of the block-chain from days to minutes... (optional)\nwget https://bootstrap.verus.io/VRSC-bootstrap.tar.gz\ntar -xvf VRSC-bootstrap.tar.gz\nInstall libraries for Verus\nsudo apt-get install libcurl3 g++-multilib -y\nInstall Tmux a terminal multiplexer with which you can run threads in the background see https://en.wikipedia.org/wiki/Tmux\nsudo apt-get install tmux -y\nStart tmux:\ntmux\nLaunch Verus Daemon with or without number of threads\n(usually number of threads equals number of cores or double of that if the processor support hyper threading well)\n~/verus-cli/verusd -gen -genproclimit\n~/verus-cli/verusd -gen -genproclimit=24\nOnce mining is operational \u00e2\u20ac\u201c again this may take some time \u00e2\u20ac\u201c\nyou\u00e2\u20ac\u2122ll see: 256 mega hashes complete - working\nthen detach tmux\n[ctrl]&b d\nDisable login with Root User\n(make sure your newly created user login works and has sudo rights)\nsudo nano /etc/ssh/sshd_config\nFind: PermitRootLogin yes\nAnd set to\nPermitRootLogin no\nApply new settings:\nsudo systemctl restart sshd"
      }
    ]
  },
  {
    "id": "00003900",
    "image": "00003900.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nHow do i shield verus via the CLI?"
      },
      {
        "from": "gpt",
        "value": "Note: Shielding is no longer required for coinbase rewards after block 800200. Earlier timelocked coins will still need to be shielded in order to use them.\n\nImportant General Information\nverus command \"<userinput>\" needs to be entered literally, with <userinput> replaced by your specific userdata. So if the text directs you to use for example \"<Public Address>\", you replace that (including the < and >) with the address,\nso it looks similar to this: \"RYX6RYU3AAvwVCNyNM4cVyGUhSMUPvKs3r\".\n\nGeneral remarks on CLI wallet:\nOn Windows command line enter the commands as shown without the surrounding quotation marks\nIn Linux shell preceed the commands without surrounding quotation marks with ./\nIn MacOS shell preceed the commands without surrounding quotation marks with ./\nExample: the windows version verus listtransactions transforms in Linux or MacOS to ./verus listtransactions.\n\nGeneral remarks on Windows command line formatting:\nThe CLI help shows the command format for Linux and MacOS.\nFor windows substitute the shown '-character with the \"-character.\nFor windows substitute the shown \"-character with the \\\"-characters.\n\nProcedure:\nYou must first \"shield coins\" (send from a transparent R-addr to a shielded zaddr) to be able to use them in staking, when they first unlock.\nThis is part of the Zcash protocol itself. The commands below assume you are in the Verus source code directory\n\nverus z_shieldcoinbase\n\nYou can either use an existing zaddr or use a new zaddr. To make a new zaddr:\n\nverus z_getnewaddress\n\nUse the address the above command outputs in the z_shieldcoinbase command\n\nTo shield all coinbase in your wallet, you can use \"*\" (quotes are important) and zaddr that is getting the funds:\n\nverus z_shieldcoinbase \"*\" <YOUR zs-ADDRESS>\n\nTo just shield a single address, specify that as the first argument:\n\nverus z_shieldcoinbase <YOUR R-ADDRESS> <YOUR zs-ADDRESS>\n\nOnce the funds have moved to the zaddr and are confirmed, you can freely send them to any address, They will be eligble for staking id sent to a transpartent address (R-address).\n\nTo send from a certain zaddr to a transparent address, use z_sendmany. The following command sends 10 Verus to a given transparent address, ID address or ID-name.\nExample: verus z_sendmany zcZpfuzzJqmNJ3fUJekvbnyuxuJe9eAURAHrMCvN2Nr7VuWjakb1LEw6j2etPcCnr45BRot7MaMbipuS5da162BfuUkFGxx '[{\"amount\":10,\"address\":\"Verus Coin Foundation@\"}]'"
      }
    ]
  },
  {
    "id": "00004000",
    "image": "00004000.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nHow do i join verus testnet?"
      },
      {
        "from": "gpt",
        "value": "Important General Information\nVRSCTEST data location:\nLinux GUI: ~/.komodo/VRSCTEST\nMac OS: /Users//Library/Application Support/Komodo/VRSCTEST\nWindows 10: %AppData%\\Roaming\\Komodo\\VRSCTEST\\\n\nGeneral remarks on CLI wallet:\nOn Windows command line enter the commands as shown without the surrounding quotation marks\nIn Linux shell preceed the commands without surrounding quotation marks with ./\nIn MacOS shell preceed the commands without surrounding quotation marks with ./\nExample: the windows version verus listtransactions transforms in Linux or MacOS to ./verus listtransactions.\n\nGeneral remarks on Windows command line formatting:\nThe CLI help shows the command format for Linux and MacOS.\nFor windows substitute the shown '-character with the \"-character.\nFor windows substitute the shown \"-character with the \\\"-characters.\n\nNecessary files:\nLink 1: Download latest Wallet\n\nProcedure:\nJoining Verus testnet to test the latest capabilities before they are released to mainnet or simply test if your goals are possible without spending VRSC (testnet coins hold no value) is easy.\n\nDownload a wallet\nThe first thing you need is a VRSC wallet. The CLI-wallet and Verus Desktop GUI wallet are available on the link above for Windows,\nLinux and MacOS. If you already have a wallet verify that the wallet is the most recent version and update if needed.\n\nVerus Desktop Wallet\nStart your Verus Desktop wallet.\nIf you have never run Verus testnet on your system before:\nGo to settings (cogwheel icon) and select General Settings.\nSelect Enable VRSCTEST.\nClick Save Changes\nRestart Verus desktop\nWhen logged in, click Add Coin, select Verus Testnet and click Continue.\nSelect the startup parameters you desire (Native (Lite mode is not available on testnet), Staking, mining (specify number of threads), reindex blockchain and/or rescan wallet) and click Add Coin.\nCLI wallet\n1. start CLI walletdaemon using these parameters:\nverusd -chain=VRSCTEST\nAny extra parameter that you are used to for VRSC (like -mint or -pubkey=) can be appended as well.\n2. commands through the CLI are in the following format:\nverus -chain=VRSCTEST\nThe only difference with the normal VRSC chain is the -chain=VRSCTEST option, that is added."
      }
    ]
  },
  {
    "id": "00004100",
    "image": "00004100.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nHow do I know when an immature block will \"unlock\" (mature)?"
      },
      {
        "from": "gpt",
        "value": "Get the values of the current block height (\"blocks\") and the \"blockstomaturity\" the distance to maturity of the transaction in question. (i.e. the number of blocks between current block height and where it unlocks. You can see the number is decreasing all the time, and if you add it to the current block height you'll see a constant.)\nApply this formula: blockstomaturity / 1440 = days to maturity (unlocking)\ne.g. 925558/1440=643 days"
      }
    ]
  },
  {
    "id": "00004200",
    "image": "00004200.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nI'm mining since XYZ with XYZ, why I haven't found a block yet?"
      },
      {
        "from": "gpt",
        "value": "One block = 12 coins (as now)\nNetworkHashrate = retrieved by getmininginfo command from </>CLI\nLocalHashrate = retrieved by getmininginfo command\nBlockTime = 60 seconds (average)\nReal example with - 31 threads AMD Ryzen 5950x @ 4.4Ghz -\nBear in mind that these are average times to find a block. In real life you may hit a block much sooner or later after finding the last. In the long run it averages out to the values predicted."
      }
    ]
  },
  {
    "id": "00004300",
    "image": "00004300.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nHow do I direct all my solo mined rewards to a single Verus wallet?"
      },
      {
        "from": "gpt",
        "value": "Verus Wallet.dat, Chaindata & VRSC.conf standard locations\nLinux: ~/.komodo/VRSC\nMac OS: ~/Library/Application Support/Komodo/VRSC\nWindows 10: %AppData%\\Roaming\\Komodo\\VRSC\\\nOS independent through Verus Desktop: Click help, Show Verus data folder (default)\nPrerequisites\nHave a native VRSC wallet running\nIn Verus Desktop\nIn Verus Desktop, there is at this moment no way to enter an address to mine to. However, editing the VRSC.conf can be done to achive our goal:\nIn the receive window of your wallet, click the hamburger (three vertical dots) next to the address you want to receive your rewards in and click Copy Public Key. Close down Verus Desktop.\nEdit VRSC.conf(see standard locations at the top) and add the line pubkey=THELONGSTRINGCOPIED. Save and exit.\n* Start Verus Desktop as you normally do.\n\nIn Agama Wallet\nStep 1 - First get your wallet address you want to mine to:\n* If you don't have an address, click \"Receive\", click \"Get New Address\" and choose \"Transparent Address\" from the drop down.\n\nStep 2 - Next we need to retrieve our pubkey,\n* click on the hamburg next to the address that you want to receive the rewards in and click copy pubkey\n\nStep 3 - Set your PubKey\nGo to 'Settings', 'App Config (config.json)' and enter your pubkey(THELONGSTRINGCOPIED) into the 'Pubkey VRSC mining key' field. Click 'Save app config' to save these settings.\n* Restart Agama\n\nIn Verus CLI\nStep 1 - First get your wallet address you want to mine to:\nYou can find an address if you already have previous transactions, or you can create a new one. To find an address from a previous transaction, use the command line verus listtransactions and copy the address found after \"address\".\nTo generate a new wallet address, use the command line verus getnewaddress and a new address will be created.\n\nStep 2 - Next, using your new address, enter the command with verus-cli verus validateaddress. From the output find the long string after \"pubkey\", copy without the quotation marks.\n\nStep 3 - Set your PubKey\nOption 1: use this pubkey when starting your daemon by adding the following line to the end of your command, just before the \"&\" sign: -pubkey=THELONGSTRINGCOPIED Option 2: edit your VRSC.conf and add the line pubkey=THELONGSTRINGCOPIED. Then start your whallet as you are used to.\n\nYour rewards will now be mined to that address. It would be a good idea to keep notes and associate the wallet address with the pubkey...also to double check that you did validate the correct pubkey for the wallet address, making sure you made no errors."
      }
    ]
  },
  {
    "id": "00004400",
    "image": "00004400.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nHow to consolidate multiple wallet.dat files in one?"
      },
      {
        "from": "gpt",
        "value": "Verus Wallet.dat, Chaindata & VRSC.conf standard locations\nLinux: ~/.komodo/VRSC\nMac OS: ~/Library/Application Support/Komodo/VRSC\nWindows 10: %AppData%\\Roaming\\Komodo\\VRSC\\\nOS independent through Verus Desktop: Click help, Show Verus data folder (default)\nProcedure\nWith one of the wallets loaded, issue the following command: z_exportwallet FILENAME (ie z_exportwallet export_instance01, the filename cannot have a . in it.)\nCopy the generated file to the machine that hosts your main wallet. This file will either be in the same directory as the config file and wallet.dat file, or in a location specified by exportdir in VRSC.conf.\nIssue the following command (on the \"main\" verus-cli): z_importwallet /LOCAL_PATH/EXPORTFILENAME (ie /home/user/export_instance01)\nnote: Older versions of verusd required expordir to be set in VRSC.conf before exporting a wallet. If you get an error about your export directory not being set, please upgrade immediately.\n\nThese commands can be given in:\nCLI wallet: ./verus z_exportwallet FILENAME& ./verus z_importwallet /LOCAL_PATH/FILENAME\nVerus Desktop in settings, coin settings: run z_exportwallet FILENAME& run z_importwallet /LOCAL_PATH/FILENAME\nVerus Agama in settings, <CLI>: z_exportwallet FILENAME& z_importwallet /LOCAL_PATH/FILENAME"
      }
    ]
  },
  {
    "id": "00004500",
    "image": "00004500.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat reward do I get for staking (PoS) or Mining (PoW) a block?"
      },
      {
        "from": "gpt",
        "value": "The reward received depends of the blocknummer:\n\nEra 1:\n1st week: Block 0 - 10080 ==> 0 to 384 VRSC reward ==> 16,588,800 VRSC total this period (reward rising linearly and changing each block)\n\nEra 2:\n1st month: Block 10080 - 53279 ==> 384 VRSC reward ==> 8,294,400 VRSC total this period\n2nd month: Block 53280 - 96479 ==> 192 VRSC reward ==> 4,147,200 VRSC total this period\n3rd month: Block 96480 - 139679 ==> 96 VRSC reward ==> 4,147,200 VRSC total this period\n4th month: Block 139680 - 182879 ==> 48 VRSC reward ==> 2,073,600 VRSC total this period\n5th month: Block 182880 - 226079 ==> 24 VRSC reward ==> 1,036,800 VRSC total this period\n\nEra 3:\nYears 1+2: Block 226080 - 1277279 ==> 24 VRSC reward ==> 25,228,800 VRSC total this period\nYears 3+4: Block 1277280 - 2328479 ==> 12 VRSC reward ==> 12,614,400 VRSC total this period\nYears 5+6: Block 2328480 - 3379679 ==> 6 VRSC reward ==> 6,307,200 VRSC total this period\n. . . halving indefinitely every 1051200 blocks (approximately 2 years)\n\nAll rewards equal or over 192 VRSC are time locked to mature at a random block between 129,600 and 1,181,520"
      }
    ]
  },
  {
    "id": "00004600",
    "image": "00004600.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat's the value of VRSC?"
      },
      {
        "from": "gpt",
        "value": "Use with: https://veruspay.io/api/ for simple USD VRSC price, or choose options now added!\n\nOptions (values are case insensitive):\ncurrency - BTC or Fiat code like USD or CAD\nticker - ARRR or VRSC\ndata - volume or price - volume only relevant if exchange is defined\nexch - name of supported exchange, e.g. digitalprice - If no exchange, price is average of all supported for that coin.\n\nIf no options are set, the default is average price in USD fiat of VRSC.\n\nExamples:\n\nhttps://veruspay.io/api/ - This get's the current price of VRSC in USD, weighted against 24hr volume across all exchanges. This is the default return.\nhttps://veruspay.io/api/?exch=digitalprice&currency=cad - This will get the current price on digital price for VRSC and display in CAD fiat\nhttps://veruspay.io/api/?currency=btc - This will get the average price of VRSC in BTC, weighted by 24 hr volume across both exchanges\nhttps://veruspay.io/api/?currency=cad - This gets the current average price of VRSC in CAD, weighted by 24 hr volume across both exchanges\nhttps://veruspay.io/api/?exch=cryptobridge&data=volume - This will get the 24 volume of VRSC on CryptoBridge in the default currency of USD\nhttps://veruspay.io/api/?exch=cryptobridge&data=volume&currency=btc - This does the same but with BTC as the currency result\nhttps://veruspay.io/api/?currency=cad&ticker=arrr - Gets the average price of ARRR."
      }
    ]
  },
  {
    "id": "00004700",
    "image": "00004700.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nIs mining profitable?"
      },
      {
        "from": "gpt",
        "value": "Mining VRSC with Verushash is at this time one of the most profitable coins to mine with your CPU.\nIf you want to know how profitable it is, you need to know a few important details about your own conditions."
      }
    ]
  },
  {
    "id": "00004800",
    "image": "00004800.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat hardware will I use to mine with?"
      },
      {
        "from": "gpt",
        "value": "1. CPU - If that is a fairly modern CPU with AES and AVX instructions built in.\nThis will be true if your processor is produced in 2013 or later. For processors between 2008 and 2012 you need to check the specifications.\nOlder processors can still mine, but they will not perform well.\n2. GPU - It is possible to mine with fairly modern Nvidia GPU's, but since Verushash uses specific functions from the\nmentioned AES and AVX instruction sets, they will perform better than old CPUs, but worse than modern CPUs.\n3. FPGA - Many of these semi-specialized machines can be reprogrammed to mine VRSC. They don't have the same power per processor as a CPU, but they often have multiple processors running parrallel. The stronger ones can outperform a CPU easily, but need a lot of power to do so.\n\nIf you know the answer to the hardware, you can look op a comparable one in the Spreadsheat from Link 1, to give you an\nidea of the performance.\n\nIf you know your energy price also, you can calculate an estimation of how much your hardware can earn you at this moment.\n\nIf you have to get new hardware just to mine, think about it for a moment: would you have bought new hardware anyway? If so,\nyou can use this information to get an idea what kind of hardware you want to buy."
      }
    ]
  },
  {
    "id": "00004900",
    "image": "00004900.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nHow do you know a block was minted (staking reward)?"
      },
      {
        "from": "gpt",
        "value": "You can see the following characteristics:\n1. a block hash without a lot of leading zeros\n2. a last transaction that in your wallet has no fee, is from the same address that it is to, which is also the address the coinbase is to (easiest confirmation) and\n3. The POS difficulty is encoded in the low 32 bits of the nonce with 96 of the next nonce bits as zero/reserved, then a random hash at the top half"
      }
    ]
  },
  {
    "id": "00005000",
    "image": "00005000.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nHow does staking work?"
      },
      {
        "from": "gpt",
        "value": "You'll start staking with the first VRSCs that are not time locked + in your public / transparent wallet + 150 blocks old (or about 2.5 hours).\n\nYour chances to win a block: Your coins in your public/transparent wallet / Total staking supply in public/transparent wallets (which is max. about 485.000 VRSC from the first (sunrise) week as long as the rewards were below 192)\n\nRemember: There will be only one reward every minute. It\u00e2\u20ac\u2122s going to be either mining or staking, so on average 720 mining and 720 staking rewards every day.\n\nExample: I have 300 coins in a public/transparent address / 300.000 in public wallets (let's assume some part is lost/not staking or in private wallets), so that would be 1/1000 x 720 of a chance or around average 1,4 days for a staking block rewards. Hash power does not influence staking reward.\n\nRegarding the Verus debug.log: \u00e2\u20ac\u0153 No eligible staking transaction found\u00e2\u20ac\u0153. It means that you are staking but have not received a reward yet. @miketout will change the message soon.\n\nRegarding time locked coins:\nThe Zcash protocol requires you to send all coins received by mining (on wallet, not pool mining) or staking (reward transactions, also on wallet, not pool staking) once unlocked to a private address and then to a public/transparent address before you can use them either for staking or for making transactions (that\u00e2\u20ac\u2122s how you make use of your rewarded coins = coinbase coins). So, once your coins loose their time lock, you can unlock those coins as described in [\"Shield Verus Coins via Command Line Interface]\"(#!how-to/how-to_shield_via_cli.md). Once you've transferred the coins from your private address back to (one of) your public / transparent address(es) and you\u00e2\u20ac\u2122ll automatically start staking."
      }
    ]
  },
  {
    "id": "00005100",
    "image": "00005100.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nHow can I tell the difference between staked and mined coins?"
      },
      {
        "from": "gpt",
        "value": "CLI:\nYou can check this in the VerusExplorer https://explorer.verus.io/\n1. Check last 10 transactions in the </>CLI. Use listtransactions.\n2. Copy the blockhash of the received award"
      }
    ]
  },
  {
    "id": "00005200",
    "image": "00005200.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\n3. Add it at the end of https://explorer.verus.io/api/getblock?"
      },
      {
        "from": "gpt",
        "value": "Hint: An example: https://explorer.verus.io/api/getblock?hash=9e6fa91356211a554c580c90ec9c2067dd420ff74c7d33481775793f7b0e7f03 \u00e2\u20ac\u201c so this one is minted....\n\nVerus Desktop:\nIn Verus Desktop, simply go to your Mining Dashboard and enter into Verus details.\nScroll down to the bottom of the page. It will list the rewards as mined or minted in green.\nThe TXIDs that staked the minted rewards are shown in blue.\n\nVerus Agama (Deprecated):\nIn the GUI you can also click yourself thru to that information.\n1. Click on the magnifying glass all the way on the right of the transaction.\n2. On the pop-up click on \"Open in the VRSC Explorer\" bottom left.\n3. In the VRSC explorer click on the block hash value (in light blue) \u00e2\u20ac\u201c now the block hash is displayed as the title of the box.\n4. Click on the info \"i\" on the right and click on \"search\": in the result displayed for blocktype 'mined' or 'minted'.(edited)"
      }
    ]
  },
  {
    "id": "00005300",
    "image": "00005300.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nHow can I check my immature balance in a graphical Wallets?"
      },
      {
        "from": "gpt",
        "value": "Verus Desktop\nVerus Desktop shows your immature balance in your wallet dashboard, between the Transparant Balance and Private Balance.\n\nAgama (Deprecated)\nIn the Agama wallet click on the hamburger menu (the three stripes) on the top right\nclick on Settings\nclick on the item </> CLI\nSelect VRSC as coin\nType the following command: getwalletinfo\nclick Execute\nscroll down and find \"immature_balance\": which will give you the amount of time-locked coins in your wallet."
      }
    ]
  },
  {
    "id": "00005400",
    "image": "00005400.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nHow do I unshield my coin rewards and get them staking on CLI?"
      },
      {
        "from": "gpt",
        "value": "Important General Information\nverus command \"<userinput>\" needs to be entered literally, with <userinput> replaced by your specific userdata. So if the text directs you to use for example \"<Public Address>\", you replace that (including the < and >) with the address,\nso it looks similar to this: \"RYX6RYU3AAvwVCNyNM4cVyGUhSMUPvKs3r\".\n\nRemarks on Windows command line formatting:\nThe CLI help shows the command format for Linux and MacOS. On the native windows command prompt (cmd.com) the formatting is different.\nIn windows command prompt, substitute the shown '-character with the \"-character. In windows command prompt, substitute the shown \"-character with the \\\"-characters.\n* In windows command prompt, omit the preceding ./.\n\nNote: As an example, in Linux the command:\n./verus z_sendmany <my_private_address_without_quotationmarks> '[{\"address\":\"<my_transparent_address>\",\"amount\":<95.9998>}]'\nshould be entered on the Windows command prompt as:\nverus z_sendmany <my_private_address_without_quotationmarks> \"[{\\\"address\\\":\\\"<my_transparent_address>\\\",\\\"amount\\\":<95.9998>}]\"\n\nProcedure:\n1) ./verus z_shieldcoinbase \"*\" my_private_address_without_quotationmarks\nthis capture all so called coinbases, i.e. mined coins that are not yet staking.\nyou have to wait 100 blocks (minutes) after receiving them before being able to move them.\nwait for a few minutes for the tx to be confirmed.\n2) ./verus z_getbalance <my_private_address_without_quotationmarks> this is to substract the 0.0001 VRSC fee from the balance in the next step.\n3) ./verus z_sendmany <my_private_address_without_quotationmarks> '[{\"address\":\"<my_transparent_address>\",\"amount\":<95.9998>}]'\namount is minus 0.0001 from balance and without quotation marks.\n(4) to verify: ./verus z_gettotalbalance\nafter a few minutes (operations from private addresses are a bit time consuming)"
      }
    ]
  },
  {
    "id": "00005500",
    "image": "00005500.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat should I do if I end up on my own fork because of a network issue or having an old version of the wallet?"
      },
      {
        "from": "gpt",
        "value": "This solution can be solved in 2 ways: you can simply install the latest bootstrap file (less work, big download) or search manually for the forked block and invalidate that block (time-consuming, no download needed.)\n\nProcedure 1 (Easy, installing bootstrap)\nFor all GUI or CLI users.\n1. Stop the wallet/mining process by cleanly shutting down the program.\n2. Update your wallet if necessary.\n3. Follow the procedure in HOW-TO Backup, Install or Update and Bootstrap your wallet.md to efficiently rectify the problem.\n4. Do not be dismayed if it seems that your mining rewards suddenly seem to come to a halt. Remember, when you mine to the wrong chain rewards can come in very quickly, but they are worth nothing.\n\nProcedure 2 (Time consuming, no extra download)\nVerus-Desktop\nThe commands are all entered in the Native Client Terminal that is located under Settings, Coin Settings.\nSearch for the earliest block that not matches the blockchain:\nrun getblockhash <suspected blocknumber> will show you the blockhash for the blocknumber you filled in\nThe response shown in the Native Client Terminal will be similar to this:\n5cc7844973fb95ef17f1772ea4aba579f0d8273fb0ee6064cd8e707d1056c646\nCheck the blockhash your command gave you against the blockhash the explorer shows.\nIf the blockhash from the explorer is different than yours, repeat steps 2 & 3 until you find the earliest block that is different.\nUse the earliest incorrect blockhash from your system to invalidate that block:\nrun invalidateblock <earliest incorrect blockhash>\nThe Native Client Terminal will not give feedback on this command.\nNow use the correct blockhash that the explorer gave you for the block you just locally invalidated:\nrun reconsiderblock <correct blockhash>\nAgain the Native Client Terminal will not give feedback on this command.\nOnce your wallet connects to a node that is on the correct chain, it will quicly synchronize.\nIf needed you can either restart your wallet to force new connections or manually disconnect bad nodes.\nCLI\nSearch for the earliest block that not matches the blockchain:\n./verus getblockhash <suspected blocknumber> will show you the blockhash for the blocknumber you filled in\nThe response will be similar to this:\n5cc7844973fb95ef17f1772ea4aba579f0d8273fb0ee6064cd8e707d1056c646\nCheck the blockhash your command gave you against the blockhash the explorer shows.\nIf the blockhash from the explorer is different than yours, repeat steps 1 & 2 until you find the earliest block that is different.\nUse the earliest incorrect blockhash from your system to invalidate that block:\n./verus invalidateblock <earliest incorrect blockhash>\nThe deamon will not give feedback on this command.\nNow use the correct blockhash that the explorer gave you for the block you just locally invalidated:\n./verus reconsiderblock <correct blockhash>\nAgain the daemon will not give feedback on this command.\nOnce your daemon connects to a node that is on the correct chain, it will quicly synchronize.\nIf needed you can either restart your daemon to force new connections or manually disconnect bad nodes."
      }
    ]
  },
  {
    "id": "00005600",
    "image": "00005600.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat are the mining pools that I can join?"
      },
      {
        "from": "gpt",
        "value": "luckpool.net\npool.verus.io\nzergpool.com\nwattpool.net\nvrsc.ciscotech.dk\nwww.lepool.com.cn\nwww.zhuaao.com\naod-tech.com\nverus.alphatechit.co.uk\nMadCatMining (currently inactive)"
      }
    ]
  },
  {
    "id": "00005700",
    "image": "00005700.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nwhat are the staking pools that I can join?"
      },
      {
        "from": "gpt",
        "value": "Dudezmobi\nGinasis\nA staking pool has advantages and disadvantages over solo staking:\n\nDisadvantages:\n1. It causes centralization on the network\n2. The pool owner is in control of all funds in the pool, including yours.\n3. You need to trust the pool operator to share the rewards fairly.\n4. You need to trust the pool operator to release your funds back to you on request.\n5. You need to trust the pool operator to securely run the pool 24/7.\n\nAdvantages:\n1. You don't need to run your wallet 24/7 in native mode."
      }
    ]
  },
  {
    "id": "00005800",
    "image": "00005800.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat are the remarks on Windows command line formatting?"
      },
      {
        "from": "gpt",
        "value": "The CLI help shows the command format for Linux and MacOS. On the native windows command prompt (cmd.com) the formatting is different.\nFor windows substitute the shown '-character with the '-character.\nFor windows substitute the shown '-character with the \\'-characters."
      }
    ]
  },
  {
    "id": "00005900",
    "image": "00005900.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nHow do i pool mine on low priority on my windows computer?"
      },
      {
        "from": "gpt",
        "value": "In order to let your mining not interfere with other processes running on your PC, we'll need to deprioritize\nthe mining process. This will result in your miner throttling down whenever your PC needs processing power.\nPeople have reported to be able to use CPU-heavy applications, like games, without the miner interfering, with\nthis method.\nBecause the Verus wallet (GUI and CLI) does a lot more than mining, it is not recommended to use this for a\nsolo-mining setup. This is tested on Verus NHEQminer and Verus CCMiner on Windows .\nFirst thing you will need is pool-mining software. The link is supplied above this procedure. Download your\npreferred miner, extract it to your prefered location and configure the batchfile with the pool of your choice\nand your own mining address.\nNow we'll need to adjust the batchfile to run on low priority:\nNHEQMINER:\nchange to the folder you extracted the download\nedit the start.bat\nScroll down to the line, that needs to be adjusted:\nnheqminer.exe -v -l %PoolHost%:%Port% -u %PublicVerusCoinAddress%.%WorkerName% -t %Threads% % % % % % % % % %\nadjust the line so it looks like this:\n%windir%\\system\\cmd.exe /c start 'NHEQminer VRSC' /Low '%THIS_DIR%\\nheqminer.exe' -v -l %PoolHost%:%Port% -u %PublicVerusCoinAddress%.%WorkerName% -t %Threads% % % % % % % % % %\nsave and exit the file\nrun start.bat to start mining\nCCMINER:\nChange to the folder you put the three files from the downloaded archive in (run.verushhash.bat, libcrypto-_-x.dll & ccminer.exe)\nedit the run.verushhash.bat\nThe line, that needs to be adjusted:\nccminer -a verus -o stratum+tcp://na.luckpool.net: -u REoPcdGXthLyeTCrJtrQvxhYTknbFbec.Donator -p d= -t\nadjust the line, so it looks like:\nC:\\Windows\\System\\cmd.exe /c start 'ccminerCPUv. VerusPool' /Low 'c:\\Miners\\CCminer . CPU Release .\\ccminer.exe' -a verus -o stratum+tcp://pool.verus.io: -u RVjvbZuqSGLGDmBBFkbHWySPKExtfjQ.Donator -t\nmake sure you replace the pool (stratum+tcp://pool.verus.io:) with your prefered pool and the address\n(RVjvbZuqSGLGDmBBFkbHWySPKExtfjQ) with your own address. The address shown in this line is the veruscoin\nfoundation donation address. If desired change the identifier (Donator) to a name that easily identifies the\nminer to you.\nsave and exit the file\nrun run.verushhash.bat to start mining."
      }
    ]
  },
  {
    "id": "00006000",
    "image": "00006000.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat are the standard file location for Verus Desktop?"
      },
      {
        "from": "gpt",
        "value": "The installer for Verus-Desktop suggests a standard location to install to, depending on the choice whether you want to install it for all users or just yourself.\nAnyone who uses the computer (All Users)\n%ProgramFiles%\\Verus-Desktop\nOnly me:\n%USERPROFILE%\\AppData\\Local\\Programs\\Verus-Desktop\nNormally you don't need to worry about these locations, but in some instances you will be asked by community members providing support to look up a file in a folder in your Verus-Desktop installation.\nnote: changing files in these folders or subfolders may result in a corrupt installation. Only do so when instructed by our support community members.\nDeamons\nThe daemons are located in the komodod, verusd and zcashd folders that can be found in the\nresources\\app\\assets\\bin\\win\\ subfolder of your installation folder.\nProgram settings\nVerus Desktop saves it program settings on a different folder:\n%AppData%\\Verus-Desktop\nThe users settings are stored in appdata\\config.json in the program settings folder.\nStandard chain data and wallet locations\nKMD\n%AppData%\\Komodo\nVerus\n%AppData%\\Komodo\\VRSC\nKomodo asset chains\nAny Komodo asset chain will create a subfolder in the KMD chain data and wallet folder, which is standard named. The names will be in capitals and are identical to the official asset-chain name.\n%AppData%\\Komodo\\<CHAIN-NAME>\nNote: examples\nPirate: %AppData%\\Komodo\\PIRATE\nUtrum: %AppData%\\Komodo\\OOT\nZexo: %AppData%\\Komodo\\ZEXO\nAnd so on...\nFor easy access to the binaries folders, Verus-Desktop program settings and VRSC chain folder and all binary folders, you can use the debug menu in Verus-Desktop."
      }
    ]
  },
  {
    "id": "00006100",
    "image": "00006100.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nHow do I install the Verus CLI (command line interface) wallet on a brand new (hosted) Linux system?"
      },
      {
        "from": "gpt",
        "value": "First make sure your system is up to date:\nsudo apt-get update && apt-get upgrade -y\nI suggest not to use the root account. I you have not yet done, set up a new user\nsudo adduser newusername\nsudo usermod -aG sudo newusername\nSwitch to new username\nsu - newusername\nTest the your new user actually has root (SuDo) access, e.g.:\nsudo ls -la /root\nYou should get some lines like this:\ndrwx------ root root Jul :\nDownload & install the wallet binaries:\nwget https://github.com/VerusCoin/VerusCoin/releases/download/v../Verus-CLI-Linux-v..-amd.tgz\nThe downloaded archive contains another archive and a signature text file, enabling the archive within to be verified (You'll need a running wallet to do that)\nAlso: Verify the URL to the latest version from the Download latest Wallet above.\ntar -xvf Verus-CLI-Linux-v..-amd.tgz\nNow extract the wallet archive:\ntar -xvf Verus-CLI-Linux-v..-amd.tar.gz\nChange directory to verus-cli\ncd verus-cli\nFetch parameters, takes time, more on slow Internet connection\n./fetch-params\nCreating the chaindata directory\ncd ~\nmkdir -p .komodo/VRSC\ncd ~/.komodo/VRSC\nDownload the block-chain bootstrap, this considerably speeds up synchronisation of the block-chain from days to minutes... (optional)\nwget https://bootstrap.verus.io/VRSC-bootstrap.tar.gz\ntar -xvf VRSC-bootstrap.tar.gz\nInstall libraries for Verus\nsudo apt-get install libcurl g++-multilib -y\nInstall Tmux a terminal multiplexer with which you can run threads in the background see https://en.wikipedia.org/wiki/Tmux\nsudo apt-get install tmux -y\nStart tmux:\ntmux\nLaunch Verus Daemon with or without number of threads\n(usually number of threads equals number of cores or double of that if the processor support hyper threading well)\n~/verus-cli/verusd -gen -genproclimit\n~/verus-cli/verusd -gen -genproclimit=\nOnce mining is operational \u2013 again this may take some time \u2013\nyou\u2019ll see: mega hashes complete - working\nthen detach tmux\n[ctrl]&b d\nDisable login with Root User\n(make sure your newly created user login works and has sudo rights)\nsudo nano /etc/ssh/sshd_config\nFind: PermitRootLogin yes\nAnd set to\nPermitRootLogin no\nApply new settings:\nsudo systemctl restart sshd"
      }
    ]
  },
  {
    "id": "00006200",
    "image": "00006200.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nHow do I know when an immature block will 'unlock' (mature)?"
      },
      {
        "from": "gpt",
        "value": "You can use the following scripts to automate it (prints, for each block, how many blocks remaining and the estimated date).\nKeep in mind that the actual number of blocks per day is not always exactly . It varies and the estimated dates may change slightly over time. Below you will find the Linux script that will calculate the extimated time for you:\nScript:\n#!/bin/bash\n#Config\nverus_path='/XXXX/verus-cli/'\nverus_cli='verus'\nget_transactions=( $($verus_path$verus_cli listtransactions '' |grep blockstomaturity|sed 's/.e: //;s/,//g'|awk '{ print $ }'|sort -n) )\ncur_block=( $($verus_path$verus_cli getmininginfo|grep blocks':|sed 's/.e: //;s/,//g'|awk '{ print $ }') )\narr_idx=''\nfor i in '${get_transactions[@]}'\ndo\ndays_to_mature=$(( ($i )/ ))\nmature_to_date=$(date +'%m-%d-%Y' -d '+$days_to_mature days')\necho ''Block #' $arr_idx 'will mature in approximately'$days_to_mature 'days' '(' $mature_to_date ')' '\n((arr_idx++))\ndone\nYou'll need to enter the correct path to your verus directory and you will need to have the verus daemon running in order to sucessfully run this script."
      }
    ]
  },
  {
    "id": "00006300",
    "image": "00006300.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nCan you provide me some linux Bash Scripts To Make Mining Life Easier?"
      },
      {
        "from": "gpt",
        "value": "Following are some bash scriptse to help make managing your Linux-based CLI miner a bit easier. Prereq is to install mailutils (postfix) and configure with your server's FQDN and set inet_interfaces=localhost in the postfix/main.cf file.\nImportant General Information\nVRSC Wallet & data location on Linux: ~/.komodo/VRSC\nfor wallet version prior to .., replace verusd with komodod.\nScripts:\nMINER SRVC MONITOR & ALERT IF DOWN\nChecks for the verusd daemon and if it has stopped emails you.\ncheckifverusdisrunning.sh\n#!/bin/bash\nif pgrep -x 'verusd' > /dev/null\nthen\nTRUE=''\nelse\necho 'Merry Miner Has Stopped Mining!!! HELP!!' | mail -s 'OUTAGE: Merry' -a 'From: user@yourqualifieddomain.tld' you@youremail.tld\nfi\nALERT ON NEW BLOCKS MINED\nPrereq: Create a file called txHistory.txt and put in it, saved to your home folder.\nThe script then compares the current wallet TX count and compares to the txHistory file...\nso first run it will enter the right number in that file overwriting your .\nOnly emails you if the number changes.\ncheckfornewblocks.sh\n#!/bin/bash\nhistoricalcount=$(cat /home/user/txHistory.txt)\nlivecount=$(/home/user/verus-cli/verus getwalletinfo | grep txcount | sed 's/[^-]*//g')\nif (($livecount > $historicalcount))\nthen\necho $livecount > /home/user/txHistory.txt\necho 'Merry Miner Has Mined a Total of $livecount Blocks! Woot!' | mail -s 'Merry's Blocks: $livecount' -a 'From: user@yourqualifieddomain.tld' you@youremail.tld\nelse\nNOCHANGE=''\nfi\nWALLET BACKUP TO SECURED EMAIL (PROTONMAIL SUGGESTED)\nFor this script I recommend setting up a new Protonmail account with no association to any other service or your name, FA secure it.\nSchedule script in CRONTAB\nIn the following, the */ is every min, the is on the hour every hour, the is every day at PM.\nCRONTAB\n# m h dom mon dow command\n*/ * * * * /home/user/checkfornewblocks.sh\n* * * * /home/user/checkifverusdisrunning.sh\n* * * /home/user/backupwallet.sh\nNote: For any emails sent (for backup of dat file for example) make sure to enforce TLS security in postfix by adding the following line to your /etc/postfix/main.cf\nsmtp_tls_security_level=encrypt"
      }
    ]
  },
  {
    "id": "00006400",
    "image": "00006400.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhy do i get an error like ERROR: Cannot Get a lock on data directory /root/.komodo/VRSC?"
      },
      {
        "from": "gpt",
        "value": "Komodo is probably already running.\nProcedure:\nIt just means you can't start it when it's already running. If it isn't running we can take a look at it.\nCheck to see if it is running by running:\n./verus getinfo\nIf it's running you'll get info back, if it isn't you'll get an error.\nIf that throws an error, it's worth checking using this command:\nps fax | grep verus\nand seeing if any processes are listed besides the process you're using to search.\nYou would see verusd with a child process of komodo and all its cli arguments."
      }
    ]
  },
  {
    "id": "00006500",
    "image": "00006500.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nHow to make a cloud daily backup of wallet.dat?"
      },
      {
        "from": "gpt",
        "value": "Note: I use Google Cloud for my staking wallet and backups but the script works regardless of what you use; if you have timelocked coins, you will have to keep your wallet.dat file secure for a long, long time: it's crucial to maintain secure the staking instance as well as the storage..\nImportant General Information\nVRSC Wallet and Data location on Linux: ~/.komodo/VRSC\nProcedure:\nIf you use GCloud:\ncreate a new directory where we'll upload the backups (ie: mkdir /home/user/backup) create a storage bucket via GCloud console (ie bucket_verus)\n* mount the bucket on your local machine (syntax is: gcsfuse ; ie gcsfuse bucket_verus /home/user/backup)\nThe script can be crontab scheduled to run daily or you can run it manually; if you schedule it, you have to hardcode the encryption passphrase; otherwise you can input it manually each time. You will have to install gnupg to encrypt (sudo apt-get install gnupg gnupg-agent). As always: be sure to fully understand what the script does and why I left some echos to demonstration/test purposes, you can sefely remove all of them.\n#!/bin/bash\n# Customize the SOURCE and the DEST folders\nSOURCE_FOLDER=/home/XXXXX/.komodo/VRSC/\nDEST_FOLDER=/home/XXXX/backup/\nBCK_DATE=date +%Y-%m-%d.%H:%M\nSOURCE_FILE=wallet.dat\nDEST_FILE=$SOURCEFILE''$BCK_DATE\nENCRYPT_EXT='.gpg'\n# all echo are for test purposes, feel free to delete them\necho check variable\necho SOURCE - $SOURCE_FOLDER\necho SOURCE_FILE - $SOURCE_FILE\necho DEST FILE - $DEST_FILE\necho DEST - $DEST_FOLDER\necho TO_BE_DEL - $DEST_FOLDER$SOURCE_FILE\nsleep\ncp $SOURCE_FOLDER$SOURCE_FILE $DEST_FOLDER$DEST_FILE\nsleep\n# Customize the passphrase!!\ngpg --batch --yes -c --cipher-algo AES --passphrase='XXXXXX' $DEST_FOLDER$DEST_FILE\nsleep\nrm $DEST_FOLDER$DEST_FILE\n# Keep only last days - BE SURE to fully understand how it works, as every 'rm' command!\nfind $DEST_FOLDER/wallet* -type f -mtime + -exec rm {} ;"
      }
    ]
  },
  {
    "id": "00006600",
    "image": "00006600.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nHow do i Compile Monkins Verus enhanced CCMiner for various hardware?"
      },
      {
        "from": "gpt",
        "value": "Read it completely before using.\nImportant General Information\nThis guide is aimed towards Debian based Linux distributions. If you are using a different kind of distribution\n(eg RPM-based, like CentOS) you will need to install the dependancies using a procedure that fits your\nspecific distribution.\nThere are active branches in ccminer github repo:\nARM (for bit ARM chips with AES intrinsic)\nVerus. (standard x- pc's)\nVerus.gpu (GPUs)\nNote: Replace ARM in the git clone line below with the branchname above you want to use.\nProcedure:\nInstall dependencies (specific for Debian-based distributions):\nsudo apt-get install libcurl-openssl-dev libssl-dev libjansson-dev automake autotools-dev build-essential git\nFor GPU-miner compilation additional sources are required (Not needed for CPU or ARM):\nwget http://developer.download.nvidia.com/compute/cuda/./Prod/local_installers/cuda_.._.._linux.run\nsudo sh cuda_.._.._linux.run\nDownload the source and compile:\ngit clone --single-branch -b ARM https://github.com/monkins/ccminer.git\ncd ccminer\nchmod +x build.sh\nchmod +x configure.sh\nchmod +x autogen.sh\n./build.sh\nAnd finally starting the miner (Change pool, address & workername to your own liking):\n./ccminer -a verus -o stratum+tcp://pool.verus.io: -u RVjvbZuqSGLGDmBBFkbHWySPKExtfjQ.donator -p x"
      }
    ]
  },
  {
    "id": "00006700",
    "image": "00006700.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat are the PHP staking interface for coinshielding nodes?"
      },
      {
        "from": "gpt",
        "value": "Procedure:\nThese tools will help you stake on your permanently running machine using Verus CLI, instead of running the Agama GUI wallet.\nFeatures\nautomatic shielding and unshielding of coinbase (staking, solo mining)\nautomatic tracking of total coins generated (also present in e-mail notifications)\noptional e-mail notifications on newly generated coins\noptional periodical wallet.dat backups, also as an encrypted ZIP archive\noptional periodical wallet balance e-mail notifications\nInitial Verus daemon configuration\nFollow the guide in link above to set-up your daemon for the first time. You will need a transparent address, a zs address and the daemon running with correct parameters (-mint -cheatcatcher=zs...).\nDo not stake with the same wallet.dat on multiple nodes."
      }
    ]
  },
  {
    "id": "00006800",
    "image": "00006800.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nHow do i pool mine on linux with low priority?"
      },
      {
        "from": "gpt",
        "value": "Procedure:\nIn order to let your mining not interfere with other processes running on your PC, we'll need to deprioritize the mining process. This will result in your miner throttling down whenever your PC needs processing power. People have reported to be able to use CPU-heavy applications, like games, without the miner interfering, with this method.\nBecause the Verus wallet (GUI and CLI) does a lot more than mining, it is not recommended to use this for a solo-mining setup. This is tested on Verus NHEQminer and Verus CCMiner on Ubuntu ..\nFirst thing you will need is pool-mining software. The link is supplied above this procedure. Download your preferred miner, extract it to your prefered location and configure the batchfile with the pool of your choice and your own mining address.\nNow we'll need to adjust the batchfile to run on low priority:\nNHEQMINER:\nRun your miner as you normally would, with nice -n placed in front of the command you normally use,\nfor example:\nnice -n ./nheqminer -v -l pool.verus.io: -u RVjvbZuqSGLGDmBBFkbHWySPKExtfjQ.Donator -p x -t\nmake sure you replace the pool (pool.verus.io:) with your prefered pool and the address\n(RVjvbZuqSGLGDmBBFkbHWySPKExtfjQ) with your own address. The address shown in this line is the veruscoin\nfoundation donation address. If desired change the identifier (Donator) to a name that easily identifies the\nminer to you.\nCCMINER:\nRun your miner as you normally would, with nice -n placed in front of the command you normally use,\nfor example:\nnice -n ./ccminer -a verus -o stratum+tcp://pool.verus.io: -u RVjvbZuqSGLGDmBBFkbHWySPKExtfjQ.Donator -t\nmake sure you replace the pool (stratum+tcp://pool.verus.io:) with your prefered pool and the address\n(RVjvbZuqSGLGDmBBFkbHWySPKExtfjQ) with your own address. The address shown in this line is the veruscoin\nfoundation donation address. If desired change the identifier (Donator) to a name that easily identifies the\nminer to you."
      }
    ]
  },
  {
    "id": "00006900",
    "image": "00006900.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nwhy do i get this error while loading shared libraries: libgomp.so.: No such file or directory?"
      },
      {
        "from": "gpt",
        "value": "When running ./verusd on a Linux distro (eg Debian or Devuan), not all dependencies may be installed by default, resulting in the errormessage error while loading shared libraries: libgomp.so.: No such file or directory or error while loading shared libraries: libz.so: No such file or directory.\nTo solve this you need to install the libgomp and zlibg-dev libraries:\nsudo apt-get install libgomp zlibg-dev"
      }
    ]
  },
  {
    "id": "00007000",
    "image": "00007000.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nwhat are the Standard file location for Verus Desktop for windows?"
      },
      {
        "from": "gpt",
        "value": "The Linux version of Verus Desktop is supplied as an AppImage, so it does not get installed, but mounted in the /tmp folder on execution.\nThe folder it is mounted to will look like .mount_Verus-xxxxx where the xxxxx part will be a random set of characters, changing on every start of the wallet.\n(It is a hidden folder: in order to see it, <CTRL>-H will toggle the display of hidden folders)\nNormally you don't need to worry about these locations, but in some instances you will be asked by community members providing support to look up a file in a folder in your Verus-Desktop installation.\nnote: changing files in these folders or subfolders may result in a corrupt installation. Only do so when instructed by our support community members.\nDeamons\nThe daemons are located in the komodod, verusd and zcashd folders that can be found in the\nresources/app/assets/bin/linux subfolder of your (mounted) program folder.\nProgram settings\nVerus Desktop saves it program settings on a different folder:\n~/.verus-desktop\nThe users settings are stored in appdata/config.json in the program settings folder.\nStandard chain data and wallet locations\nKMD\n~/.komodo\nVerus\n~/.komodo/VRSC\nKomodo asset chains\nAny Komodo asset chain will create a subfolder in the KMD chain data and wallet folder, which is standard named. The names will be in capitals and are identical to the official asset-chain name.\n~/.komodo/<CHAIN-NAME>\nNote: examples\nPirate: ~/.komodo/PIRATE\nUtrum: ~/.komodo/OOT\nZexo: ~/.komodo/ZEXO\nAnd so on...\nFor easy access to the binaries folders, Verus-Desktop program settings and VRSC chain folder and all binary folders, you can use the debug menu in Verus-Desktop."
      }
    ]
  },
  {
    "id": "00007100",
    "image": "00007100.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhy do i get this ERROR: Cannot Get a lock on data directory /root/.komodo/VRSC on my mac os?"
      },
      {
        "from": "gpt",
        "value": "Procedure:\nIt just means you can't start it when it's already running. If it isn't running we can take a look at it.\nCheck to see if it is running by running:\n./verus getinfo\nIf it's running you'll get info back, if it isn't you'll get an error.\nIf that throws an error, it's worth checking using this command:\nps fax | grep verus\nand seeing if any processes are listed besides the process you're using to search.\nYou would see verusd with a child process of komodo and all its cli arguments."
      }
    ]
  },
  {
    "id": "00007200",
    "image": "00007200.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat versions of OSX/macOS are supported?"
      },
      {
        "from": "gpt",
        "value": "Verus Desktop\nCurrently only macOS ..x and up are tested and supported for Verus Desktop. Installing Verus Desktop on OSX ..x or earlier may be possible but the wallet does not function and never completes the initial sync.\nVerus CLI wallet\nThe CLI wallet should run on lower versions without problems.\nFile location\nVRSC Wallet and Data location on Mac OS: /Users//Library/Application Support/Komodo/VRSC\nNecessary files:\nLink : How-To install the latest Wallet\nProcedure:\nIf you installed on OSX ..x or earlier and need to remove it:\nQuit your Wallet.\nEject the wallet dmg.\nMake a backup of wallet.dat & VRSC.conf if necessary (Only if you had a wallet on this machine or if you used an existing wallet.dat)\nIf you installed the Agama.app in Applications, move this to the trash.\nMove ~/Library/Application Support/Agama to the trash or use the following command in terminal\nrmdir /Users//Library/Application\\ Support/Agama.\nMove ~/Library/Application Support/Komodo to the trash or use the following command in terminal\nrmdir /Users//Library/Application\\ Support/Komodo.\nUpgrade OS.\nInstall Agama (Check Link for a smooth install)"
      }
    ]
  },
  {
    "id": "00007300",
    "image": "00007300.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nHow do i start mining on macos?"
      },
      {
        "from": "gpt",
        "value": "VRSC Wallet and Data location on Mac OS: /Users//Library/Application Support/Komodo/VRSC\nSoftware needed to mine\nPrerequisite: VerusCoin wallets\nNeeded: VerusCoin miners\nPrerequisites:\nTo start mining with your Mac, you will need to have an address to mine to. Possibilities are:\nAn exchange address (NOT recommended. This is asking for trouble.)\nAn address from a web-wallet\nAn address from a mobile wallet\nAn address from a Verus-Desktop Lite wallet\nAn address from a Verus-Desktop Native wallet\nProcedure:\nTo start mining on your Mac, you should already have a wallet and and access to an address to mine to. Now to start mining we will need to download the miner first:\n. Go to the Veruscoin miners link above and download CLI nheqminer for MacOS.\n. Open the download folder in finder.\n. doubleclick nheqminer-MacOS-v...tar.gz to unpack it in your download folder.\n. Open the nheqminer folder that appeared in your download folder\nNow we need to configure things so the miner connects to a mining pool (listed on the download page, below the miner download) and mines to your address. In the instructions below I will use the VerusCoin community pool and the address for the Veruscoin foundation. make sure to use your own address and if desired the details of a different pool:\n. click start.sh and open with TextEdit.app\n. On the nd line, change PoolHost= into Poolhost=pool.verus.io\n. On the rd line, change Port= into 'Port='\n. On the th line, change 'PublicVerusCoinAddress=' into PublicVerusCoinAddress=RVjvbZuqSGLGDmBBFkbHWySPKExtfjQ\n(make sure you use your own address!!!!)\n. On the th line, change WorkerName= into WorkerName=MacOS (or any name you want to identify your system)\nIn the next step we will set how many processor threads the miner will use. Make sure to use less threads than your processor has virtual cores. If you allow the miner to use all cores, your system will become sluggish at times, or it may even become completely unresponsive:\n) On the th line, change Threads= into Threads= (fill in the amount of virtual cores you want to use)\n) Save and exit the file.\nWe have all the settings ready to go, but the file we just edited is not executable right now.\n. Click Start.sh and click copy 'Start.sh'\n. Click in an empty space in you folder and click Paste items, which will result in a new start copy.sh file.\n. rename start copy.sh to start.command\nNow we have an executable file that will run when you doubleclick.\n. Doubleclick start.command and your machine will start mining."
      }
    ]
  },
  {
    "id": "00007400",
    "image": "00007400.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nHow do i pool mine on macos with low priority?"
      },
      {
        "from": "gpt",
        "value": "Procedure:\nIn order to let your mining not interfere with other processes running on your PC, we'll need to deprioritize the mining process. This will result in your miner throttling down whenever your PC needs processing power.\nPeople have reported to be able to use CPU-heavy applications, like games, without the miner interfering, with this method.\nBecause the Verus wallet (GUI and CLI) does a lot more than mining, it is not recommended to use this for a solo-mining setup.\nFirst thing you will need is pool-mining software. The link is supplied above this procedure. Download your preferred miner, extract it to your prefered location and configure the batchfile with the pool of your choice and your own mining address.\nNow we'll need to adjust the batchfile to run on low priority:\nNHEQMINER:\nRun your miner as you normally would, with nice -n placed in front of the command you normally use,\nfor example:\nnice -n ./nheqminer -v -l pool.verus.io: -u RVjvbZuqSGLGDmBBFkbHWySPKExtfjQ.Donator -p x -t\nmake sure you replace the pool (pool.verus.io:) with your prefered pool and the address\n(RVjvbZuqSGLGDmBBFkbHWySPKExtfjQ) with your own address. The address shown in this line is the veruscoin\nfoundation donation address. If desired change the identifier (Donator) to a name that easily identifies the\nminer to you."
      }
    ]
  },
  {
    "id": "00007500",
    "image": "00007500.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat are the Standard file location for Verus Desktop on macos?"
      },
      {
        "from": "gpt",
        "value": "he installer for Verus-Desktop suggests a standard location to install to Applications\nAnyone who uses the computer\n/Applications/Verus-Desktop.app\nDeamons\nThe daemons are located in the komodod, verusd and zcashd folders that can be found in\n/Applications/Verus-Desktop.app/Contents/Resources/app/assets/bin/osx\nProgram settings\nVerus Desktop saves its program settings in your home folder:\n~/Library/Application\\ Support/Verus-Desktop\nThe users settings are stored in appdata/config.json in the program settings folder.\nStandard chain data and wallet locations\nVerus Desktop saves its chain and wallet data in your home folder:\nKMD\n~/Library/Application\\ Support/Komodo\nVerus\n~/Library/Application\\ Support/Komodo/VRSC\nKomodo asset chains\nAny Komodo asset chain will create a subfolder in the KMD chain data and wallet folder, which is standard named. The names will be in capitals and are identical to the official asset-chain name.\n~/Library/Application\\ Support/Komodo/<CHAIN-NAME>\nNote: examples\nPirate: ~/Library/Application\\ Support/Komodo/PIRATE\nUtrum: ~/Library/Application\\ Support/Komodo/OOT\nZexo: ~/Library/Application\\ Support/Komodo/ZEXO\nAnd so on...\nFor easy access to the binaries folders, Verus-Desktop program settings and VRSC chain folder and all binary folders, you can use the help menu in Verus-Desktop."
      }
    ]
  },
  {
    "id": "00007600",
    "image": "00007600.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nHow do i update my arm cli wallet?"
      },
      {
        "from": "gpt",
        "value": "Verus Wallet.dat, Chaindata & VRSC.conf standard locations\nARM Linux: ~/.komodo/VRSC\nNote: Due to the size of the blockchain, on an ARM installation this directory is usually stored on a mounted external hard drive.\nThis will have its own file path that was specified when the drive was mounted.\nThus the path to ~/.komodo/VRSC directory is likely to be user-specified & thus non-standard on an ARM.\n(NB This version is aimed at inexperienced users, so it includes the associated routine/basic Linux commands.\nYou will need access to the relevant directories, which may require sudo priveleges)\n(NB Raspberry Pi ARM boards lack some instruction sets to mine, though the Pi & Pi are ARM & can be used as staking devices if an ARM operating system is installed)\nProcedure:\nNavigate to the directory which contains the verus daemon binary file (the default is in the home directory - ie ~/verus-cli)\ncd verus-cli\nCheck the Verus daemon is running - you will need to keep it running to check the downloaded file's signature\ntop\n(verusd should appear as one of the processes in the list. If you need to start it use the command ./verusd.)\nDownload the latest ARM version. Check https://verus.io/wallet/command-wallet\n(The commands below are for v..-) Don't forget to change the version number to whichever one you are updating.\nwget https://github.com/VerusCoin/VerusCoin/releases/download/v..-/Verus-CLI-Linux-v..--arm.tgz\nunpack/unzip the download into the signature file and the binaries tar/zipped file\ntar -xvf Verus-CLI-Linux-v..--arm.tgz\nCheck it has unpacked/unzipped & open the signature file\nls -la\ncat Verus-CLI-Linux-v..--arm.tar.gz.signature.txt-file\nThis will display the signature information to verify the downloaded file is authentic.\nCHECK the signature by using the data in the signature file\n./verus verifyfile 'Verus Coin Foundation Releases@' '[signature string from signature.txt-file]' [your home directory file path]Verus-CLI-Linux-v..--arm.tar.gz\nThe return should be true. If you have an issue add '' around the file path.\nSTOP the Verus daemon\n./verus stop\nCheck whether it has stopped running with this command. (To be doubly sure you can also look in the debug file in the )\ntop\n(This time verusd should NOT appear in this list.)\nRename the old versions of the binaries (replace the version numbers with the version being replaced)\n(This ensures you can easily revert to the old version by renaming these files.)\nmv verus verus-v..-\nmv verusd verusd-v..-\nCheck they have been renamed\nls-la\nUnpack/unzip the binaries for the latest version\ntar -xvf Verus-CLI-Linux-v..--arm.tar.gz\nCheck if they have unpacked/unzipped in the directory\nls -la\nIf the directory where your Verus wallet.dat, Chaindata & VRSC.conf files are stored is in a non standard place - eg on a mounted external hard drive - you may have a datadir specified in your VRSC.conf file.\nNavigate to that directory to check your datadir is still correct. The VRSC.conf file may have been overidden in the update. This ensures the Verus daemon knows where to find the blockchain you have currently saved on your system.\ncat VRSC.conf\nIf it requires editing, use nano to edit this file\nnano VRSC.conf\n& append this to the VRSC.conf file :\ndatadir=[your custom file path for your mounted hard drive]\nStart the Verus daemon again on the new version (add any other start options from https://wiki.verus.io/#!faq-cli/clifaq-_verusd_options.md)\n./verusd\nCheck the version\n./ verus getwalletinfo\nOnce you are satisfied the new version is working, clean up the older binares (from step ) by deleting them (or just move them to another directory using the same mv command as step )\nrm verus verus-v..-\nrm verus verusd-v..-"
      }
    ]
  },
  {
    "id": "00007700",
    "image": "00007700.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat are the hardware and software requirements for ARM?"
      },
      {
        "from": "gpt",
        "value": "There are minimum requirements on your hardware and software for running a Verus Wallet on ARM-devices. If your platform does not meet the minimum requirements, you may not be able to run the required software.\nThe listed requirements are for running one chain. Additional PBaaS chains require more resources.\nVerus Wallet on CLI\nAbsolute minimum requirements:\n-bit processor\n-bit Operating system (Raspbian is standard bit)\nGB memory + GB Swap available to the CLI Wallet\nGB storage space for Verus Blockchain and CLI wallet\ninternet connectivity\nlibgomp and zlibg-dev libraries installed\nRecommended requirements\n-bit processor with AES functions enabled\n-bit Operation system (Raspbian is standard bit)\nGB memory or more + GB Swap available to the CLI Wallet\nGB storage on a fast medium (like NVMe device) for the Verus Blockchain & CLI wallet. This supplies room for blockchain growth over time and the ability to bootstrap the wallet.\ninternet connectivity\nlibgomp and zlibg-dev libraries installed\nVerus Wallet on GUI\nAbsolute minimum requirements:\n-bit processor\n-bit Operating system (Raspbian is standard bit) with GUI interface\nGB memory + GB Swap available to the Verus Desktop Wallet\nGB storage space for Verus Blockchain and Verus Desktop.\ninternet connectivity\nlibgomp and zlibg-dev libraries installed\nRecommended requirements\n-bit processor with AES functions enabled\n-bit Operation system (Raspbian is standard bit) ) with GUI interface\nGB memory or more + GB Swap available to the CLI Wallet\nGB storage on a fast medium (like NVMe device) for the Verus Blockchain & CLI wallet. This supplies room for blockchain growth over time and the ability to bootstrap the wallet.\ninternet connectivity\nlibgomp and zlibg-dev libraries installed\nStaking\nAbsolute minimum requirements:\nAll requirements to run a wallet\nRecommended requirements\nAll requirements to run a wallet\nA fully configured and functioning NTP client, to keep your clock synchronized\nLow latency internet connectivity\nSolo Mining\nAbsolute minimum requirements:\nAll requirements to run a wallet\nRecommended requirements\nAll requirements to run a wallet\n-bit processor with AES functions enabled\nLow latency internet connectivity\nPool Mining\n-bit processor with AES functions enabled\n-bit Operation system (Raspbian is standard bit)\nARM release of CCMiner or NHEQminer\nLow latency internet connectivity\nA public address to mine to\nA public mining pool to connect to"
      }
    ]
  },
  {
    "id": "00007800",
    "image": "00007800.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhy do i get error while loading shared libraries: libgomp.so.: No such file or directory?"
      },
      {
        "from": "gpt",
        "value": "When running ./verusd on a Linux distro (eg Debian or Devuan), not all dependencies may be installed by default, resulting in the errormessage error while loading shared libraries: libgomp.so.: No such file or directory or error while loading shared libraries: libz.so: No such file or directory.\nTo solve this you need to install the libgomp and zlibg-dev libraries:\nsudo apt-get install libgomp zlibg-dev"
      }
    ]
  },
  {
    "id": "00007900",
    "image": "00007900.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat is Public Blockchains as a Service (PBaaS) in veruscoin?"
      },
      {
        "from": "gpt",
        "value": "Its the Revolutionary Layer / Protocol Launches its Most Anticipated Mainnet Upgrade\nAfter years of hard work and dedication, on the fifth anniversary, the worldwide Verus community is excited to announce the launch of the highly anticipated mainnet upgrade on May . The Public Blockchains as a Service release marks a major milestone for Verus and the entire cryptocurrency industry.\nPBaaS activation: block height ,, (Sunday May )\nTurning the Crypto Industry on its Head\nThe wide cryptocurrency industry will see how much better Verus PBaaS is as a solution for true decentralization in cross-chain, DeFi AMMs, on-chain PP exchange, self-sovereign provable recoverable IDs, NFT capabilities, anti-phishing, anti-MEV, scale, or just about any of the challenges people have on crypto platforms today. In fact, as we prepare for activation of this protocol that enables so many new use cases for crypto, not to mention easy onboarding when entrepreneurs discover how to really leverage VerusIDs, PBaaS is so far beyond what people are experiencing on any crypto platform today that it has been easy to dismiss our community as describing the impossible.\nOnce PBaaS is live on mainnet and people can actually use all of this themselves, along with every project, chain and currency on the PBaaS network and EVERY ERC or ERC on Ethereum or even bridged to Ethereum, the truth of Verus will be self-evident, and those who build on Verus will more easily build faster, better, more secure apps and services with the possibility of provable identity + privacy, crowdfunded projects, businesses, economies, and public infrastructure efforts all seamlessly integrated into UIs that do not need business deals, permission, or any centralized infrastructure to connect services and users, enabling everyone to communicate in provable, private, or public ways that always include bidirectional, secure commerce of all kinds.\nCore Capabilities\nThe core capabilities of this release include (lots to learn to understand it all, but here\u2019s a partial list):\nVerus Intersystem Protocol (VIP) \u2014 Layer Multichain and Inter-chain Protocol\nTo our knowledge, the VIP protocol is the only fully decentralized, provable cross-chain technology available on any network that is based on cryptographic proofs of each chain with optional witnesses to confirm chain state. From what we\u2019ve been able to learn about LayerZero, Cosmos, Polkadot, Thorchain or others, VIP is different from (though closest in some ways to LayerZero), superior to, and more decentralized than all other cross-chain protocols we have seen. We can of course get into any level of discussion on the topic, but expect more descriptions and educational material to follow, now that the protocol was originally conceived of years ago, and has been developed and tested/hardened for years.\nVerusID Content Multimaps \u2014 Unlimited Provable Data for Every VerusID\nOf course this upgrade retains all of the groundbreaking capabilities already available with VerusID, including multisig options, separate revocation and recovery authorities for maximum security to prevent theft of identity or funds, and the ability to timelock your ID, enabling you to even thwart attempts to access your funds after someone compromised your secret keys.\nWith the PBaaS upgrade, VerusIDs also gain a powerful new capability that amounts to an unlimited, rent-free indexed database for every VerusID on every blockchain of the PBaaS network. This data can be encrypted or published in the clear and used for any purpose or application, whether social networking, voting, oracles, publishing any information, various forms of provable attestations, ratings, and much, much more. With the scalability of PBaaS and VerusID content multimaps together, the Verus PBaaS network becomes the most scalable, permissionless, provable source of human data from which AIs can learn about humanity in the world. We don\u2019t believe anything else even comes close, and with the recent rise of AI, it feels great to have this come together as a core original goal at a very appropriate and important time in history.\nPermissionless Chain, Token, and Liquidity Basket Currency Launches\nWhether you are looking to crowdfund an effort in a manner much like Kickstarter or IndieGoGo, sell identities to which you expect to add value or that are sub-IDs of a very cool root ID, or launch an entirely new blockchain economy and blockchain that starts with all of the Verus technology and a bridge to Verus and Ethereum from day , Verus is probably the best platform for you. In fact, as we were planning for the next testnet and wanted to have our own version of DAI to use in the bridge, since we want only decentralized currencies in the live mainnet bridge, we used a command to launch a token on the old testnet, exported it and all its supply to Ethereum\u2019s Goerli on the existing bridge, and that will be the DAI proxy/simulant that we will use on the new testnet. It saved us all some time, proving that Verus PBaaS will also be the easiest, most efficient way to launch even an Ethereum ERC, whether that ERC represents a token, DeFi basket, or even another PBaaS blockchain\nVerus enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing % POW/% POS, % hash attack resistant blockchain that can send and receive from the Verus chain which launched it.\nAll PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\nVerus also enables any ID owner to define Verus DeFi fractional basket currencies with one or more asset currencies backing the liquidity pool at a fractional percentage ranging from % to %. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners, stakers, and liquidity providers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protocols.\nDecentralized Ethereum Bridge\nShortly after PBaaS activates on mainnet, the Ethereum bridge will launch as a decentralized gateway and : provably mapped currency called \u201cvETH\u201d on the Verus network, also available to all PBaaS chains. The Ethereum bridge will also include a % backed basket of % Verus, % Ethereum, and % DAI, which will have the following functions:\nAuto conversion of fees from Verus <-> Ethereum when sending cross chain, based on the on-chain conversion price in the liquidity basket\nPermissionless ability to register *.vETH IDs, which in addition to the normal sub-ID capability of creating a single token that has control over the ID and can be exported to Ethereum as an automatic ERC NFT, can alternately be used to create a \u201cmapped currency\u201d, which can be provably mapped : to any ERC currency on the Ethereum network by exporting it to the vETH bridge. Only Verus root IDs, and IDs of a gateway can create mapped currencies to a gateway.\nDecentralized, fair bridge launch. The vETH bridge will launch as other currencies, chains, and gateways can launch, including the bridge converter. When the bridge launches, the contracts will have a surplus of Verus that comes from the fees paid to launch the gateway. In the protocol, that surplus is first used to solve the chicken and egg problem of none of one currency on the other chain. The contracts will cover the Verus fees for all sends from Ethereum before the Bridge converter launches, the liquidity basket becomes active, and the bridge recognizes that launch. Once that happens, the remainder of \u00bd the fees ( VRSC) that are left over from the launch and did not go to miners and stakers or pay Verus fees for people sending from Ethereum.\nThe Verus Fee Pool and Rewards\nAnother technology and solution unique to Verus, the Verus Fee Pool technology goes live with PBaaS. What this means is that as people use the cross-chain, DeFi, or purchase/register IDs on the network, the miner or staker will put all fees into the on-chain \u201cfee pool\u201d, and then take /th of the pool in addition to the block reward. This gives everyone incentive to still prioritize transactions based on fees, while preventing validators from gaming the fee system by washing fees-in vs. fees-out or working to reorg/rewind to capture a particularly juicy block reward. Instead, this technology aligns all validator incentives with the health/proper operation of the network and creates a circular on-chain economy that can last well beyond block rewards.\nA Historic Move Forward\nFor those who actually understand the challenges actual users have in crypto today, this release represents a historic move forward in public cryptographic networks and credibly and actually neutral infrastructure for society-wide human and AI collaboration and learning. As a community, this version really does realize the vision laid out in the original Verus Vision Paper, and at the same time provides much more than was described there. We are a community of individuals, and it is only because that is what we are that we have all arrived here together. The rest of the world is stuck on their Munchausen\u2019s protocols, trying to figure out how to share the front-running and back-running spoils taken from users, but Verus activation gives them a better path forward.\nAs a community, we do not promise, we describe a shared vision and welcome contributors from everywhere. Now that we, as a community, have delivered on the original phases described in the first vision paper together, it is time for each of us to also consider what we might personally want to build or be part of building over this incredible, geoscale, ID-enabled, fully decentralized platform. Our next efforts across the community should be to realize the promise of this network in the use cases we create, use cases that we will have an advantage creating on Verus over any other platform because it really is that much better."
      }
    ]
  },
  {
    "id": "00008000",
    "image": "00008000.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat is verus?"
      },
      {
        "from": "gpt",
        "value": "Open-source, Rent-free, Scalable Public Infrastructure\nVerus is an open-source decentralized blockchain protocol with proof-of-work and proof-of-stake as its consensus mechanism. It offers rent-free blockchain tools for creators and organizations to build products, services and systems.\nVerus is a multichain protocol with strong focus on scalability, security and decentralization. It can scale to world demand, is proven % hash attack resistant and is community built - all coins in circulation are fairly mined and staked.\nWith Public Blockchains as a Service (PBaaS) anyone can launch scalable, interoperable, customizable and independent blockchains for public or private use. Create tokens and currencies on top of blockchains for any use case. Get funding and create markets with protocol level built-in DeFi.\nProtocol-level self-sovereign digital identities and namespaces are at the center of the Verus multichain protocol. Giving builders, communities, businesses and organizations tools never before seen.\nEverything happening on the Verus multichain protocol has aligned incentives with the miners and stakers of the worldwide network. This makes it one of the most secure protocols with opportunities to earn.\n#Accessibility\nVerus creates blockchain technology that is accessible for everyone.\nNo programming needed for blockchain, token and currency launches\nLow protocol fees\nMining and staking accessible for everyone\n#Scalability\nVerus achieves practically unlimited scalability through its Public Blockchains as a Service.\nCreate use case specific blockchains and currencies\nMove activity between chains to avoid congestion\n#Security\nVerus takes blockchain security to the next level.\n% hash attack resistant through Verus Proof of Power\n#Interoperability\nVerus enables a world where all blockchains communicate with eachother.\nCross-chain, cross-system transfers of all data types\nBridges to communicate with external blockchains\n#Community\nVerus is a community driven project in the true spirit of Bitcoin.\nFair launch\nNo ICO, no developer fees, no founder fees, no premine\nDecentralized public blockchain"
      }
    ]
  },
  {
    "id": "00008100",
    "image": "00008100.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhats the coin overview?"
      },
      {
        "from": "gpt",
        "value": "Coin Overview\nLaunch Date May\nCoin Ticker VRSC\nAverage Block Time minute\nTransaction Fee . VRSC\nMax Supply ,, VRSC\nConsensus Algorithm Verus Proof of Power\nHash Algorithm VerusHash .\nPrivacy Zcash Sapling"
      }
    ]
  },
  {
    "id": "00008200",
    "image": "00008200.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat is VerusPoP?"
      },
      {
        "from": "gpt",
        "value": "Verus Proof of Power\nVerusPoP is a % proof-of-work, % proof-of-stake consensus algorithm. More information on the Verus miner and staker ecosystem.\n#Hybrid Consensus\nVerus Proof of Power, or VerusPoP, is a hybrid consensus algorithm which uses a statistical function that combines Proof of Work (PoW) and Proof of Stake (PoS) to validate each block by either PoW or PoS, while averaging to a target percentage of blocks being validated by each form of proof.\nIn short, it a unique consensus mechanism with % of all blocks validated by miners, and the other % by stakers.\n#Attack Resistant\nTo successfully attack the Verus blockchain, more than % of the validation power is needed, called Chain Power. A % attack would require a combined value of over % of both the chain\u2019s hashpower and its coin supply. For technical information on VerusPoP read the whitepaper (opens new window).\nVerusPoP provides a decentralizing effect on the network, incentivizing holders to keep nodes online to support the network. Even if a change in network hashrate happens, the PoW/PoS ratio stays the same: /%.\n#VerusHash .\nFrom the VerusPoP whitepaper (opens new window):\n'VerusHash is specifically developed to deliver a competitive advantage for CPUs with GPUs. It is an exceedingly CPU-friendly long input hash function that uses the quantum-secure, short input Haraka V as its core compression algorithm. The result is the fastest known cryptocurrency hash algorithm available to modern CPUs and the only hash algorithm which enables today\u2019s CPUs and GPUs to compete on an economically comparable level.\nHaraka V is designed as a short input hash to exclusively consume one chunk of bits and produce bits of a hash result. Utilizing Haraka V VerusHash takes any length of input and produces a bit hash result, unique to VerusHash, that also provides the same security guarantees as Haraka V. This makes VerusHash bit secure for classical computing attacks and bit secure against quantum computers for pre-image and second pre-image attacks.\nTo understand the VerusHash algorithm it helps to first separate the digest from the core. We then consider the Haraka V core as an abstract digest function that takes bits ( bytes) of input and produces bits ( bytes) of output. Given such a digest function, referred to as haraka, the most concise implementation of VerusHash, in any language to-date, is the following Python code for the VerusHash hash digest as follows:'\n# verus_hash\ndef verus_hash(msg):\nbuf = [] *\nlength = len(msg)\nfor i in range(, length, ):\nclen = min(, length - i)\nbuf[:] = [b for b in msg[i:i + clen]] + [] * ( - clen)\nbuf[:] = haraka(buf)\nreturn bytes(buf[:])\n#PoS Problems Solved\nVerus\u2019 staking algorithm solves the two major theoretical issues undermining other PoS systems, Nothing at Stake and Weak Subjectivity by leveraging its smart transaction capabilities to remove any incentive to attempt cheating, making it a losing proposition. Read: How Verus Solved Proof of Stake\u2019s Two Biggest Problems: Nothing at Stake and Weak Subjectivity"
      }
    ]
  },
  {
    "id": "00008300",
    "image": "00008300.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat is the decentralization process in verus coin?"
      },
      {
        "from": "gpt",
        "value": "Verus is a decentralized public blockchain, a community driven project in the true spirit of Bitcoin. Anyone can participate and contribute, no matter who you are or where you come from. Verus is:\nOpen\nBorderless\nPublic\nNeutral\nCensorship Resistant\n#Fair Launch\nVerus had a fair launch, meaning that everyone had, and still has equal opportunity to collect its currency through mining and staking. For Verus this means:\nNo ICO has been held\nNo founder or developer fees\nNo premine\nNo commercial interests\nNo rent-seeking behavior"
      }
    ]
  },
  {
    "id": "00008400",
    "image": "00008400.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nDefine currencies and blockchain for me?"
      },
      {
        "from": "gpt",
        "value": "Launch without programming needed\nEnables any user with VerusID to create their own token currency or even full fledged, multi-currency, VerusID-issuing % PoW/% PoS, % hash attack resistant blockchain that can send and receive from the Verus chain which launched it.\nAll PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, VerusID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n#DeFi liquidity pools and fractional currency baskets\nAny VerusID owner may define Verus DeFi fractional basket currencies with one or more asset currencies backing the liquidity pool at a fractional percentage ranging from % to % backing.\nThe Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protocols.\n#Bridge converter launches\nLaunch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain.\nBridge converter currencies have the same flexibility as other fractional % asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockchain, and all fees generated via cross-chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n#Crowdfunding currency and blockchain launches\nSet required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees.\nThe launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n#Interoperable, multichain network\nThe Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network.\nNotary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access.\nThere is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain network is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\nDefining a currency\nThere are many options to choose from when defining your currency or blockchain. Combine them in the options parameter for different use cases.\n# Options Details\nOPTION_FRACTIONAL Allows reserve conversion using base calculations when set\nOPTION_ID_ISSUANCE Clear is permissionless, if set, IDs may only be created by controlling ID\nOPTION_ID_STAKING All IDs on chain stake equally, rather than value-based staking\nOPTION_ID_REFERRALS If set, this chain supports referrals\nOPTION_ID_REFERRALREQUIRED If set, this chain requires referrals\nOPTION_TOKEN If set, this is a token, not a native currency\nOPTION_SINGLECURRENCY For PBaaS chains or gateways to potentially restrict to single currency\nOPTION_GATEWAY If set, this routes external currencies\nOPTION_PBAAS This is a PBaaS chain definition\nOPTION_GATEWAY_CONVERTER This means that for a specific PBaaS gateway, this is the default converter and will publish prices\nOPTION_GATEWAY_NAMECONTROLLER When not set on a gateway, top level ID and currency registration happen on launch chain\nOPTION_NFT_TOKEN Single satoshi NFT token, tokenizes control over the root ID\nNeed help setting up a currency launch? \ud83e\udd14\nGo to the Verus Discord #pbaas-development channel. The community is happy to assist!(opens new window)\n#VerusID Namespace\nTo create a currency (or blockchain) of a specific name, you need a VerusID of the same name. The controller of this VerusID is the only one who can create a currency of that name, and they can only do so once.\n#Example scenarios\nSo, let's hypothetically assume we have VerusIDs, one named gold@, one named mycoin@, and one named bob@.\nWe would like to have one currency, gold@, that we somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nWe also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, 'my', offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\n#Defining GOLD currency\nOf course, since this is a test currency, we send ourselves some to start. We could define the currency gold as follows:\n./verus -chain=VRSCTEST definecurrency '{\n'name':'gold',\n'options':,\n'currencies':['vrsctest'],\n'conversions':[.],\n'minpreconversion':[],\n'preallocations':[{'david@':.}]\n}'\nThe identity of the currency must be funded with at least VRSCTEST before sending the transaction returned from this command to initiate a currency launch that will start at blocks from when it was made (default), and that must have VRSCTEST preconverted at . VRSCTEST per GOLD in order to launch.\nAll of this happens as part of the mining process, since mining the blocks that launch a currency earn the .% conversion fees of participation in the launch, converting VRSCTEST to GOLD.\n#Converting VRSCTEST to GOLD\nWe could send the following command before the block where GOLD token launches. After it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, we could issue the command:\n./verus -chain=VRSCTEST sendcurrency '*' '[{\n'address':'bob@',\n'convertto':'gold',\n'preconvert':,\n'amount':\n}]'\nThis would effectively park our conversion until the token launches, at which point, we will either find . GOLD in our wallet, or we will have our VRSCTEST back.\nAssuming it launches, and we later want to create MYCOIN, which can be converted to with either GOLD or VRSCTEST.\n#Defining MYCOIN currency\nLet's define MYCOIN with:\n./verus -chain=VRSCTEST definecurrency '{\n'name':'mycoin',\n'options':,\n'proofprotocol':,\n'currencies':['vrsctest', 'gold'],\n'minpreconversion':[,.],\n'initialsupply':\n}'\n#Minting new MYCOIN\nIn 'mycoin', we set proofprotocol to , which is PROOF_CHAINID. That means that the controller of the mycoin@ VerusID can mint new coins as follows:\n./verus -chain=VRSCTEST sendcurrency 'mycoin@' '[{\n'address':'bob@',\n'currency':'mycoin',\n'mintnew':,\n'amount':\n}]'\nDefining a PBaaS-Blockchain\nThere are many options to choose from when defining your blockchain. Combine them in the options parameter for different use cases.\n# Options Details\nOPTION_FRACTIONAL Allows reserve conversion using base calculations when set\nOPTION_ID_ISSUANCE Clear is permissionless, if set, IDs may only be created by controlling ID\nOPTION_ID_STAKING All IDs on chain stake equally, rather than value-based staking\nOPTION_ID_REFERRALS If set, this chain supports referrals\nOPTION_ID_REFERRALREQUIRED If set, this chain requires referrals\nOPTION_TOKEN If set, this is a token, not a native currency\nOPTION_SINGLECURRENCY For PBaaS chains or gateways to potentially restrict to single currency\nOPTION_GATEWAY If set, this routes external currencies\nOPTION_PBAAS This is a PBaaS chain definition\nOPTION_GATEWAY_CONVERTER This means that for a specific PBaaS gateway, this is the default converter and will publish prices\nOPTION_GATEWAY_NAMECONTROLLER When not set on a gateway, top level ID and currency registration happen on launch chain\nOPTION_NFT_TOKEN Single satoshi NFT token, tokenizes control over the root ID\nNeed help setting up a blockchain launch? \ud83e\udd14\nGo to the Verus Discord #pbaas-development channel. The community is happy to assist!(opens new window)\n#VerusID Namespace\nTo create a blockchain of a specific name, you need a VerusID of the same name. The controller of this VerusID is the only one who can create a blockchain of that name, and they can only do so once.\n#Examples of blockchain launches\n#Blockchain\n./verus -chain=VRSCTEST definecurrency '{\n'name':'PBaaSChain',\n'options':,\n'currencies':['VRSCTEST'],\n'conversions':[],\n'eras':[\n{\n'reward':,\n'decay':,\n'halving':,\n'eraend':\n}\n],\n'notaries':[\n'Notary@',\n'Notary@',\n'Notary@'\n],\n'minnotariesconfirm':,\n'nodes':[\n{\n'networkaddress':'...:',\n'nodeidentity':'Node@'\n},\n{\n'networkaddress':'...:',\n'nodeidentity':'Node@'\n}\n],\n'gatewayconvertername':'Bridge',\n'gatewayconverterissuance':\n}'\n'{\n'currencies':['VRSCTEST','PBaaSChain','USD'],\n'initialcontributions':[.,,],\n'initialsupply':\n}'\n#Blockchain\n./verus -chain=vrsctest definecurrency '{\n'name':'v',\n'options':,\n'currencies':['vrsctest'],\n'preallocations':[\n{\n'allnotary@':\n}\n],\n'conversions':[],\n'eras':[\n{\n'reward':,\n'decay':,\n'halving':,\n'eraend':\n}\n],\n'blocktime':,\n'idregistrationfees':,\n'notaries':[\n'allnotary@',\n'allnotary@',\n'allnotary@'\n],\n'startblock':,\n'minnotariesconfirm':,\n'nodes':[\n{\n'networkaddress':'...:',\n'nodeidentity': 'allnotary@'\n},\n{\n'networkaddress':'...:',\n'nodeidentity':'allnotary@'\n},\n{\n'networkaddress':'...:',\n'nodeidentity':'allnotary@'\n}\n],\n'gatewayconvertername':'Bridge',\n'gatewayconverterissuance':\n}'\n'{\n'currencies':['VRSCTEST','v'],\n'initialcontributions':[,],\n'initialsupply':\n}'\nDefining a currency with a : mapping of an ERC-\nWhen defining a currency it can be mapped to an ERC- :. The currency on Verus and the ERC- on Ethereum are then always interchangeable to .\n\u2194\ufe0f Verus-Ethereum Bridge\nThe Verus-Ethereum bridge is the first of its kind. All tokens and currencies flowing over the bridge are never in anyone\u2019s custody, and are proven and verified by consensus rules.\n\ud83d\udc49 Access the Verus-Ethereum Bridge (opens new window)(Goerli testnet)\n#Defining the currency\nTo create a currency of a specific name, we need a VerusID of the same name. The controller of this VerusID is the only one who can create a currency of that name, and we can only do so once.\nThe cost for a VerusID on the Verus testnet is VRSCTEST (or when using a referral). The cost to launch a currency is VRSCTEST. Before launching we need to have enough VRSCTEST in the namespace VerusID.\nIn our example we have a namespace MyUSDC with which we want to launch a currency that is mapped to the Ethereum USDC ERC- (on Goerli testnet, see contract address (opens new window)).\nBelow is the command to map a currency : to an ERC- on Ethereum. The address field is the Ethereum smart contract address of the ERC- we want to map to.\n./verus -chain=VRSCTEST definecurrency '{\n'name':'MyUSDC',\n'options':,\n'systemid':'veth',\n'parent':'vrsctest',\n'launchsystemid':'vrsctest',\n'nativecurrencyid':{\n'type':,\n'address':'xDCBadccCbfBa'\n},\n'initialsupply':,\n'proofprotocol':\n}'\nAfter we put in the command, we get returned a HEX. We use this HEX to launch the currency on the network. Use the command below to launch the currency:\n./verus -chain=VRSCTEST sendrawtransaction 'HEX'\nNow we have to wait a few blocks for the currency to be available on the network.\n#Export to Ethereum\nThe last step is to export the currency to Ethereum so we can see it there too.\nExport a currency to Ethereum (as ERC-)\nA currency on Verus (testnet) can be exported to Ethereum as an ERC-. The currency can then be used in the complete Ethereum ecosystem, and on the Verus network. Sending to and from Verus and Ethereum couldn't be easier.\n\u2194\ufe0f Verus-Ethereum Bridge\nThe Verus-Ethereum bridge is the first of its kind. All tokens and currencies flowing over the bridge are never in anyone\u2019s custody, and are proven and verified by consensus rules.\n\ud83d\udc49 Access the Verus-Ethereum Bridge (opens new window)(Goerli testnet)\n#Exporting the currency\nNow, let\u2019s export a currency from Verus to Ethereum as an ERC- over the non-custodial bridge. We must have enough funds to pay for the export. The export fee is: ~ . vETH or ~ VRSCTEST\nThe command to export a currency to Ethereum as an ERC-:\n./verus -chain=VRSCTEST sendcurrency 'myVerusID@' '[{\n'address':'xADCEEFBcbCefBDEDADBE',\n'currency':'myCurrency',\n'amount':,\n'exportto':'veth',\n'exportcurrency':true,\n'feecurrency':'veth'\n}]'\nLet's break the command down.\nmyVerusID@ is the from- and change-address. The fee to pay for the export comes from here, and if you paid too much fees the rest will be returned here.\naddress is the Verus-Ethereum smart-contract bridge address. Don't change this.\ncurrency is the name of the currency you wish to export as an ERC-.\nfeecurrency is the currency the export fees are paid in. Omit this to pay the fees in VRSCTEST.\nWait for notarization\nAfter the bridge has been notarized to the blockheight where you have exported the currency, you can choose it from the token dropdown on the bridge website"
      }
    ]
  },
  {
    "id": "00008500",
    "image": "00008500.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat is the network economy?"
      },
      {
        "from": "gpt",
        "value": "Verus is a rent-free blockchain protocol that has a decentralized economy. Costs for services paid to the protocol are distributed to the miners and stakers. There are no developer fees, and no rent-seeking profiteers."
      }
    ]
  },
  {
    "id": "00008600",
    "image": "00008600.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat is the mining ecosystem of verus?"
      },
      {
        "from": "gpt",
        "value": "Verus has a naturally decentralized miner ecosystem. VerusHash . is the mining algorithm that is specifically developed for Verus. The algorithm equalizes mining fairness across hardware classes.\nTo mine Verus no specialized mining equipment is necessary. Anyone can start mining with consumer-grade hardware. Mining is made especially easy for starters, since they can start directly from within Verus Desktop, without any additional software requirements."
      }
    ]
  },
  {
    "id": "00008700",
    "image": "00008700.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat is merge mining?"
      },
      {
        "from": "gpt",
        "value": "Additionally, when PBaaS goes live on mainnet, miners can choose to mine up to PBaaS-chains simultaneously, without losing any of their original hashing power"
      }
    ]
  },
  {
    "id": "00008800",
    "image": "00008800.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat is the staking ecosystem of verus?"
      },
      {
        "from": "gpt",
        "value": "Anyone can start staking Verus, even with the smallest amount possible, e.g. . VRSC. Although it could take many years before you win a block with such a tiny amount.\nVerus has a powerful and fair staking system. No threshold required and no registrations necessary."
      }
    ]
  },
  {
    "id": "00008900",
    "image": "00008900.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat are the block rewards of verus coin?"
      },
      {
        "from": "gpt",
        "value": "Miners and stakers are rewarded for their efforts to keep the network secure. They earn block rewards. The Verus block reward emission schedule:\nBlock Height (& Start Date) Block Rewards Coin Emission\n(..) - , VRSC\n, (..) * ,, VRSC\n, (..) * ,, VRSC\n, (..) ,, VRSC\n, (..) ,, VRSC\n, (..) ,, VRSC\n,, (..) ,, VRSC\n,, (..) ,, VRSC\n,, (~..) ,, VRSC\n,, (~ ) . ,, VRSC\n,, (~ ) . , VRSC\n,, (~ ) . , VRSC\n,, (~ ) . , VRSC\n,, (~ ) . , VRSC\n,, (~ ) . , VRSC\n,, (~ ) . , VRSC\n,, (~ ) . , VRSC\n,, (~ ) . , VRSC\n,, (~ ) . , VRSC\netc. ... ...\nThe maximum circulating supply of all coins is ,, VRSC.\n* , Block Rewards \u23f2\ufe0f\nFrom block height , on, all block rewards of and VRSC were timelocked and then unlocked at random block heights. The last of those rewards were unlocked at block height ,,."
      }
    ]
  },
  {
    "id": "00009000",
    "image": "00009000.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat about block fees?"
      },
      {
        "from": "gpt",
        "value": "Fees are generated from users paying for services and interacting with the protocol. These fees are processed in the blocks and earned by miners and stakers.\nProtocol Activity Fees*\nVerusID Registration mainnet - VRSC\nPBaaS-chain Launch testnet , VRSC**\nCurrency/Token Launch testnet VRSC\nConversion Fee testnet .%\nTransaction Fee . VRSC\n* Testnet fees are subject to change. **Half the fee goes to the miners and stakers of the newly launched PBaaS-chain."
      }
    ]
  },
  {
    "id": "00009100",
    "image": "00009100.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat about pool fees?"
      },
      {
        "from": "gpt",
        "value": "All the fees generated by the protocol are collected in the fee pool. With each new block, % of the fee pool is added on top of the block rewards. It is expected that fees outnumber block rewards, making mining and staking in the Verus ecosystem a profitable and competitive endeavor."
      }
    ]
  },
  {
    "id": "00009200",
    "image": "00009200.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat is solomining?"
      },
      {
        "from": "gpt",
        "value": "Mine solo through Verus Desktop to receive full block rewards. Depending on hashrate it may take a while before winning a block. No additional software is needed to get started"
      }
    ]
  },
  {
    "id": "00009300",
    "image": "00009300.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat is pool mining?"
      },
      {
        "from": "gpt",
        "value": "Participate in pool mining to receive regular rewards. You will need to set up a few things before you can start."
      }
    ]
  },
  {
    "id": "00009400",
    "image": "00009400.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nCan i get a quick comparison of mining?"
      },
      {
        "from": "gpt",
        "value": "Solo mining Pool mining\nFull Node yes no\nRegular Rewards no yes\nSetup Difficulty easy intermediate"
      }
    ]
  },
  {
    "id": "00009500",
    "image": "00009500.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat are the suitable devices for mining?"
      },
      {
        "from": "gpt",
        "value": "Mine Verus with various devices. Profitability indication means the electricity usage vs hashrate.\nDevice Profitability Indication\nCPU (processor) high\nGPU (graphics card) medium\nMobile Phone high\nARM (not RP) high\nFPGA not possible\nASIC not possible"
      }
    ]
  },
  {
    "id": "00009600",
    "image": "00009600.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nHow do i mine using my CPU?"
      },
      {
        "from": "gpt",
        "value": "You would need a software and a pool url to mine veruscoin, Some of the softwares that you can download is NheqMiner from veruscoin github organisation, CCMiner by Monkins or SRBMiner."
      }
    ]
  },
  {
    "id": "00009700",
    "image": "00009700.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nHow do i mine using my GPU?"
      },
      {
        "from": "gpt",
        "value": "For mining with your GPU you would need CCMiner GPU miner by Monkins."
      }
    ]
  },
  {
    "id": "00009800",
    "image": "00009800.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat are the pools to mine on?"
      },
      {
        "from": "gpt",
        "value": "Pool Name Fee %\nVerus Pool (opens new window)Fees donated to the Verus foundation %\nLuckPool(opens new window) %\nZergPool(opens new window) .%\nCiscoTech(opens new window) %\nLePool(opens new window) %\nZhuaao(opens new window) %\nAlphatechIT(opens new window) .%\nWattpool(opens new window) .%\nData(opens new window) .%"
      }
    ]
  },
  {
    "id": "00009900",
    "image": "00009900.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nHow do i start mining on mobile?"
      },
      {
        "from": "gpt",
        "value": "Start mining with your phone.\nDownload VerusBox Download on Google Play Or\nVerusMiner APK Download"
      }
    ]
  },
  {
    "id": "00010000",
    "image": "00010000.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nHow do i stake my verus?"
      },
      {
        "from": "gpt",
        "value": "Staking is accessible for everyone. Use Verus holdings to secure the network. It does not matter how much $VRSC you have, there are no minimum requirements to start staking.\nOn the Verus blockchain UTXOs (unspent transaction outputs) are staking, not balances. A large UTXO has more chances of winning a block than a small UTXO."
      }
    ]
  },
  {
    "id": "00010100",
    "image": "00010100.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat are the rules of staking?"
      },
      {
        "from": "gpt",
        "value": "There are a few rules you need to know before you can start staking.\nRules\nWallet Running\nFull Node Required (native mode in Verus Desktop)\nStaking Enabled\nUTXO Eligible After Blocks\nMinimum of . VRSC in Wallet"
      }
    ]
  },
  {
    "id": "00010200",
    "image": "00010200.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat about staking pools?"
      },
      {
        "from": "gpt",
        "value": "community operated staking pools are available.\nHIGH RISK\nWhen joining staking pools, you give away custody of your coins. You don't own your coins anymore and will have to trust the pool operator. Do at your own risk."
      }
    ]
  },
  {
    "id": "00010300",
    "image": "00010300.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat is VerusCoin exactly?"
      },
      {
        "from": "gpt",
        "value": "Imagine a new world. Everything you value is safe and secure. Everything you do, see, say and hear can be verified if you choose. Everyone you meet can present a verifiable reflection of the sum of their lifetime experiences. A society where your values, votes, and voice can be immutably expressed and secured by your community. All your data is verified, private, protected, and provable in abling exchanges of self-evident truths. A society where equity of opportunity is available to all. Kindness can be exchanged without fear of fraud or humiliation. All exchanges can be certified, smart, and secure without the need to rely on costly intermediaries. Imagine a worldwide network as scalable and as accessible as today's internet. Capable of processing financial transactions and dollars, euros, Bitcoin, Ethereum, all major currencies. Even custom currencies or auto-rebalancing multi-currency baskets, defined by any organization or individual. This network is not run by any single company or government. Instead, it's a network of independent networks. All connected by a strong cryptographic protocol that ensures all funds of all currencies are accounted for flawlessly. And by doing so, enables anyone in the world to contribute to powering it while enhancing its security and take a reward for doing so. Not only can anyone participate in this network by helping it run, the network makes it easy for anyone worldwide to create new fractal subnetworks that are launched from the network. And after launch, are completely independent from, yet fully connected and interoperable with all other parts of the network. With each new community, country, company or cause that creates its own subnetwork, the network of networks does not congest. But instead, it gains the independent processing of a new subnetwork along with its additional scale and power. Imagine that all the network could be accessed and used by people, organizations, businesses and governments easily, securely, and without any complex programming. You've probably already guessed that I'm not talking about Bitcoin, which is a decentralized tour to force, but only a single currency network. I'm also not talking about any near-term evolution of Ethereum or Ethereum-like networks, which are fundamentally single currency networks as well. Yes, I did just say that Ethereum is a single currency network. That may surprise some people so let me explain. ETH is in fact the only currency that has provable accounting as part of Ethereum's blockchain protocol. It's only contracts. Code, written, copied, and or modified by many, many separate devs and companies, interacting on a simulated computer, the Ethereum virtual machine. All of which hopefully follow best practices and conventions that enable Ethereum to transact in currencies besides ETH itself. The issue is that these contracts define currencies and engage in currency transfers between users and each other without any network-wide protocol that verifies those transfers correct accounting. All contracts may also expose arbitrary functions to other contracts while operating together in what is called a touring complete virtual machine, meaning they can effectively do anything, or make any mistake that can be written into code. Defining accounting for and transacting in any currency besides ETH on the Ethereum blockchain as all similar VM-based blockchains is a matter of how multiple contracts interact, a black box operation to the protocol which cannot be verified by design. That architecture invented by Ethereum years ago and now used by countless protocols, leads to other risks as well, such as multi-step approval and spend operations of non-native currencies, which are quite complex for users and can expose them to fishing scams that request permission to take assets under the guise of performing another action. This new form of fishing attack on users of the most popular centralized NFT marketplace recently took about $ million from unsuspecting users, but total losses from contracts far exceed millions on a regular basis. Estimates of losses to hackers from these contracts not including fishing. In just the last year, range from . to over $ billion. All of that on blockchain networks running a similar VM-based architecture as Ethereum. Perhaps it's time for a better design. Imagine a multi-blockchain network with a real multi-currency protocol that verifies all transactions in all currencies as securely as Bitcoin and Ethereum verify transactions that transfer BTC or ETH. The good news is that now you can do more than just imagine. The system I've described is fully functional today on the various test net and being prepared by contributors across the community now for its imminent main net upgrade. All technologies are currently available for application development by those early adopters who understand the opportunities in leveraging a new disruptive paradigm. It's still officially a test net, but is fully decentralized, functional, and accessible worldwide for launching test currencies, independent and connected blockchains, on-chain exchanges of currencies, and contracts, and more. Various itself is not a new cryptocurrency. In fact, it's an independent blockchain launched May , , with no ICO, no pre-allocation of funds, and no development fee or rent built into the protocol whatsoever. Various is complete with both transparent and zero-knowledge privacy protocols, and in ecologically efficient, provably % hashtag resistant consensus protocol. It's an evolution of knock-a-modo consensus that incorporates proof of stake as well, and the only blockchain with self-sauvrent, revocable, recoverable, and interoperable addresses, and identities built into the core protocol. Various identities are supported across all transaction types, compatible with other provable ID technologies, and serve as a foundation for all currencies and blockchains on the network. Applications of the Various Network extend far beyond D-Apps of blockchain today. Any individual, project, organization, or community, needing an easy-to-use, reliable, decentralized, rent-free currency, fundraising platform, voting network, automated accounting system, or self-sauvrent, revocable, recoverable identities, and a governance model can connect to the Various Internet of Value and get started with no programming required. Solutions that used to take weeks or longer to design and code with solidity experts can now be done better, faster, and more securely, no programming needed. With Various's multi-chain model, scale challenges of today can be naturally solved by scaling out as needed, whether requirements call for centralized corporate, open-government, or fully-decentralized applications. In addition to this new technology, disruptive even among modern blockchains, the open community-driven genesis and approach enables Various to be the first, and only rent-free, decentralized financial network capable of hosting multiple independent, yet connected real-world economies. With thousands of connected blockchains, millions of fungible currencies, and billions of users. Various is an open protocol, implemented in fully open source, designed to connect, interoperate with and serve as either independent or augmenting infrastructure for existing, or completely new, and more scalable, provable, fair, and trustworthy systems than what we have anywhere today. You can download the free and open-source Various Wallet from Various.io. Connect to the public test net, drop by the Discord for some free test currencies, and get started. Without any actual programming, just commands, you will be able to create revocable recoverable identities that you can then use to launch currencies, blockchains, liquidity baskets, automatically bridged ERCEAR, Ethereum currencies, and multi-chain applications using all currencies available on Various or Ethereum."
      }
    ]
  },
  {
    "id": "00010400",
    "image": "00010400.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat is UTXOs in veruscoin?"
      },
      {
        "from": "gpt",
        "value": "Unspend transaction output, or in short, UTXR. Let's visualize a part of a blockchain. We fill three of them up and leave a fourth new block empty for some new transactions. This is Alex. Alex has a various wallet and has received various coins so far, in four separate amounts. Now, these four separate amounts is essentially what UTXR is all about. Let's use two balls to explain. The first one shows the total amount of coins in your wallet, pictured is water in the bowl. The second one shows four water capsules in their bowl, each holding their own amount. They don't mix in the second bowl. Now let's have a look with that means. Meet Mary, a friend of Alex. She recently created a various wallet, but does not have any coin share. So Alex wants to send Mary of his coins to get her started. The various wallet will try to use the smallest UTXR values first in order to fill a desired coin transaction size, which in this case means it needs all four UTXRs to get to . When Alex sends the transaction, all four UTXRs will be spent and turns them into STXRs, spent transaction outputs. This is just a background process required and you will never see it. Next, two new transactions are created on the blockchain, for two new UTXRs, one for the various going to Mary, and one for sending the change of the transaction back to Alex. The transactions will go into the latest block in the blockchain so they can be confirmed by all the notes. I will explain how that all works in another animation. So all that is left to do is to send the various coins to Mary's wallet and send the change of the transaction back to Alex's wallet, and this of course is all done automatically."
      }
    ]
  },
  {
    "id": "00010500",
    "image": "00010500.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat is the near future of veruscoin going to be?"
      },
      {
        "from": "gpt",
        "value": "Verus is a community project that was fair launched May , . No ICO was held, no coins were pre-mined, and there are no founder or developer fees. Varus' history comes by way of Bitcoin, Zikaash and Komodo, building some of the foundations of blockchain, privacy, the lead proof of work and smart transactions. Varus' consensus algorithm is called proof of power. Proof of power is a split of % proof of stake and % proof of work using Varus' hash, which is optimized for CPU mining, giving everyone a fighting chance on a level playing field. Varus' proof of power is verifiably % hash attack resistant. Varus' ID is the first self-sovereign decentralized identity system of its kind. Firstly, it takes your standard long and impossible to remember address and allows you to create a friendly name, such as John Smith, that you can use to send and receive funds. Your name can include almost all Unicode characters, including emoji. If you ever lose access to your private keys or they become compromised, another ID can be used to securely revoke and recover your name and the fund stored on it. Along with these great features of Varus' ID, you can use the ID to create verifiable digital signatures, decentralized attestations, send and receive private messages, and more. Varus' vault gives users the ability to have a custom defined time lock of their assets that they can still stake with or revoke and recover if needed. Another great feature of Varus is the public block chain as a service, or PVAS, giving anyone the ability to launch tokens or full-interoperable block chains with no programming needed. You can set the price for identities on your chain as well as coin supply and emission, and it comes with all of the features that Varus offers, making it easy for anyone to start a project on the Varus platform, or to start their own block chain with a few clicks of a button. Half of the fee for block chain creation goes into the fee pool to be paid to miners and stakeers over time, and the other half goes into the fee pool of the newly created block chain. An exciting feature of PVAS creation is the ability to do crowdfunding launches, where you can set a minimum collection for that currency to launch. Offer pre-launch participation discounts, pre-conversion currency carve-outs, or price-neutral launch pre-allocations, all with the ability to automatically refund if the fund raise in conditions are not met. PVAS chains are fully interoperable, with cross-chain spends and currency conversions, Varus and PVAS chains can also be merged mine together, up to chains at once with all your hash power securing every chain. This helps small projects get hash power to secure the network for a lower cost. The first bridge is a decentralized bridge to Ethereum for th and ERC tokens, with other cross-platform capabilities in the future. This opens up the Varus ecosystem to value from other block chains, makes tokens and coins from the Varus network available on other platforms, and allows the storing of assets from other chains in a various vault protected Varus ID. The benefits of having layer defy on a UTXO blockchain is the ability to have consensus and reward models that are aligned with the economic activity happening on the chain. Varus uses a parallel processing model that solves all defy transactions in a block at the same time, and with the same pricing for all trade volumes and directions in that block. This, combined with the feeple, provides minor extracted value resistance, increased security, and conversion pricing that is fair and more stable than other systems. Find out more at Varus.io."
      }
    ]
  },
  {
    "id": "00010600",
    "image": "00010600.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat is verus platform?"
      },
      {
        "from": "gpt",
        "value": "Our internet and economies have become globally centralized. Our data, bought and sold to the highest bidder. Media platform sensored in the technology engineer to funnel and extract value and commodifying control our behavior. With the emergency blockchain technology, we have a chance to develop new systems in engineer than for more sovereignty, privacy, and freedom. But many blockchain projects fall prey to the same patterns of centralization. Built in silos, they lack scalability and few teams build bridges to work between them. Now, with this understanding, we have a better way forward. The next evolution in decentralized tech is here. Varus is a truly free, open-source blockchain protocol designed for privacy, safety, open participation, and unlimited scalability. Varus is not a business or bank. To ensure integrity and impartiality, the secure public network is supported by a worldwide community of contributors, including a nonprofit foundation. Varus combines the latest in cryptography and zero-knowledge privacy to enable its vision of public blockchains as a service. Decentralized financial and communications tech that can scale to a new internet of value and data exchange. With Varus, any individual or organization can create recoverable self-sauver identities, own their data and build and run apps and business software on any PC or mobile platform. In coming soon on Varus, individuals and organizations can tokenize assets and create currencies, create a shared economy by tokenizing a house for example, or bootstrapping crowd-funded project with fully liquid algorithmic conversion across multiple blockchains and crypto currencies. Individuals and communities can create their own micro economies and connect to a worldwide network about their public blockchains, organizations, and economies, and they don't have to pay anyone to do these things or give away their rights to their data. Now is the time to build. These are the tools we need to do that. Build with us. Varus. Truth and privacy for all. Learn more and join the conversation on Discord."
      }
    ]
  },
  {
    "id": "00010700",
    "image": "00010700.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat are the abstracts of verus coin?"
      },
      {
        "from": "gpt",
        "value": "The Verus Project aims to establish a secure, privacy-centric, fairly-distributed cryptocurrency. But \u2013 beyond this currency \u2013 Verus seeks to become much more than a zero-knowledge privacy coin, one with two completely new highly-decentralizing proof of work and proof of stake algorithms.\nIn addition to payments, decentralization, and privacy features, Verus Project\nplans include its direct use as a currency for provisioning scalable and secure public blockchains as a service (PBaaS), for Verus applications built upon these parallel\nchains to scale. What this will do is simple: It will enable all people \u2013 as well as\nall nodes on the Verus network to participate in and benefit from a decentralized,\nblockchain service economy.\nThis paper details the Verus vision and describes the function of Verus as its own\nplatform, and also as a member of the Komodo platform ecosystem, in the context of its\nfirst applications. Verus core applications will provide a foundation to build additional\napplications and services, which will leverage Verus\u2019 automatically created blockchains,\ncalled autochains. Autochains \u2013 or PBaaS \u2013 will be provisioned and notarized by the\nVerus blockchain miners and stakers, in exchange for Verus currency.\nAutochains will be validated through proof-of-stake by their user populations. In\naddition to extremely scalable, dynamic, publicly-secured autochain applications, this\nwill add a dynamic isolation and security component to applications that can also\ncreate, manage, and verify transactions on the main Verus chain or any other Komodocompatible, Crypto-Conditions [17], Interledger Protocol [25] enabled blockchains.\nThe ways we apply this technology to our world \u2013 to our biggest contemporary\nchallenges \u2013 has the potential to completely remake the fabric of our society."
      }
    ]
  },
  {
    "id": "00010800",
    "image": "00010800.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nCan you tell me about the preface of the coin?"
      },
      {
        "from": "gpt",
        "value": "Sure! Human progress leapt forward with the invention of money. Money enabled worldwide,\ntrade-based economies to move from a primitive, barter-based system to a consensus-based\nvaluation and accounting of verifiable, storable, divisible, and scarce commodities as early\ncurrencies of exchange.\nEven in recent times, actual or perceived scarcity and authenticity of source, whether\ngenuine gold, an original giant coin of Micronesia [27] \u2013 or government backed notes with\ntrusted fiscal management and the ability to exchange for oil \u2013 provide the foundation of\nvalue upon which, ultimately, human resources are bought and sold.\nWhat blockchain does is straightforward. It enables the creation of cryptographic tools\nand applications that do nothing less than provide us with a new future of programmable\nmoney. This programmable money integrates directly with existent accounting functions\nand, eventually, with all automated services. Blockchain technologies provide humans with\na new, verifiable solution to ensure scarcity, authenticity of source, inbuilt transferability,\nfungibility through privacy, and programmable rules. More than that, fully peer to peer,\npublic blockchains disintermediate and provide tools that offer the opportunity to revitalize our economic systems and societies, potentially creating a more equitable and honest\neconomic framework for all."
      }
    ]
  },
  {
    "id": "00010900",
    "image": "00010900.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nCan you tell me about the introduction of the coin?"
      },
      {
        "from": "gpt",
        "value": "Yes! Information vies for our attention in today\u2019s digital world, trying to convince us of what\nproduct to use or which politician to believe. We are watched and measured as we react to\nthat information, in order to convince us what to buy or to believe. This is an active process\nthat exploits our lack of online privacy \u2013 combined with weaknesses in human psychology \u2013\nin order to make profit; extracting value from, even affecting our behavior, learning about\nand influencing each of us individually to open our wallets or add our voices to another\u2019s\nagenda.\nNo single person can digest and fully understand \u2013 let alone verify \u2013 a fraction of the\ninformation thrust at us in daily life. We are told to give up on the notion of privacy and to\ntrust networks of companies with our most private data, our identity, our credit histories, our\nlocation, our habits. We are also told that our voices are lost in the digital sea of information.\nYet how is this the same sea through which we are laser-targeted based on correlating our\nbehaviors to learn so much about us, individually? What if these technologies could be\nturned towards the benefit of society, first \u2013 and then allowed to support businesses, in that context? We on the Verus team believe it is possible to support businesses and governments requirements with digital systems that: 1) respect your privacy, 2) give you control over your data, and 3) enable you to speak your mind with the anonymous authority of an authorized voter or member of a community, in a way that can directly be heard and affect actual change."
      }
    ]
  },
  {
    "id": "00011000",
    "image": "00011000.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat beliefs underpin everything you build into the Verus network?"
      },
      {
        "from": "gpt",
        "value": "With Verus, we will introduce digital tools to enable us all to build a better world together. We will monetarily incentivize – with our technologies – behavior that strengthens communities and institutions. This is the thing that’s missing in the online world today: Fiscal incentive for communal behavior built into the very fabric of its function. The Verus Project’s tools will make it easy to create an identity – or multiple identities – on the Verus multi-blockchain system, which can accumulate value and even have multiple personas, each to represent a facet of your identity as a whole. This reflects how we might express identity in our personal or professional lives, where some situations call for provable credibility, yet others require no more information than what you might reveal when encountering a casual stranger."
      }
    ]
  },
  {
    "id": "00011100",
    "image": "00011100.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat are the vision for verus foundation applications?"
      },
      {
        "from": "gpt",
        "value": "Throughout history, understanding what a population truly thinks or feels has been an\ninvaluable capability. The manipulation of that understanding can, and has, repeatedly\nchanged the course of history.\nThe Verus Project plans to use highly decentralized blockchain technology to enable all\npeople to safely, anonymously, and confidently express their opinions \u2013 on any issue. Verus\nusers will be able to share their knowledge in a public forum, query a population of humans\n(or eventually both AIs and humans), quickly and effectively, and \u2013 importantly \u2013 earn\ncryptocurrency in exchange for these contributions to collective knowledge.\nA primary goal of the Verus Project is to enable societies and organizations to make\ndecisions based on a more honest understanding of the public\u2019s actual beliefs. To achieve\nthis goal, we consider the need for both confidentiality and transparency, to ensure that \u2013 first\nand foremost \u2013 the system can be trusted. It is also critical to prioritize decentralization and\ndevelop a core platform that can leverage fully transparent blockchain technologies, while\nrunning many applications that respect privacy. With Verus, these applications can leverage\nzero-knowledge succinct non-interactive arguments of knowledge \u2013 or zk-SNARKs \u2013 the most\nreliable and tested iteration of proven, zero-knowledge privacy technology available today.\nOur novel approach ensures that this technology can be used at scale, across any population size, throughout the world. Using the tested-at-scale infrastructure and tools of the\nKomodo platform, and Verus planned development of PBaaS \u2013 the Verus developers will\nbuild human organizational tools, including voting and fully self-sovereign identity with a\nreputation system that respects privacy. The goal, here, is a significant one, and these tools\nare planned in a way to allow entire human populations to transparently and directly share\ntheir knowledge and opinions \u2013 without the risk of privacy violation, spin or censorship.\nVerus tools will also leverage human (and eventually non-human) intelligence at scale\nto solve previously challenging problems in a decentralized manner \u2013 financially rewarding\nthose who contribute to their proper function.\nTo serve all people in the world simultaneously with these public, peer-to-peer tools,\nVerus introduces autochains. Autochains are a novel scaling model for blockchain systems.\nAutochains will enable full node miners to provide public blockchain provisioning services.\nThese services will occur in transient, parallel chains, chains that are isolated from congestion,\ndisruption, or interference from the main Verus blockchain. As an autochain operates, it is\nalmost completely parallel and isolated from the main Verus chain, except for the capability\nof posting transactions and proofs to Verus, for results and coordination across applications\nor people.\nBy combining privacy, polls at scale, and identity, Verus can be used to post polls and\nask almost any question of a population or subpopulation of people, receive an honest \u2013 and,\nimportantly \u2013 verifiable answer, and still respect the privacy of the respondents. When even\nthe first support for polling is active on the Verus network, the Verus community will be\nable to vote on the long term direction of the Verus Project, itself.\nOver time, Verus polls \u2013 used for purposes such as determining the accuracy of news\nonline, for research, or even for political polling, will be combined with machine learning\nto enable all of us, as a society, to benefit directly from our collective intelligence without\ntoday\u2019s risks to our individual privacy. Verus will combine auditability and verifiability of\ntransactions with the option of verified, confidential participation \u2013 meaning societies and\norganizations can directly understand what people think, feel, and believe, as populations \u2013\nwithout taking control of their personal data or targeting some individuals, based on their\nanswers or beliefs.\nUltimately, our vision for the Verus Project is to enable us all to directly participate\nin our own worldwide economy. Verus applications will enable any individual to speak up\nwith the power of an authorized participant \u2013 and with the confidence of anonymity \u2013 to\nproduce a verifiable, transparent, and honest flow of information throughout the globe. It\nwill transform the way that anonymity functions in our current technological environment \u2013\nprioritizing cooperation and providing the financial incentive for that cooperation to occur."
      }
    ]
  },
  {
    "id": "00011200",
    "image": "00011200.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\ncan you give me some importance regarding verus coin?"
      },
      {
        "from": "gpt",
        "value": "The longer term Verus Project vision of a better society through public blockchain services\nrelies upon three fundamental pillars \u2013where the correct operation of each strengthens the\nothers in the form of a virtuous circle.\nThese pillars are:\n1. Extreme transaction throughput and scalable decentralized applications with autochains,\nwhich provide public blockchains as a service (PBaaS)\n2. Selectively strong, private identity, and\n3. Open application support with a foundation of polls, voting, and lottery selection\nservices.\nEach of these pillars will help us process human knowledge, understanding, and/or opinion on any content or topic. Together, they will enable direct querying \u2013 with confidential\nand truthful \u2013 answers across an entire population. It will create a secure, public platform\nthat respects privacy, and can potentially serve as the foundation of a more respectful society.\nIt is also important to know about the the concept of Verus Virtue when reading further\nin this document. The best way to think about Virtue for the purposes of this document\nis as a separate currency that can be earned, but not purchased or sold, and is part of the evolution of the Verus proof-of-stake algorithm, slated for later phases of the Verus project.\nProof of Virtue is a technology that will be described in much greater detail and implemented\nin later phases of the Verus project.\n3.1 Autochains\nWith Verus, we plan to create a platform upon which we will build voting and even election\nsystems that support our vision of enabling a better society through blockchain.\nTo run simultaneous polls across disparate populations on one blockchain-based system,\nwe need another dimension of information \u2013 one that retains privacy, and is anchored to a\nprimary store of value, Verus.\nOne approach to creating another dimension of meaning would be a system of \u201ccoloring.\u201d\nThe Ethereum blockchain system and some layers over Bitcoin or Bitcoin compatible coins\nuse a version of a coloring system. [5][6][7][8]. While, at first glance, this seems like a\nreasonable approach, it is actually a suboptimal solution, at best.\nWith Ethereum and the ICO experiences of 2017 [9][10], we now know what happens when\nyou create one blockchain and overload it with transactions: Congestion and unnecessarily\nhigh fees. Developers have proposed many solutions to this problem of scaling \u2013 including\na move to proof-of-stake systems and sharding (effectively trying to separate the various\nfunctions on a blockchain), or even a move to large systems of parallel chains with a common\ndesign.\nYet instead of implementing a \u201csolution\u201d with colored coins sharing one blockchain, we\nhave decided to take a completely new approach to this problem. Our approach will not\nonly provide an extra dimension of information and an unlimited number of token types,\nor \u201ccolors\u201d, but it will do so with highly scalable PBaaS autochains, which also reward\nVerus miners and node operators as provisioning agents. This is a novel method of scaling,\none which provides significant scale and security benefits through isolation of transaction\nprocessing for each application instance on its own blockchain.\nRather than thinking of Verus as a single blockchain, it is more appropriate\nto think of it as a blockchain-based system, one that is rooted in a primary value\nchain.\nAutochains are exactly what they sound like \u2013 automatically instantiated blockchains\nthat are validated initially \u2013 and when notarizing \u2013 by Verus miners, and otherwise, only by\ntheir users, often a disjoin set from the whole of Verus users. Autochains, once instantiated,\ncan be used indefinitely or can have a finite lifetime to be used for a specific purpose. In\nthis document, we will often discuss autochains in the context of a few concrete applications\nthat we intend to implement on the Verus network. It is important to keep in mind that\ntheir versatility is basically unlimited. Due to their security being inherited from the main\nVerus chain, autochains eliminate perhaps the biggest disadvantage that creating consensusbased distributed ledger applications suffers from: Weak defense against attacks in their\nearliest stages.\nIn Phase II, Verus will define an autochain provisioning protocol, and specific voting\nprotocols, based on blockchain transactions. These protocols will include zero knowledge\nproofs, Crypto Conditions [17], and Interledger Protocol [25] technologies to provide proper\nincentive for all participants to engage in the automatic creation and use of on-demand,\nisolated or public blockchains, ones that rest on a secure, public foundation.\nThe autochain protocol will also provide the ability to place a value on the data generated\nby the autochain\u2019s operation. This value will then either be released to the public or paid\nout, through rewards, to the participants in the creation of that data. This creates a model\nthat incentivizes release of learning and information to the public \u2013 also making applications\nwhich do so much less expensive to run.\nFor Verus poll applications, validation will default to a form of proof-of-stake (PoS),\nwhere all members of the chain are stakers. This is because that security model matches\nexactly the interests of the majority of voters in having an accurate record. Because PoS does\nnot involve powerful mining equipment or competition to solve a cryptographic puzzle, it can\noperate on much less powerful hardware\u2013 even on mobile devices. Since voters, themselves,\nsecure the chain simply by running the voting software, poll chains are generally not affected\nby activity on the main Verus chain (except when posting interledger transactions). In\naddition, an autochain\u2019s operation, independent of scale, adds no overhead or congestion to\nthe main Verus chain\u2019s transaction load \u2013 besides the transactions to provision the poll chain\nand post results back to the main chain itself.\nSince we want to be able to create autochains from clients that may not be running full\nnodes or even own stable IP addresses, full nodes will be incentivized to provide reliable\nstatic node support for autochains. Once they provide this support, they will be recognized by validators on the autochain. They will then be able to use this recognition to boost their\nreputation for selection in future lotteries.\nBy advertising autochain node support on the main blockchain \u2013 along with a stable\npayment address via a transaction \u2013 the node IP can be selected in a random lottery. The\nEigentrust ratings of all nodes can then be recorded by all other nodes that serve the chain\nat regular intervals. Nodes which consistently offer better QoS will get better ratings. Nodes\nthat get poorly rated will still share in the node rewards for the current blockchain \u2013 but\nwill be less likely to be selected in the next node lottery.\n3.2 The Virtue Autochain\n3.2.1 Roots of Trust in Distributed Consensus\nThe Bitcoin [14] proof of work implementation introduced the world to systems that establish\ntrust, not due to belief in any individual human\u2019s behavior, but based on the tendency of\nhumans to act in their own self-interest.\nThe Bitcoin protocol rewards winners of a contest, referred to as \u201cminers\u201d, in statistical\nproportion to the computing power they employ to \u201cmine\u201d for Bitcoin, as compared to the\ntotal computing power of all miners. For every block of validated transactions added to\nthe Bitcoin blockchain, someone wins a competition to earn the right to define that block\nwhile adhering to specific, verifiable rules. The competition involves verifiably solving a\nstatistical mathematical puzzle that is specific to exactly that block, meaning the same work\ncannot be reused on any other block. The winner of each competition earns the right to\naccurately process the next block of pending Bitcoin transactions and to claim a specific\nmeasure of Bitcoin, called the \u201cblock reward\u201d (plus fees of all transactions in the block that\nwas processed).\nMining competition serves to determine the amount of computing power a would-be\nattacker would have to control in order to mine of blocks that were not earned according to\nthe intended rules, execute transactions that might otherwise be rejected, and prevent certain\ntransactions from executing altogether. Based on the way that miners achieve consensus\non what is the correct chain, forging a false Bitcoin chain to achieve this would require\nan attacker to control more than 50% of the total power of all miners \u2013 both honest and\nbyzantine.\nSince, right now, it is likely infeasible for any single actor to mount such an attack against\nBitcoin, the largest network of hash power today, this type of competition, called proof-ofwork (PoW), currently manages hundreds of billions of dollars of value, sends transactions of\nthat value to anyone, anywhere, at any time, and does this all without any company, bank,\nor trusted third party, of any kind.\nIn addition to enabling secure management of large sums of money, PoW has also sparked\na mining arms race and significant investment in computing power to claim Bitcoins and other\ncryptocurrencies, creating the equivalent of the world\u2019s largest distributed supercomputer\ndoing nothing but the same calculations, albeit on different data, over and over again. As\na result, one side effect of the public blockchains\u2019 PoW security system is massive power\nconsumption and significant ecological cost.\nDue to this, a great deal of research and development has gone into alternative consensus\nmechanisms [11][12][13]. Most serious PoW alternatives center around the concept of proofof-stake (PoS) \u2013 the idea, that by putting something at stake commensurate with the value\nbeing transacted in the transaction flow, a rational staking person, known as a \u201cvalidator,\u201d\nwill choose good behavior within the ecosystem, so as not to lose their \u201cstake.\u201d\nEven though large systems are being built that depend on 100% PoS, there remains\ncontroversy over its robustness when users have incompatible interests, or when an attacker\u2019s\nstake is not valued as highly as the perceived value to be gained by corrupting the system.\nMost modern PoS and PoW systems make a fundamental assumption about all miners; that they are either \u2018byzantine\u2019, and intend to compromise the system as a whole, or\n\u2018rational\u2019, in statistically the same proportions for all participants equally. One need only\nconsider that if there was a way to learn a more accurate statistical function for each participant\u2019s probability of being either byzantine or rational, using such a function to determine\nwho participates in the system\u2019s validation would improve its resistance to attack.\nIn fact, any accurate method of recognizing those who were attempting to strengthen\nthe system \u2013 and thus who could statistically be more trusted than a byzantine or even\naverage participant \u2013 could both decrease the power consumption and ecological cost of\nblockchain security and further strengthen resistance to attack. This then brings up the\nquestion: \u201cHow do we recognize trustworthy participants?\u201d\nSome methods studied and proven effective are the Eigentrust reputation management\nalgorithm [20], and its improved derivative the Eigentrust++ mechanism implemented in the\nNEM blockchain [22]. Originally designed by Sep Kamvar, Mario Glosser and Hector GarciaMolina in 2003, the Eigentrust algorithm is built to function on peer-to-peer networks. It\naims to isolate byzantine actors in said networks by assigning each peer a public, global trust\nvalue based on their history of activity \u2013 clearly displaying a form of \u201crating\u201d for each peer.\nThose with lower ratings are shown not to be trustworthy, and thus, are interacted with less\nby their peers.\nSimply put, the algorithm assumes that if any given peer a trusts any given peer b,\nthen it would also trust the peers trusted by b. Every peer calculates a local trust value\nfor each other peer it has interacted with, based on the either satisfactory or unsatisfactory\ntransactions it has had with each one. These local trust values are determined by each peer,\nand when peer a wants to know if they should trust peer b, say, before making a transaction,\npeer a would ask all other peers it knows to report on their local trust values of peer b and\nweigh their responses according to the trust values peer a has for each of them.\n3.2.2 Proof of Virtue (PoV) Reward System\nUsing a model similar to the EigenTrust algorithm, Verus will introduce the idea of Proof of\nVirtue (PoV) enhancement to the PoS algorithm initially released in Phase I. In PoV, we\nintend to weight staking contests with both Verus stake and \u201cVirtue\u201d, a special \u201ccurrency\u201d,\nexpected to be tracked on a Virtue autochain, and used as a trust rating of identities within\nthe network.\nIn a similar way to the \u201camount of stake\u201d used when staking, Virtue will add another\ncomponent to the probability of being selected to process a block of transactions on the\nVerus Network. Its probabilities upon introduction will not change returns on the Verus PoS\nsystem, but addresses will gradually be able to improve earnings with a Virtue weighting \u2013\nbased on recorded activity and behavior.\nIn order to ensure that Virtue is both a rare and valued property, which drives correct\nbehavior, it will neither be purchased, nor sold. Verus holders will have opportunities to\nearn a small measure of Virtue, which can then be further increased by staking the Virtue\nitself, when attesting to a fact for the network, validating information, or providing another\nmeasurable benefit to the network.\nSince Virtue will have intrinsic value on the Verus network, there will be methods for\ntransferring it through wallet ownership \u2013 for cases of probate or other necessity \u2013 but such\nbehavior as a tool for trading in virtue will not provide a secure or intended method of\nexchange.\nThe Proof of Virtue model will effectively be a modified form of PoS that is not based\njust on monetary value, but also on long term measurement of contribution, which will affect\ntrustworthiness and earning power in the Verus network. The intent is to provide opportunities for more people to participate in the growth of a positive functioning network and\nto prevent potential attackers from being able to easily buy their way into an attack, adding\nyet another layer of security.\nWe expect to keep the PoW component as part of Verus security system for an indefinite\nperiod of time. We also expect to leverage the dPoW security of Komodo and its notarization\ninto the Bitcoin blockchain as well.\n3.3 Polls, Voting, and Elections\n3.3.1 The Importance of Secure Polling\nA great deal of research has delved into the best way to achieve confidential, verifiable, and\ntransparent (CVT) elections electronically \u2013 with a few notable systems actually used in\nreal life situations. These attempts, however, have been plagued with significant limitations,\nlimitations that almost always risked either revealing the identity of a voter and thus eliminating confidentiality, or allowing attackers to impersonate legitimate voters, and put the\nvalidity of the vote into question [1].\nThis was shown in one of the first majorly adopted North American electronic voting\nsystems, the Diebold AccuVote TS, which was announced in the year 2000 [4], at a time\nwhen, as a result of the Florida 2000 presidential election, the general public began to\nrecognize numerous flaws in the widely-used punch card voting system [2]. Despite multiple\nstudies discussing electronic voting systems \u2013 studies which clearly warned of security risks\nsuch as insider threats, issues with auditing, and network vulnerabilities \u2013 by 2004, the\nAccuvote TS system was deployed for major political elections in 37 US states [2], resulting\nin multiple serious problems that impact the legitimacy of numerous election results since,\ndue to inherent flaws in its design that were never fully addressed [3].\nFirstly, the \u201csolution\u201d that the system introduced to deal with voters submitting multiple ballots \u2013 and to solve the ballot anonymity problem \u2013 was to issue a single personal\nvoting \u2018smartcard\u2019 to each vote. This smartcard, unfortunately, did not contain a complete\nidentity, but instead contained a common election key among voters that voting machines\nsimply checked to determine if the card belonged in the correct election [2]. The lack of\nany cryptographic unique identification on these cards was a significant security flaw, as\nuser-programmable smart cards and readers almost instantly became commercially available\non the internet for reasonable prices \u2013 making it extremely easy to mass produce homemade\ncopies. Furthermore, due to the lack of a truly secure boot loader, operating system, or application, the system had numerous potential attack vectors, many of which were quite simple\nfor an adversary. For example, any attacker with access to the operating system had the\nability to modify ballot program files through the standard Windows Explorer application\nalready included on each machine.\nThese serious failures in previously adopted electronic voting systems have literally\nchanged the course of history, affecting the outcomes of major political elections that\ndecide the state of world politics. This highlights the importance of creating a system that\nis truly confidential, verifiable and transparent, and indicates the magnitude of one problem\nwe plan to solve with Verus.\n3.3.2 Running, Recording, and Scaling Polls - Transient, PoS Chains\nUsing autochains, Verus will dynamically create parallel voting chains on demand for each\npoll in its ecosystem. This creates improved, isolated security and allows for scaling in a\nvirtually unlimited manner.\nThe Verus wallet, which will be used for voting, will also have the ability to validate blocks\nthrough proof-of-stake, blocks which, when enabled, will allow voters who are validating the\nelection to earn rewards. These rewards will either be paid in Virtue for intrinsic polls, when\navailable, or from outputs of the payment transaction that instantiated the poll. When a\npoll is complete, results are posted back to the main Verus chain. The chain used to run it\ncan then be archived or deleted, and it is typically abandoned.\n3.3.3 Poll Content and Distributed Hash Tables\nWhile blockchains make excellent databases for permanent, non-repudiable records and public key management, they are not the best solution for storing large amounts of data, due\nto their massive duplication across the distributed network. Instead, a better model for distributed storage would look something like the Interplanetary File System, or IPFS, which\nis a peer-to-peer file system based on the Kademlia [18]19 protocol in an implementation\nthat currently works well enough to use as storage for create/read/delete operations using\nhash commitments on the Verus blockchain to represent and index content.\nWhile we are evaluating the IPFS, we are also looking at other distributed hash table\nsolutions, such as Open DHT [26]. A key requirement for the Verus network is that mobile\ndevices be able to participate in its operation. Open DHT is an efficient C++ library intended\nfor use with small devices. IPFS does not yet seem to have much support for mobile at this\ntime, though it does have a Javascript library that can be used from the browser or mobile\napcancations [24].\nUntil IPFS is supplanted with another implementation, Verus applications will assume\nthat when off-chain content is needed, it should be retrieved from IPFS, and for future\ncompatibility, we will add a storage and version specifier. In order to store supporting poll\nor other content for dApps, the content owner must ensure that the content is pinned in\nIPFS, until it is no longer needed. By Phase IV, or earlier if there is significant demand,\nwe expect to either support or provide a blockchain-metered storage solution that is more\nintegrated and automatic to use for poll makers. Two options for such a system include\na cross-blockchain integration with a decentralized payment/pinning solution, or to offer\na simple service that charges in Verus to store and automatically pin content for specific\nlengths of time in IPFS.\n3.3.4 Voting Models and Types of Polls\nVerus will support numerous types of polls, those that use weighted or unweighted voting,\nthat seek to expose truth or opinions, and polls that rate and choose collectively. In order to\n13\ncreate a sensible taxonomy for polls, one that people will understand, we define the following\ntypes of voting:\n1. Multiple choice\n2. Weighted multiple choice\n3. Ranking\n4. Rating\nWe also define the following types of polls:\n1. Polls to classify\n2. Polls to select\n3. Polls to rank\n4. Polls to rate\nWe do not expect Verus to support all voting and poll types in the early phases. In fact,\nuntil Phase IV, the Verus core team plans to focus on known requirements of multiple choice\nand weighted multiple choice voting. During or after completion of Phase IV, expanding\nsupport for voting and poll types will be higher priority.\nEach type of Verus poll may support confidential or public voting, live or delayed poll\nresults, online or offline vote authorization, and lottery selected vote authorization. We will\nroll out working vote models in phases, as well, initially providing solutions for weighted and\nunweighted selection voting, which fits well for both political and opinion polls as well as\ncontent classification and ID verification.\n3.3.5 Intrinsic Polls\nOnce Virtue is activated, the Verus network itself will run specific, intrinsic polls that will\nbe regularly available to identities with Virtue, based on a statistical lottery and weighted\nby their actual measure of Virtue. Participating in these polls, which will be used to classify\ncontent and perform basic, human verification functions, enables participants to help the\nsystem classify and rate content across Verus applications, enabling a rating system rather\nthan censorship to allow each voter to set preferences for the ratings of polls they may wish\nto see.\nMiners who provision autochains for these intrinsic polls will get the same rewards as\nminers setting up autochains for commissioned polls. The content for these polls will be taken\nfrom other polls and will be used to classify and rate those polls for easier discoverability\nand the user experience of poll services.\n3.3.6 Privacy\nThere is a fair amount of confusion among the public about privacy on the blockchain. One\ncommon belief is that Bitcoin transactions are private, when in fact all Bitcoin transactions,\nas well as the public addresses between which value is transferred, are public information [21].\nAs with the Verus token and its blockchain, poll autochains will also support zk-SNARKs\nto ensure that votes which have not been disclosed by a voter remain provably anonymous\nto all other parties, while still being verifiable by the person who holds the keys to the\naddress that cast them. Currently, based on standard smartphone hardware specifications\nand the memory requirements of zk-SNARK transactions, mobile phones cannot generate\nz-transactions. In coming releases of new Zcash technology this year, the z-transactions will\nbe more efficient and still provide the same privacy guarantees. When these technologies\nare available, we will work to support them on the Verus chain, as well as use the increased\nefficiency to enable z-transactions and all Verus features on mobile devices as soon as possible. Until that is available, we will work to provide a mobile wallet for Verus transparent\ntransactions.\n3.3.7 Content Classification\nWhile Verus is designed to provide invaluable tools to people across the world, any system\nwithout censorship will also inevitably allow the underbelly of humanity to show through.\nThat means that while we would want all people to participate, we recognize that in order\nfor that to provide the most positive experience for all participants, we must use the Verus\npoll system itself to recognize, rate, and classify the content on its network, enabling those\nwho provide such a service through participation in polls to earn, while enabling the selective\nfiltering of content based on value judgements and classification of honest populations.\nWhile we recognize that the best early use case for such capability is in rating and\nclassifying non-intrinsic polls themselves, the ability to classify content is a fundamental\nstrength that Verus will increasingly develop over time. At first, we expect such classification\nto be applied to relatively simple tasks for humans, such as identifying toxic comments, hate\nspeech, or categories of information. Even though these types of classification systems have\nlargely employed machine learning systems running against privately curated training data,\nour vision is for Verus content classification to enable people to earn, as they classify content\nbetter than any machine learning system, but in a way that can be followed by the best\nmachine learning algorithms, and generalized at scale.\n3.3.8 Truth vs. Opinion\nWhen classifying content, especially when you start to consider challenging classifications,\nsuch as misleading, propaganda, generally accepted fact, accurate versions of history, vs.\nclassification of what should generally be accepted as toxic or rated content that people could\nreasonably answer objectively, one must consider the difference between fact and opinion.\nSelecting the winner of an election is a matter of expressing an opinion. Classifying content\naccording to level of toxicity is a question of determining the factual answer to the question:\nwhat does the majority of the voting population believe the classification to be. Determining\nwhether an image in one photo is the same image as that from another is a question with\nan objective, if not determinable answer.\nTo ensure that Verus polls support polls that attempt to discover accepted truths, facts,\nand even credible emerging arguments, Verus voters will often be able to stake and either\nearn or lose Verus and in later phases, Virtue, by answering in a manner that matches\nconsensus. For other polls, which are recognized as opinion polls, all answers are equally\nvalid contributions.\n3.4 Random Sampling as a Service\nThe Verus system will randomized selection for many of its functions, similar to its Phase I\nPoS block validation system. Blockchain lotteries will be generalized and used for selection\nof participants in randomized polls and in other cases where pseudo-random sampling is\ndesired. The general principles behind Verus lotteries are the same, regardless of whether\nsomething similar to Algorand [29] for guaranteed selection or an original Verus algorithm\nbased on difficulty, such as Verus PoS is used for selection. Lotteries use the blockchain as a\nrandom oracle and are based on the assumption that the exact value of a specific block hash\nfrom a past block in the chain cannot be modified by a byzantine participant to weigh the\nodds in their favor.\n3.4.1 Participating in a Lottery\nSince the Verus network is completely decentralized, all lotteries, including PoS, are potential,\nand there is no central server selecting and sending messages to those who qualified in a\nlottery. When lotteries are implemented as a general feature, if you would like to participate\nin any Verus lottery or poll that is distributing tickets via lottery, you must first determine\nthat you qualify for the poll\u2019s requirements. You will then need to submit a transaction that\nproves that you have a valid claim and spend the output transaction of the lottery ticket to\nyour address using that proof. By default, that spend will authorize you to be a validator\non the autochain for the poll you are participating in, by providing you with the currency\nof that poll. You may validate the poll by leaving your wallet running, getting potential\nrewards in Verus or Virtue for both activities.\nLotteries will be useful for selecting subpopulations based on identity and claims people\nmake about themselves or that others claim about them, which they are willing to share.\nWhile detailed discussion of Verus identity is beyond the scope of this paper\u2019s release, the\nVerus system will provide self-sovereign identity with the ability for identities to make very\nflexible claims and have them attested to by other identities. For example, a lottery may look\nfor males between the ages of 18 to 25 among identities willing to share that information,\nwhich will even be possible to verify as strongly as through a validated passport or driver\u2019s\nlicense. Other polls may not require the same evidence backing claims. Polls may also have\nrestricted voting, such as local political polls, where verification and authorization for the\npoll must be provided explicitly, often by mail to a physical address or in person in the form\nof a QR code or electronically delivered transaction to your Verus wallet.\n3.4.2 Proof of Stake Lottery\nA block validation lottery is a somewhat different form of lottery which allows you to claim\nthe right to validate a block and its associated reward based on proof-of-stake (for autochains)\nor 50/50 PoW/PoS (for the main chain). The lottery requires that a prior block hash 100\nblocks past combined with a qualifying UTXO of the destination public key hashed with the\nstaking block height and then divided by the UTXO value must be under the current proof\nof stake validation difficulty. By dividing by the UTXO value, Verus weights proof-of-stake\nor proof-of-virtue in proportion to the amount of stake or virtue in the UTXO. If no one who\nqualifies to validate a block is online or no one responds with a submitted block validation\nin a certain amount of time, the blockchain will wait until someone mines a block using\nproof-of-work.\n3.4.3 Ticket Harvesting Lotteries\nThere will be multiple ways to acquire tickets to participate in any particular poll. The\nmanual ways emphasized so far may include receiving a poll with QR code in post or email\nor perhaps directly from someone taking a poll. In addition to these direct ways to receive a\nvoting ticket, Verus will enable polls to be posted on the poll blockchain as transactions, the\ntickets for which are distributed from its outputs by lottery. This will work when the Verus\nID functionality is available, and will enable polls to require presence of specific claims or\nattestations on an ID, as well as the number of participants to select in the poll by creating\none transaction output for each, which is spendable by a cryptocondition [17] that defines\nthe lottery conditions and random difficulty. The difficulty determines how often a particular\nblock will match any attempt to harvest a ticket from that block.\n3.5 Machine Learning Integration\nVerus enables humans to share and expose human knowledge through voting mechanisms to\nmake decisions, express opinions, and classify accurately. The data used for that classification, as well as the classifications or decisions themselves provide an ideal source of training\ndata for machine learning systems across any domain of human knowledge or opinion. As\ncorporations gather, sequester, and learn from massive amounts of personal data in order to\ncompete and boost their bottom line, rather than accrue to society\u2019s benefit, these massive\nprivate databases serve to affect and influence human populations by knowing more about\nthem than others, or even than they know about themselves.\nSince Verus enables humans to use voting mechanisms to classify and make decisions,\nand stores the results of this process in IPFS and on the blockchain, we will train machine\nlearning algorithms on these results over time, allowing them to eventually classify and make\ndecisions consistent with human decisions and values at an even higher scale. This will enable\nVerus to perform certain tasks automatically, such as the recognition of false or incorrect\nidentification data among participants in the system, the initial classification or rating of\ncertain content that can be overruled, but may not be appropriate for all audiences, and much\nmore. The end result of this is a more secure and trustworthy network, built on consensus\nand trustless principles, leveraging worldwide human knowledge as a base of information and\nmachines for scale.\nA major Verus advantage over almost any other system in its use of Machine learning on\nhuman data is the innate privacy it provides to those whose data is used for learning, along\nwith the default that all resulting information be made public, unless those making polls pay\nthe Verus community a going rate to keep the data for themselves. In today\u2019s society, the\ngoal of most machine learning systems is to match consumers with products they are likely to\nbuy and/or manipulate them into an actual purchase, thus generating revenue. This creates\na situation that can create unintended negative consequences when algorithms disregard any\npositive or negative effects its predictive abilities may have on society [23]. For example, if\nthe algorithm recognizes that people with depressive episodes are more likely to gamble, and\nthus buy airline tickets to gambling-oriented locations, such as Las Vegas, it will advertise\nthose airline tickets to those people. In the Verus system, machine learning algorithms will\nbe able to learn from human beings, while being limited to accessing only the data users\npermit, and at the same time, being unable to easily target any specific individual.\n3.6 Verus Mobile Polls\nIn addition to a desktop wallet that supports Verus and other Komodo platforms or compatible applications, mobile support is a high priority and will provide yet another layer of\nconvenience for users, enabling them to use, earn, and spend Verus in everyday life. We intend to provide a Verus mobile experience that functions as a wallet, self-sovereign identity,\nprovides easy access to the polling and earning applications, and is intended to server as an\nextensible application browser, capable of supporting additional applications that leverage\nthe Komodo or compatible ecosystems. While we have already begun thinking about and\nstoryboarding design and development of user experiences, we do not expect any mobile\nexperience to be ready until completion of Phase II at the earliest. Even when the first\nmobile experiences are ready, they will not include the support for private transactions that\nwe intend to enable as a foundation for confidential, mobile polling and communications. To\nget a feel for the way we envision Verus experiences working in practice, below is an example\nof some poll screens from early designs."
      }
    ]
  },
  {
    "id": "00011300",
    "image": "00011300.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat about the implementations of the roadmap?"
      },
      {
        "from": "gpt",
        "value": "After researching options from building the technology ourselves to leveraging unreleased\nadvanced projects, to using one of the few well thought through blockchain application\nplatforms, we decided to start building the Verus project as a friendly fork of Komodo and\nits asset chain technology, enabling us to both become a contributing member of and also\nenhance and extend the Komodo platform as Verus builds blockchain platform technologies\nand real world applications of PBaaS.\nBy leveraging proven zk-SNARK zero knowledge privacy technologies and Komodo\u2019s\ndelayed proof of work (dPoW), which notarizes the main Verus blockchain into Komodo\u2019s\nblockchain, which is then notarized into the Bitcoin blockchain, we underpin Verus with a\nfoundation of state-of-the-art privacy, security, and interledger transaction capabilities as\nour baseline. Above that, we have already developed advanced features that further enhance\nsecurity, improve decentralization, and prepare for the implementation of autochains and\nproof of virtue.\nWe will maintain our own open source fork of the Komodo platform and collaborate with\nthe Komodo team when possible to develop new features or capabilities that can be accessed\ncross-chain by projects across the Komodo platform and even other blockchains that are\nsimply compatible with Komodo\u2019s Interledger Protocol implementations. We will maintain\nour development as an open source project and contribute back to the broader open source\ncommunity, as we leverage the contributions of others that have made it possible for us to\nbegin realizing our vision as a community.\nAll that said, roadmaps are never perfect. Unless we significantly underpromise and\nprioritize a date so highly that no feature or capability is important in and of itself, targeting\ntimeframes and milestones without specific target dates allows us to be ambitious in our goals\nand adapt to a changing world as we deliver. Even in Phase I, which we have delivered as\nof the writing of this paper, we adjusted our plan, and in an uncharacteristic turn of events,\ndelivered even more than we had originally planned. We do not expect that to always\nbe the case, and we will focus more on correct and complete phases than specific dates\nwhen possible. Sometimes, as with any major endeavor, the right choice is to recognize an unexpected opportunity or obstacle, take two steps to the right or left, and only then proceed\nforward.\nFor the purpose of this whitepaper, we will discuss four phases of the Verus vision. We do\nnot see these four phases as a completion of the vision as much as four phases of an ongoing\nmission to advance Verus and its contribution to society that we can currently express. From\nits inception and throughout the project, the Verus chain will serve as our fungible value\nchain, and use of Verus tokens on this chain will be the core value around which we continue\nto develop the Verus vision.\nThe first Verus chain, which is already available at the time of this white paper\u2019s release,\nincludes zk-SNARKs for privacy, both transparent and private addresses, a brand new CPUmineable hash algorithm for proof of work, a brand new proof of stake algorithm, and a\nunique emission schedule among fair launch cryptocurrency projects. Each phase of our\nproject\u2019s development will introduce capabilities and experiences that provide independent\nvalue on their own, further leverage Verus Coin to power operation, and create a foundation\nupon which to build the next phase. We intend and hope for the Verus project to become a worldwide, inclusive community\neffort, which welcomes and rewards those who contribute. Although we articulate these first\nfour phases here, we see these phases as just the beginning, and we hope you will join us by\nparticipating in and contributing to the Verus project to make our world a better place."
      }
    ]
  },
  {
    "id": "00011400",
    "image": "00011400.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nHow does Phase 1 of the coin look like? and what are its possibilities?"
      },
      {
        "from": "gpt",
        "value": "In phase one, the Verus main network began with a slow start and 15 minutes advance notice\nat 7:15am GMT, Monday, May 21st, 2018.\nThe Verus network began emitting first 0 block reward, rising linearly each block over\nthe course of 7 days until block 10080 to its peak of 384 coins per block. The Verus emission\nschedule is as follows:\nEra 1:\nBlock 0 - 10080 reward: 0 to 384, rising linearly and changing each block\nEra 2:\nBlock 10080 - 53279 reward: 384\nBlock 53280 - 96479 reward: 192\nBlock 96480 - 139679 reward: 96\nBlock 139680 - 182879 reward: 48\nBlock 182880 - 226079 reward: 24\nEra 3:\nBlock 226080 - 1277279 reward: 24\nBlock 1277280 - 2328479 reward: 12\nBlock 2328480 - 3379679 reward: 6\n. . . halving indefinitely every 1051200 blocks (approximately 2 years)\nWe also added another fair twist on the launch that we believe will contribute to a more\nstable value growth in the Verus currency, without any unusual risk of dumping by any single\nparty. During the first 5 months, Verus will have an accelerated reward curve for mining\nand staking, with a halving every month. During the first two months, when the block\nrewards are at or above 192 Verus, mined blocks will have time locked coinbase transactions,\npreventing spending, staking, or transferring of those coins for a period that varies from\napproximately 3 months after the genesis block, based on numbers of blocks, to 2 years and\n3 months. These time locked coins provide a smooth release of the Verus currency supply as\nwell as incentive to all of their owners to support the long term success of the Verus network\nand project.\nFrom the very beginning of its operation, Verus operated with a dual proof of stake /\nproof of work mechanism for all participants. Verus mining with the VerusHash algorithm,\nas of this point, is a CPU-only algorithm, designed with a Haraka512 V2 [30] core to be\nquantum secure and to maximize performance on modern CPUs. While VerusHash was\ndesigned to be CPU-optimized and did not begin life with GPU or ASIC miners capable of\nbeating CPUs in its mining, the Verus developers have no illusions that it is possible someone\nmight develop either a GPU or ASIC-based miner that could be meaningfully superior to\nCPUs.\nTo ensure that such a solution if developed, remains open, jl777, lead developer of the\nKomodo Platform, has offered a 1 Bitcoin bounty to any developer who can make and\npublish in an open manner, a GPU miner for the VerusHash algorithm that can significantly\noutperform the current CPU miner. In order to win the bounty, the source code for the\nminer must be available under open source licensing. To be eligible for the bounty, any\nimplementation must be able to perform 5x better than a modern, high thread-count, high\nclock-rate CPU on a GPU costing under $1000. By bringing up the Verus network this way,\nwe established an immediate, baseline set of functionality, above which we can build out\nour project and community around a functional coin and project, as we stay in sync with\nadvancements in the underlying Komodo platform.\nVerus phase one release was pre-announced on Bitcointalk [28] with zero premine, and\nteam members mined and staked along with everyone else to generate coins. In addition to\ncoins mined by individual team members for their own benefit, the Verus developers intend\nto donate most of their mined and staked earnings to a community Verus foundation along\nwith other donating community members who will join us, in order to support the ongoing\ngrowth and project development by core developers and the community for years to come."
      }
    ]
  },
  {
    "id": "00011500",
    "image": "00011500.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhats the capabilities of phase 2?"
      },
      {
        "from": "gpt",
        "value": "As soon as we completed phase one, we entered phase two, which includes release of this\nwhite paper, activation of the community through donations of some of our mined coins,\nand a push to finish planning for, development and release of mobile support, autochain\ncapability, and the ability to setup, and then easily run CVT polls at scale."
      }
    ]
  },
  {
    "id": "00011600",
    "image": "00011600.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nHow about phase 3?"
      },
      {
        "from": "gpt",
        "value": "In phase three, we plan to further improve the mobile experiences, implement the identity system, including support for strong, decentralized identity and attestations, separating\nphoto IDs and other photo content into components that can be separately verified in unbiased human polls. At this point, we intend to support optional KYC strong identities, via\nboth notarization of identities as well as poll-based identity verification. This will also be\nthe first phase that supports Verus chain validation PoV enhanced PoS."
      }
    ]
  },
  {
    "id": "00011700",
    "image": "00011700.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nHow does phase 4 bring changes in verus?"
      },
      {
        "from": "gpt",
        "value": "In phase four, Verus will begin to truly leverage the foundation built in phases one, two, and\nthree by focusing on broad content classification capabilities for off-chain content, improving storage management support in its distributed hash table implementations, supporting\nstorage monetization in some way, and providing open source, public implementations of\nmachine learning systems that can learn from data on the Verus network to solve real world\nchallenges of today and tomorrow."
      }
    ]
  },
  {
    "id": "00011800",
    "image": "00011800.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat are some forward looking statements of veruscoin?"
      },
      {
        "from": "gpt",
        "value": "This information was fetched using vision paper which includes predictions, statements of intent, discussion of plans, estimates or other\ninformation that might be considered forward-looking. While these forward-looking statements represent our judgment and expectation of what the future holds, this is not an offer\nor solicitation to purchase any product, good, service, or security. All statements herein\nare subject to risks and uncertainties that could cause actual results of the Verus Project\u2019s\ndevelopment to differ materially. Furthermore, we intend to use the Verus blockchain as\nour open source development platform \u2013 contributing these technologies under permissive\nlicensing for the betterment of society, not focusing solely on profit of anyone affiliated with\nthe Verus project. You are cautioned not to place undue reliance, especially in any financial\ndecision, on these forward-looking statements, which are subject to modification, update, or\nchange for legitimate reasons both within or beyond our control. By expressing our vision\nand goals, the Verus Core developers are not obligating ourselves to revise or publicly release\nthe results of any revision to these forward-looking statements in light of new information\nor future events."
      }
    ]
  },
  {
    "id": "00011900",
    "image": "00011900.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhats PBaas in simple terms?"
      },
      {
        "from": "gpt",
        "value": "Its a feature of veruscoin that you can use Public Blockchains as a Service to deploy customizable, scalable and interoperable blockchains within minutes. No need to provision additional resources."
      }
    ]
  },
  {
    "id": "00012000",
    "image": "00012000.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhats VerusID in simple terms?"
      },
      {
        "from": "gpt",
        "value": "Digital identities, assets and namespaces for any project. Self-sovereign, decentralized or even centralized. The most complete identity system in the world."
      }
    ]
  },
  {
    "id": "00012100",
    "image": "00012100.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhats DeFi in veruscoin?"
      },
      {
        "from": "gpt",
        "value": "Instant liquidity for blockchain and token projects. Create markets and find funding. Use for lending and borrowing."
      }
    ]
  },
  {
    "id": "00012200",
    "image": "00012200.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat about the privacy of the coin? does it keep the transactions secure?"
      },
      {
        "from": "gpt",
        "value": "Your privacy is a human right. Get fully encrypted zero knowledge private transactions."
      }
    ]
  },
  {
    "id": "00012300",
    "image": "00012300.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat about Interoperability?"
      },
      {
        "from": "gpt",
        "value": "Exchange value and data seamlessly across blockchains and other systems. Connect any system together with Verus Interchain Protocol."
      }
    ]
  },
  {
    "id": "00012400",
    "image": "00012400.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat about the data?"
      },
      {
        "from": "gpt",
        "value": "Define and publish verifiable data structures across blockchains and other systems. With Verus Data Exchange Format (VDXF) it\u2019s never been easier."
      }
    ]
  },
  {
    "id": "00012500",
    "image": "00012500.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nHow about the payments?"
      },
      {
        "from": "gpt",
        "value": "You get cheap, fast, scalable and final payments. An essential element of all decentralized systems."
      }
    ]
  },
  {
    "id": "00012600",
    "image": "00012600.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nCan u tell me more about verus profit generating protocol for miners and stakers?"
      },
      {
        "from": "gpt",
        "value": "Future Verus miners: take notice. Prepare for the full mainnet release of PBaaS (Public Blockchains as a Service) and find great opportunities to maximize profit with your hardware. Mine up to 22 blockchains with the same hashrate. With Verus\u2019 hardware equalizing hashing algorithm (VerusHash 2.2) you can mine efficiently with CPUs, mobile phones and even ARM devices. In fact CPUs can mine faster than all but extremely expensive, larger FPGAs.\nEfficient Mining\nVerusHash 2.2 is created to level the playing field for all hardware. The hashing algorithm uses the AES/AVX instruction sets built into most modern CPUs to boost CPU hash power.\n\nMine Verus most efficiently with CPUs, mobile phones and even certain ARM devices. Compare mining hashrates here.\n\nCoinbase Rewards\n1440 blocks are generated each day. On average 720 blocks go to miners, 720 blocks go to stakers (learn more on staking Verus). For generating \u2014 or finding \u2014 a block, miners and stakers get compensated. This compensation is called a coinbase reward. There will never be more than 83,540,184 VRSC.\n\nIf you look at the image below, you might think that the possibility of earning VRSC for miners and stakers goes down drastically. We explain next that earnings don\u2019t stop at coinbase rewards.\nEarning from Economic Activity\nMiners and stakers don\u2019t just earn coinbase rewards (the reward for finding a new block), they also take a small portion of the Fee Pool. The Fee Pool collects fees that are paid by users when they are interacting with the protocol. Protocol fees include:\n\nPBaaS-chain*: creating a blockchain on Verus costs 10,000 VRSC. 5,000 VRSC goes into the Verus Fee Pool, and 5,000 VRSC goes into the Fee Pool of the created blockchain, earned by miners and stakers of that blockchain\n(DeFi) Currency and tokens*: creating a currency on the Verus blockchain costs 200 VRSC\nVerusID: identity fees for miners and stakers are 20, 40, 60, 80 or 100 VRSC\nConversion fees: each time a user converts currencies it costs 0.025%\nTransaction fees: each transaction is minimally 0.0001 VRSC\nMiners and stakers are protecting the blockchain and at the same time servicing the Verus economy. We expect the Fee Pool rewards to exceed the coinbase rewards.\n\nThink about it: someone creates a PBaaS-chain, 5,000 VRSC goes to the Fee Pool, the winner of the next block gets 50 VRSC extra on top of the coinbase reward. Now imagine a whole lot of economic activity: users making conversions through the protocol, registering VerusIDs, creating DeFi currencies and tokens, and the Fee Pool can get quite large.\nMerge-Mine up to 22 Chains\nThe example above is only for mining Verus directly. Keep in mind that Verus is a multichain protocol. All PBaaS-chains in the protocol have exactly the same specifications as the Verus mainchain. They too have a Fee Pool that collects fees through VerusID registrations, conversions, DeFi currency and tokens and even in a later stage also PBaaS-chains!\n\nAnd you can mine 22 of them! All with the same hashrate as you would when mining only Verus.\n\nAll these chains have the same consensus algorithm, 50% PoW, 50% PoS, so you can also stake an unlimited amount of PBaaS-chains.\nHappy Mining (and Staking)!\nEveryone in the world can start mining Verus today with our low barrier hashing algorithm. For questions regarding mining and staking, come to our Discord server."
      }
    ]
  },
  {
    "id": "00012700",
    "image": "00012700.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nCan you give me some information regarding the verus vault and verusID marketplace mainnet upgrade?"
      },
      {
        "from": "gpt",
        "value": "Buy and sell VerusIDs in a completely decentralized way without any intermediaries. It\u2019s the next step in the evolution of VerusID, the most powerful self-sovereign identity and secure storage for funds in the digital world. Version 0.9.0 also enables Verus Vault on mainnet, the world\u2019s first solution to truly securing your blockchain funds. Use Vault to lock funds for security, vesting, trusts, inheritance, and more.\nA Marketplace for Anything\nVerusIDs are much more than a typical digital identity. And once you own one on the Verus blockchain or a compatible PBaaS blockchain, it\u2019s yours forever, rent-free, fully under your control. Until the moment you decide to pass it on.\n\nVerusIDs can be anything you want. They can be bound digitally to many things. They can be bound to you, or other VerusIDs they have authority or ownership of. They can be bound to an unlimited amount of content, data, and provable information, both public and private. Including provable contracts and rights that can be bound to ownership of the VerusID itself.\n\nEach VerusID on the Verus blockchain can even be used with Public Blockchains as a Service (PBaaS \u2014 currently on testnet) to launch a token or DeFi currency, and even an interoperable blockchain. These blockchains inherit all features as they are on the Verus blockchain.\n\nVerusIDs can hold funds. They can be personal profiles, corporate websites, or government portals. VerusIDs are much more than identities or today\u2019s NFTs. They are owned assets of all kinds on the Verus blockchain. And now those assets can be exchanged easily.\n\nWith the VerusID Marketplace protocol, anyone is able to buy and sell VerusIDs. You can look for offers on any VerusID (buy or sell offers). If you like the best offer on your VerusID, or if someone likes an offer you made on theirs, the deal is made 100% peer-to-peer, decentralized on the blockchain, without any middleman or contract controller.\n\nFor total payment privacy, you can even pay or receive payment using private addresses and zero knowledge transactions based on the Zcash Sapling protocol.\n\nExchanging in Private\nIn addition to advertising worldwide on the blockchain to buy or sell VerusIDs, you can also make an exchange with the Marketplace without ever posting the offer on the blockchain until it is agreed and signed by all parties. Combine that with zero knowledge transactions, and it\u2019s a great way to transact worldwide, escrow-free in private.\n\nA powerful use case example: A business sells subscriptions for exclusive content. They make VerusIDs with contracts that give access to the exclusive content. They now create a transaction that would pay for the VerusID. They give the transaction to the buyer who then executes it. The buyer now owns the VerusID that gives access to the exclusive content.\n\nNow imagine how you can do this for a VerusID that can be any kind of asset. A new way for everyone to engage in peer-to-peer, escrow-free commerce has arrived.\n\nFive New APIs\nVerusID Marketplace introduces five new RPC APIs and CLI commands for this major upgrade: makeoffer, takeoffer, getoffers, closeoffers and listopenoffers.\n\nmakeoffer: define what you offer and for what. What you offer can be funds, VerusIDs, or when PBaaS goes live even other currencies. What you want in return can also be funds, VerusIDs or currencies. In exchange for what you offer, you also define what VerusID or how much you want for it and in what currency.\ntakeoffer: take a specific offer in exchange for its request.\ngetoffers: specify which VerusID or currency you want to see offers for or on offer, and it returns all offers (buy and sell) in all currencies, sorted by highest to lowest price.\ncloseoffers: close expired or unexpired offers which you opened with makeoffer.\nlistopenoffers: list all offers that you have opened with makeoffer.\nProtect Your Funds with Verus Vault\nThe new mainnet upgrade enables a completely new level of security and safety for all your funds. Verus Vault allows you to lock any VerusID under your control, while still using its funds to actively stake and earn on the network.\n\nWhen you lock a VerusID, its funds can not be spent anymore. All locking and unlocking are visible on the blockchain.\n\nTwo Lock Mechanisms\nYou can lock a VerusID in two different ways that cannot be circumvented by anyone, except the revocation and recovery authorities together.\n\nLocked and unlocked until number of blocks passed: funds can not be spent until a predetermined number of blocks have passed.\nLocked and unlocked with a delay: funds can not be spent until an unlock has been requested + a predetermined number of blocks have passed\nPowerful Use Cases\nSafe staking: put funds to stake with on a VerusID. Use Vault to lock the identity with a delay of 10,080 blocks ( ~1 week). Now whenever someone gains access to the private keys of the locked VerusID, they have to unlock the identity in order to spend the funds. When someone makes an unlock request that isn\u2019t you, you are warned. The intruder has to wait 10,080 blocks before he can spend the funds. If you have set up revocation and recovery authorities, you now have one week to safeguard your funds away from prying hands, back into your control.\nTrusts: setting up a trust fund for your children. Give your child a time locked VerusID with funds on them. When he or she turns 18, the VerusID unlocks and the funds can be spent. Keep revocation and recovery authorities with yourself or a trustee.\nVesting period: when doing a currency or chain launch, development funds can be diverted to a locked VerusID. After two years the VerusID unlocks and the funds can only be spent with signatures of other developers. You can also spread the funds across multiple identities with different unlock periods.\nThese are just a few examples on how the powerful Verus Vault can be used. VerusID can store any asset on the Verus network, including those bridged from other blockchains. When PBaaS is on mainnet, the first bridged asset is Ethereum."
      }
    ]
  },
  {
    "id": "00012800",
    "image": "00012800.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nwhat about verus reward halving?"
      },
      {
        "from": "gpt",
        "value": "Every two years the Verus block reward is halved. This is part of the predictable and transparent monetary policy, set in place by its inception in May 2018.\nHalving Event\nThe current block reward is 12 VRSC \u2014 which means that miners and stakers who win a block are rewarded 12 VRSC for their efforts of securing the network. This number will go down to 6 VRSC, drastically lowering the number of coins coming into circulation.\nIntroducing the Fee Pool\nWith the PBaaS-mainnet upgrade coming closer, let\u2019s introduce one of its gaming-changing features that will reward miners and stakers with drastically higher block rewards.\nWhen PBaaS is activated on mainnet, anyone can launch blockchains, tokens and currencies, and they can convert currencies through Verus\u2019 L1 DeFi protocol. All these activities cost fees that directly go to the miners and stakers of the worldwide network.\n\nSo even though a halving to 6 VRSC might seem bad for miners and stakers at first glance, a lot of good things are on the horizon."
      }
    ]
  },
  {
    "id": "00012900",
    "image": "00012900.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat about the coming age of social tokens?"
      },
      {
        "from": "gpt",
        "value": "New technical capabilities allow influencers and communities to turn social tokens from one-dimensional curiosities into widely usable currencies carrying reliable real world value, that are far better positioned to capture additional value for their issuers and others through building substantial and automated economies centered around the token.\nsocial tokens offer the promise of branded digital currency that allows creators to capture the value created by their community\nin the first generation of social tokens, technical features are one-dimensional, allowing for sending back and forth and to be included in liquidity pools like Uniswap \u2014 they can be related, with hard work, to off-chain economic activity but have no on-chain economics \u2014 actual value is aspirational, not provable, reliable or predictable\nsocial tokens hold promise but have yet to really take off like they should \u2014 leading platforms require programming or a permissioned facilitator, have limited capabilities \u2014 there\u2019s no long tail activity\nadditional capabilities and low-cost permissionless, easy launches will unleash potential \u2014 built-in direct liquidity, stable and predictable values, attached namespaces to create a full spectrum digital goods economy centered on the token; real value creation that is direct and measurable through directly connected on-chain economic activity like nfts, fan profiles, memorabilia, tickets, discount codes, coupons, log-in unlock, etc; measurable economic activity with clear results attracts speculators who can measure and predict engagement that inevitably leads to real value\nthe Verus project, in non-stop development for five years, has built-in blockchain primitives that make these capabilities a reality now, offering more functionality, to more people \u2014 smart contract platforms cannot match these capabilities today absent an enormous engineering effort in bringing together multiple interoperating complex smart contracts\nadditional capabilities include privacy enhancement, moral hazard resistance, easy group dynamics\nprovable decentralized bridges to ethereum give the best of both worlds \u2014 intelligent next generation social tokens that can also emerge automatically, without programming, as ERC-20s\nexperiments to prove these concepts require no programming, are risk-free and extremely low cost \u2014 core protocols exist now, tooling and apps still require build-out in a collective effort\nSocial Tokens \u2014 the Promise\nGoogling the term \u201csocial tokens\u201d brings a host of articles discussing socal tokens as the next big thing. The idea has been around for a while since ERC-20s mainstreamed the idea of token creation riding on top of a base layer blockchain. Creating digital scarcity and expressing that as a transferable token was now possible without creating an independent blockchain; it could be done at relatively low cost and with low maintenance. Soon, people began thinking about tokens where an influencer, brand or community creates a branded token, pre-mines a little bit of it, gets their fan-base/customers/community to transact in it and, presto, the token will start to gain a little bit of value.\n\nThe First Generation\nEarly market leaders soon arrived, such as tryroll.com and rally.io. These platforms are well-funded venture businesses that managed to onboard perhaps thousands of creators into their own social tokens. Despite some fanfare though, there\u2019s not much to these tokens other than\n\nenforced digital scarcity \u2014 they help creators create and issue ERC-20s (or Solana now, for Rally), helping them through what is an otherwise arduous process requiring some skill\nautomated market making \u2014 they help set up Uniswap-like liquidity provision, but to gain actual liquidity creators must, in the words of the Roll website: \u201cencourage their communities to contribute liquidity\u201d\nhanding creators a roadmap and examples to \u201cbuild value\u201d \u2014 this generally involves activities, services or products that creators will offer to their fans so that they can get their communities to buy the token and then trade the token for these goods \u2014 the idea is to generate real-world demand for the tokens\nOn the roll website, this last concept is pitched as: \u201cAfter minting, you determine all the ways your token will be distributed and used across platforms, closing the loop that gives your social token its own independent value and starts your social token economy.\u201d. But, as described in this article, \u201cI discovered that it\u2019s just a sh**tload of work to keep a token going\u201d.\n\nThe end result is that value in social tokens remains fleeting or aspirational. Liquidity through liquidity provision in automated market makers can be a big problem. For a liquidity provider, risks are high, probably untenable since impermanent loss risk in an AMM with a fragile token approaches 100%. It turns out that liquidity provision in this context is a wholly altruistic activity, or worse, done by people who are unaware of the enormous risks. WIth minimal liquidity provision comes little market depth and unstable value.\n\nAlso, value for the token is tightly locked to a creator\u2019s ongoing real world efforts to provide experiences, or events, or products, in order to drive continuous demand for the currency. There are no automated economic activities. If the creator\u2019s activity stalls, or dries up, the token will lose value rapidly. Predictably, the vast bulk of these currencies peter out, and are forgotten, living on as zombie ERC-20s on ethereum.\n\nNo Long Tail\nAnyone that\u2019s really interested in creating a social token is met with an odd reality in the \u201cdecentralized\u201d blockchain world. Both Roll and Rally, the social token leaders, require creators to go through a detailed application process, and then wait for approval. The Rally website says they\u2019re looking for: \u201c1) Evidence of a significant community size, \u2026 2) Evidence of current transaction activity within your community \u2026 3) Evidence that you have strongly considered the role that a social token economy would play in your ongoing projects.\u201d Creators then wait for a review before being approved. Roll\u2019s business model is to take a portion of the creator\u2019s token for themselves. Rally\u2019s is a little more sophisticated, attempting to have value created in their own token and sidechain in the process.\n\nThis makes sense for Roll and Rally because there is significant engineering and other work required to get the contracts up and running that define the social token and provide it liquidity. Creators who want to \u201cdo it themselves\u201d are met with an arduous and limiting process \u2014 essentially, they need to be decent developers to get their tokens going. And to do all that for a one-dimensional token that can only be sent back and forth or placed in an AMM seems to be an unattractive proposition.\n\nThe result is that social tokens have yet to fulfill their promise. There\u2019s no easy way for just anyone to do permissionless experiments at little cost, and little risk. And, when they do experiment, there is only the hope that by tying real world activities to their token, they might generate some value there, at least while they continue to offer those activities. This purported value is difficult to measure, and tough to capture, and exhausting to maintain. So there\u2019s no real innovation and no \u201clong tail\u201d that allows unexpected modes of organization and value creation to emerge.\n\nNew Capabilities"
      }
    ]
  },
  {
    "id": "00013000",
    "image": "00013000.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat would it look like if there were new capabilities around social tokens? What are some of these, and how would they function?"
      },
      {
        "from": "gpt",
        "value": "Easy launch \u2014 low cost, permissionless, easy launch through point and click or simple commands. This would lower barriers and allow for just anyone to try out social token experiments. The law of large numbers tells us that some would stumble into real success, perhaps in ways, and through methods, we don\u2019t yet understand.\n\nBuilt-in Direct Liquidity \u2014 five years ago, the Bancor project pioneered smart tokens, which they called \u201cmoney that holds money\u201d. Bancor seems to have abandoned this concept in favor of competing with Uniswap, but the idea has real merit. A social token with this property would not need an automated marketmaker to be able to be a liquid token. Instead, users could convert into and out of the token directly, after first being \u201cseeded\u201d by the founder. This eliminates liquidity provider risk \u2014 and, in essence, every single holder of the token ends up providing liquidity, automatically. This leads to more market depth, and thus more stability and predictability in value. The fact that each token is \u201cmoney that holds money\u201d leads to provable value, and these tokens will be treated with care, as near money. Another result of this capability is that social tokens would have dynamic supply, where more tokens are automatically minted in response to increasing demand, and burned if the demand reverses.\n\nAttached Namespaces \u2014 tokens have names, of course. If these are cryptographically unique names (like, for example, crypto addresses), they can be the root of a namespace. ERC-20 names are not unique and so cannot be namespace roots (unless referred to by their contract number). A different model for tokens, where their friendly names are defined in the protocol and processed as UTXOs just like native blockchain currency, points to whole new capabilities. For example, if someone called \u201cInfluencer\u201d creates a social token called \u201cInfluencer\u201d, they will have also defined a namespace called \u201cInfluencer\u201d, opening up unique digital goods opportunities.\n\nDigital Goods \u2014 a namespace on a blockchain protocol renders unique power; a simple model for digital goods on a namespace would include:\n\nobject definition \u2014 a protocol could allow unique friendly name identifiers within the namespace, meaning fans could register identities/names that are associated with the namespace, eg. \u201cfan.influencer@\u201d, or an influencer could assign meaningful names to digital goods attached to their namespace, eg. \u201cticket0001.influencer@\u201d or \u201ccoolnft.influencer@\u201d or \u201cschedule.influencer@\u201d\nobject control and transferability \u2014 a protocol could allow defined objects to be controlled by private keys and to be transferable from one set of private keys to another, either by command, or in an atomic swap transaction, eg. fans could transfer their objects to and from each other at will, or on automated marketplaces without intermediaries\nobjects as destinations/addresses/endpoints \u2014 as addresses on a blockchain protocol, these objects could receive, send and hold funds, or control other objects; eg. money could be sent to or from \u201cfan.influencer@\u201d; also, objects could be endpoints, and so could receive messages or be unique points in a communications network\nobject metadata \u2014 objects could contain space for metadata, and leverage data structures and off-chain storage (either centralized or decentralized, like arweave) to allow for arbitrary and updateable data to be associated with the object. Coupled with #3 above this allows objects to exist as NFT art, or verifiable online profiles\nobject signatures \u2014 being cryptographically unique, objects could provide verifiable signatures to arbitrary data, thus allowing for applications like sign-on/access, or voting\nImmediately we see that meaningful digital goods economies could spring up around successful influencers. Examples of such digital goods would be:\n\nFan IDs \u2014 the simple act of creating a fan ID/address for just a few dollars could be seen as a show of support, or status symbol in an influencer community; or fans could create and trade meaningful IDs\nNfts \u2014 influencers, or even their fans, could create digital collectibles/art/memorabilia to be auctioned, sold or given away to fans\nFan Profiles \u2014 updateable, verifiable fan profiles are possible\nTicket \u2014 an object could represent a ticket to an event\nCoupons/gift cards \u2014 an object could represent a right to buy merch\nDiscount Codes \u2014 an object might give a right to get ongoing discounts on merch or events\nMemberships \u2014 an object can provide exclusive membership to influencer clubs or forums\nLog-in/access \u2014 an object can give rights to enter websites or other digital arenas\nVoting \u2014 objects could be used to signal support for an initiative, idea or proposal\nThis is far from an exhaustive list, and the \u201clong tail\u201d will surely draw out ideas which we\u2019re not even capable of conceiving right now. Many of these goods would be automatic or community created and so could thrive even without continuous activity from the issuer. This is important for the longevity of the social token economy. It\u2019s not difficult to see how strong community-created activity could thrive and persist.\n\nAn Economic Model for the Digital Goods \u2014 to capture value for the issuing influencer (and others), there is no necessity ever to sell tokens directly to the public (which might bring securities laws into the issue anyway). The social tokens would always be just a commodity/good/coupon that can be acquired to show support, or to be used (exclusively) to acquire digital goods like those described above. An issuer would always, likely, issue \u201cfree\u201d tokens to themself as part of the creation process (a \u201cpremine\u201d), or retain the right to issue new tokens at will (perhaps only after the passing of a period of time). They would also need to \u201cseed\u201d the token with a little bit of real world money to provide initial value to the token. Note that this seed money would never actually be at risk of loss, and could always be recovered; in fact, recovery (and more) would be quite easy in the case of thriving token economies. Once this is done, then fans could acquire the tokens (directly, without an AMM) by converting their currency, like USDC, into the social token. Every time a fan does this, they increase the supply of the token a little bit, and they also drive up its value. When they spend the token on digital goods (like ID creation, buying a NFT, getting a membership, etc.) the amount that they spend gets burned from the supply of the token, which reduces its supply and further drives up its value. During this process, too, the robustness of the reserves of \u201creal\u201d currency are improved, providing more depth and stability to the token\u2019s value. It will become easier and easier for the issuer to start selling down their \u201cpremine\u201d, or to issue themself new tokens, and thus capturing the created value, without crashing the value of the token.\n\nWith this model, further value enhancement might come from speculators who see that an influencer is growing in power. Speculators like these would be analogous to collectors who have an eye for talent, and that can spot trends. All they need to do to profit is to get in early on the right tokens by the right influencers with the right potential economic activity that would *inevitably* drive value increases. In this way, market dynamics might allow influencers to capture future value today.\n\nThis Exists Today \u2014 the Verus Project\nThis is not just theory, but is about to be put into practice. Five years in development, and with a working network (minus these token capabilities) for the last three years, the Verus Project has built the protocols. Verus aims to be a public good. There are no VCs funding the project and so no returns on investment that need to be drawn from users to pay back investors. It is a community developed FOSS blockchain protocol. The only fees involved in creating and using social tokens on Verus will be paid, as in bitcoin, to miners who power the network.\n\nThese capabilities as described do not exist on smart contract platforms today. Perhaps they could be engineered on a case by case basis by a team of competent smart contract developers. But, this would require complex interconnecting smart contracts to deal with all of the disparate elements. It would be an enormous engineering effort, fraught with risk and complexity. On Verus, using primitives as building blocks, these tokens can be issued in just a few minutes, with bespoke variables, by non-programmers, and at little cost.\n\nAdditional Capabilities\nApart from the core functionality of social tokens described above, there are also some interesting capabilities that enhance the concept. First, as a fork of zcash, Verus offers private transactions on its native currency. And, as a UTXO blockchain, wallets control multiple addresses which cannot necessarily be traced to the same wallet. This gives the ability for intelligent apps to protect user\u2019s privacy as they interact with social tokens.\n\nAlso, on-chain escrow mechanisms allow for issuers to timelock their holdings for arbitrary periods. This helps reduce potential moral hazard where fans and speculators might be concerned about issuers dumping their holdings and \u201crugging\u201d their community. Roll has always been concerned about this possibility, and that led them to provide centralized escrow services for their issuers. Unfortunately, a security incident at Roll led to these \u201cescrowed\u201d amounts being stolen and liquidated.\n\nSocial tokens might be tied to entire groups, rather than a single influencer. In this case, Verus protocols allow multisignature approvals for the issuance or sale of the tokens. Multisigs can be up to 13 of 25 different participants.\n\nFinally, Verus testnet currently includes a provable decentralized bridge to and from the ethereum network. This bridge allows any token created on the Verus network to be bridged to ethereum, where it *automatically* emerges as an ERC-20 token, without any additional programming required. This is a crucial element, as ethereum is currently where the users are. Once created on Verus, an influencer can bridge tokens over to ethereum, where it can be used for giveaways, liquidity provision, or any other purpose for which social tokens are used today by Roll or Rally. Similarly, tokens can be bridged from ethereum, meaning that USDC, ETH, WBTC and other valuable currencies will exist on the Verus mainnet.\n\nStatus\nThese protocols exist now on the Verus testnet and are scheduled for imminent release to the Verus main network. As a community project, and FOSS project focused on core protocol development as a public good, Verus community members have not yet advanced consumer-ready tooling and apps that can take full advantage of these core capabilities. Nevertheless, forward-thinking influencers can start now, since experimentation is inexpensive, permissionless and easy, and some of the tooling and apps do exist for capable users. More importantly though, there is a business opportunity here for companies or entrepreneurs to leapfrog Roll and Rally, or for those companies themselves to pivot to, or supplement their current offerings with, a more capable rent-free platform. The Verus community stands by to assist anyone who would develop tools and applications and businesses leveraging the protocols."
      }
    ]
  },
  {
    "id": "00013100",
    "image": "00013100.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat about the community currencies and community contributed value?"
      },
      {
        "from": "gpt",
        "value": "A currency gains value from its use \u2014 call it Community Contributed Value\nNational currencies aggregate this contributed value and centralize the benefit to the government and adjacent actors\nPeople see this, and Community Currencies have been attempted to capture this value locally, instead of sending it on to financial centers and capitals\nCommunity Currency experiments have generally failed for various reasons \u2014 difficulty of creation/use, lack of transparency or auditability, moral hazard, lack of immediate convertibility, instability of value, inability to see, measure and capture Community Contributed Value\nBlockchains have shown a pathway to overcome some, but not all, of these roadblocks; until now, no successful local currency projects on blockchain\nA new set of blockchain protocols has emerged in the Verus Project, which is developing rent-free public blockchain infrastructure \u2014 use of these open protocols allows for low risk, low cost experiments such as Community Currencies that overcome traditional roadblocks\nWithout programming, a community can quickly create a made to suit local currency that is easy to use, is transparent and auditable, defeats moral hazard, allows for instant conversion into other currencies, has a stable and predictable value, and can measure and capture Community Contributed Value, to be used for the betterment of the community\nAdding intelligent namespaces to Community Currencies gives the potential to experiment with additional value enhancing opportunities, creating digital goods economies attached to the Community Currency\nAt this time, Verus is a project where developers are focussed on the core protocols. Rolling out a Community Currency for broad use would still require some additional work on user-facing apps.\nThe Problem\nLike any other good, money is ruled by the laws of supply and demand. A currency in high use requires a constant float of supply to be circulating through its system. In the case of a fiat currency, the demand for holders to hold the currency gives it its value. In other words, as users of a currency, we collectively give value to that currency by our use. For something like the United States Dollar, its value comes from use in its domestic economy, as the global reserve currency, as the petrodollar, as the primary numeraire in financial markets, as the base currency for most foreign and corporate debt, as a predominant store of value, etc. etc. If we live in the United States and we zoom in, looking at our own local community, we can see that we are providing some small fraction of value to the overall value of the USD through our community\u2019s aggregate use and holdings. However small that might be in relation to the global forces of supply and demand, it might still be a relatively large amount of value when considered from the community\u2019s point of view. Little work has been done in quantifying this actual value provided by a community through its demand for a prevailing currency, but new technical tools might allow us to see this more clearly through actual experience. That\u2019s what this sample case study is about \u2014 let\u2019s call this value created by a community, \u201cCommunity Contributed Value\u201d.\n\nObserving this in the world today, the first thing we see is that, at the local level, we have zero control of our own Community Contributed Value, nor do we experience much, if any, local benefit from it. The aggregate of all Community Contributed Value, worldwide, is centralized in the hands of the US government. In the fiat period, as the master of the global reserve currency, the US government has proven that this aggregate value is enormous, allowing the government and country to run persistently high budget and trade deficits, and expand the money supply at will, while still maintaining a strong dollar.\n\nIn addition, although specific research is hard to find on this issue, it does seem as if powerful private forces that are adjacent to the United States Government, such as Wall Street and the Defense Industry, are conferred certain advantages through their proximity to the controller of the USD. Connected and powerful people and corporations may be, directly or indirectly, tapping into this Community Contributed Value.\n\nSolutions \u2014 pre-Blockchain\nAll of this is obvious enough to have given rise to a long history of efforts to start local community currencies, to keep some of this contributed value in the community. Prior to the development of the blockchain, these efforts really seem to have been doomed from the start. Currency issuance in the paper money world is difficult to control and has huge security and moral hazard issues (counterfeit, over-issuance, etc). These currencies cannot easily be made transparent, or auditable. The funds can\u2019t be reasonably saved or protected in banks. There is no plausible way to have readily available conversion at market rates between the community currency and the USD, nor is it plausible to keep a local currency at a stable and predictable value. For users, using community currency was hard, and for communities, making community currency was hard \u2014 and so, except for a handful (or less), every effort ran aground.\n\nSolutions \u2014 in the Dawn of the Blockchain Era\nInterest in community currencies perked up in the blockchain era, as it became clear that auditable, transparent tokens could be created at will (eg. ERC-20s), and the tokens could be securely stored and controlled through digital wallets. Bitcoin itself is an example of a type of community contributed value, where demand to use and hold gives it its value, to the benefit of a worldwide virtual community of early adopters. Ease of creation and use has been enhanced as against paper currencies, at least for the technically adept. Still, no longstanding successful cases of broad local community use have emerged. In fact some, such as CityCoins, have been notorious failures.\n\nIt seems that auditability, transparency and digital wallets are not enough. Other key issues are:\n\ncommunity currencies still require some sophisticated engineering capability to implement\nthere is no method for easy, reliable convertibility into the prevailing fiat currency, nor can conversion rates hope to be predictable or stable, even in the short term\nthere is no easy way to safely and measurably capture the Community Contributed Value\nthere are no additional enhancements to community or the currency through attached digital goods and a new digital goods economy\nNew Solutions \u2014 Bancor; Verus, public blockchains as a service\nIt is likely that, were these problems solved, and ease of digital wallet use addressed (along with personal privacy), motivated communities would find it far easier to bootstrap use of a community currency {\u201cCommCurr\u201d}. Imagine being able to spend your CommCurr anywhere in the community, from the babysitter to the gas station to the bank, and have it accepted with ease because the recipient knows that they can convert it easily and immediately, and without a counterparty, at the push of a button, to the USD, on a 1:1 basis (or very near thereabouts). And if community members could measurably observe the amount of Community Contributed Value that was emerging through widespread and persistent use, CommCurr would be easy to promote, and hard to resist.\n\nOne of the best efforts to deal with convertibility in community currencies is the project Bancor. They pioneered onchain reserves as part of a currency\u2019s definition, dynamically expanding and retracting supply, tied to use, and the ability to convert directly to and from other currencies, using locked onchain reserves as a fractional backing. This proof of concept has existed since the first version of Bancor, as a smart contract capability on Ethereum. For any community, each particular implementation of a smart contract would need to be designed, engineered and audited by experts, in this case Bancor developers. But Bancor is a heavily funded venture business at root, having raised hundreds of millions of dollars in an ICO. Development of community currencies doesn\u2019t pay, unlike commercially-driven defi, so Bancor soon abandoned any focus in this area.\n\nAt about the same time as Bancor emerged, former Microsoft fellow Michael Toutonghi, and some associates, released a vision paper focused on making public blockchain infrastructure that can be used by the world. Inspired by bitcoin\u2019s approach to re-imagining money, they aimed for the development of usable blockchain primitives that could form the basis of distributed network applications that provide people a real chance of self-sovereignty and new ways to self-organize in many areas of life.\n\nThey began developing software and protocols, basing off Bitcoin and Zcash, and bootstrapped a worldwide network of self-interested miners and stakers who power a network that is capable of providing public blockchain infrastructure. Fast forward five years, and a good portion of the network has been running for years, providing the first parts of the system. Now, the rest of the full vision (and more) is about to transition from testnet to mainnet, and new capabilities for blockchain are about to become publicly available, including the ability to run advanced Community Currency experiments that are virtually risk-free for communities, can be carried out at low cost, and have several elements that will make them attractive and safe for broad community use.\n\nTwo key points to note about the Verus protocols, software and network are:\n\nno venture capitalists or investors have been involved in its financing or development, so there is no need to extract rent or payment from users to pay back investors \u2014 it is rent-free technology, the only payments necessary are network fees to provide sufficient incentive for outsiders to provide their compute resources to power the network; and\nVerus does not use smart contracts \u2014 it is based on more traditional and longstanding distributed computing paradigms, and users access the software for basic primitives, which they then put into use and combine however they see fit. No contract programming or special blockchain engineering skill is required to carry out sophisticated actions. Recently, on the Verus testnet, one community member (a non-programmer) implemented a powerful community currency example in less than ten minutes with a few simple commands.\nCurrency Reserves \u2014 Convertibility\nVerus provides the ability to define new tokens/currencies at will, without programming. Various options are available, as tokens carry a multitude of possible uses, from voting to tickets to currencies. For community currency experiments, one of the key options is to lock in reserves that are attached to, and back the value of, the newly issued currency. And, since Verus is bridgeable to and from the Ethereum network, you could back a new currency with ethereum or USDC or any other valuable currency from that network.\n\nIf a CommCurr is defined with reserves backing it, then users can freely mint new currency by converting their USDC, for example, directly to CommCurr. This would build up the locked reserves of CommCurr. Or, they could go the other way around, converting CommCurr into USDC immediately by converting it into its reserves, without any need to find a counterparty. This would reduce the locked reserves. The conversion rate in these situations is driven by Automated Market Maker (AMM) technology, similar to Uniswap, although providing a MEV-resistant fair conversion experience for all users at the lowest possible fees.\n\nReserve backing in the Verus protocols is user-selected upon the creation of a currency, ranging from a 5% backing to a 100% backing, Multiple currencies, with arbitrarily selected weights can be used. There is a requirement to use the Verus coin as at least one of the currencies backing CommCurr, or any currency \u2014 it needs to represent at least 5% of the backing. This is due to interoperability goals, to ensure that networks built using the Verus protocols stay connected, as a worldwide network of value, where currencies connect to each other throughout.\n\nThese few simple options make for a host of use cases, which will not all be explored here. Instead, we\u2019ll focus on CommCurr and note that a decent implementation might have backing consisting of two currencies \u2014 USD (represented by USDC bridged from the Ethereum network), and Verus, weighted 95:5 in favor of USD.\n\nAs a result of having valuable reserves, CommCurr is guaranteed to be valuable, and users can instantly convert in and out of it by simply sending it to themselves, or another person, choosing a conversion option. If a user sends USD and receives CommCurr then the reserves for USD will go up, and two things will happen to CommCurr \u2014 it will issue a little bit of new supply, and its value will go up. On the other hand, if a user goes the other way, sending CommCurr for USD, then some CommCurr supply will be automatically burned, and the value of CommCurr will decrease a little. In other words, CommCurr has a dynamically expanding and retracting supply, and a floating conversion rate, depending on the demand for the currency.\n\nCapturing the Contributed Value\nWhen creating CommCurr the best way to capture value for the community will be to create the currency so that it is only partially backed. For this sample case study, let\u2019s say it\u2019s backed at 80%. A community can easily engineer this precise amount of backing (which never changes, as a percentage, through the life of the currency) by choosing an initial supply of CommCurr, say 1 million, and then contributing 760,000 USD as reserves, and 40,000 dollars worth of Verus as reserves. We\u2019ll avoid going into detailed mechanics here but the result would be that, upon the launch of the currency, the community currency issuer would own 1,000,000 CommCurr, which is 80% backed by real value, but is convertible, as its initial price to acquire or to sell, 1:1 with the USD.\n\nNow, as we described above, if the issuer just starts converting their initial holdings of CommCurr (1 million units) into USD, they\u2019ll start depleting the reserves and driving down the value of the currency. In fact, if they just dumped it all, they\u2019d get all their initially contributed reserves back and the currency would be rendered virtually worthless. So, instead of doing that, they\u2019ll encourage use by the community. Perhaps they\u2019ll simply promote its use, or maybe they\u2019ll offer small discounts on community services, and encourage others to do so, to bootstrap use. The overall idea would be to encourage use by the community at large. If use emerges, and people start to acquire the currency (by contributing USD into the reserves), and the issuing community does not sell any of its initial holdings, the value of CommCurr will begin to creep up (provided that not all of this currency is immediately converted back by the recipients). Under these circumstances, It should be easy enough for community members to become comfortable with the value of CommCurr, as they see that it can always be acquired and disposed for USD, immediately, and at a predictable and stable price. It\u2019s important to note that if the issuing community doesn\u2019t sell/convert any of its holdings it is *impossible* that the value of CommCurr would fall below its initial value of 1:1 vis-a-vis the USD.\n\nIf regular use persists, there will be constant demand for the currency and a certain float will begin to remain in circulation. In our example, let\u2019s say the community reaches the point where 100,000 CommCurr is more or less always outstanding, in some form of transit circulating through, or being held by, the community. This would tend to increase the value of CommCurr some amount. But, instead of allowing the currency to appreciate, the Community could begin to draw down on some of the 1,000,000 of initial supply that it holds in its reserves. In fact, in this example, they\u2019d need to convert 100,000 of that supply into USD just to keep the price pegged 1:1 with the USD.\n\nSo now we would have an exact measure of Community Contributed Value \u2014 in this case it\u2019s 20% of $100,000 = $20,000. If the demand in the community created a persistent float of $1 million, the issuer could draw down their entire supply converting it into USD, and it would still be backed at its original amount, and still be convertible 1:1 with USD..\n\nNo Free Lunch (well, maybe a free appetizer)\nDid the issuer just make $1 million? No. Remember they had to commit $800,000 of value in the first place to set this up. And, although that investment is never at risk (they can always just convert everything into the reserves at any time to recoup them), there is a certain upfront capital cost there. However, they did clearly make $200,000, which, in this case would be a measurable amount of Community Contributed Value that they captured. There are also some minimal network costs to set this up on the Verus network, which is paid to the miners and stakers, as block rewards, for mining the Verus blockchain, and powering all the community\u2019s transactions. At current rates, it would amount to less than $200. Overall, the cost/risk/reward matrix is attractive.\n\nIt is important to remember that all of this is transparent and auditable, being on a public blockchain. Community members would be in instant possession of all relevant information about currency supplies, reserves, spending, conversion, etc. by the CommCurr creators.\n\nCommunity members would have transparency on their spending too, which is unfortunate. However, as a fork of zcash, Verus does offer private transactions on its native currency, Verus, and so there would be methods for users (or preferably, their apps) to help protect the spending privacy of community members.\n\nGovernance\nThere are other blockchain primitives that Verus enables which enhance CommCurr as an attractive and low-risk method to create Community Contributed Value. First, the protocols allow for virtually unlimited flexibility with respect to the governance of who is in control of the initial holdings of CommCurr. Multiple signatures could be required, up to, for example, 13 of 25, to authorize any spending or conversion activity. This would allow for fairly sophisticated approval mechanisms and safeguards for communities that are implementing this type of experiment.\n\nMoral Hazard \u2014 Escrow\nAnother blockchain primitive is the ability to provably and irrevocably lock digital wallets for an arbitrary period of time (up to 21 years). In this way, a community issuer could reduce concerns about the moral hazard of dumping their holdings and crushing the value of a growing CommCurr. They can choose to stagger escrows, making, say, 10% freely spendable now, and then unlocking 10% a year after that. One aspect to consider is that, if a lock is made irrevocable, it will build in capital cost risk for a community. Ie. if the experiment is a failure and there\u2019s no adoption, they wouldn\u2019t have access to their original capital until the unlock period passes.\n\nWait, There\u2019s More \u2014 Enhancing the Community Currency through New Capabilities for a Digital Goods Economy that Directly and Tangibly Benefits the Currency\nPossibly the most forward-thinking element of a Community Currency is the ability to build a real digital goods economy around it. The Verus protocols make this possible through the issuance of what are called SubIDs. SubIDs are multi-use friendly name \u201cidentities\u201d. Community members can register these names by paying a set amount of CommCurr, for example, 10 CommCurr per registration. This increases the value of CommCurr because any amounts paid for the \u201cidentities\u201d are burned, thus increasing the value of the currency for all holders thereof (including the original issuer).\n\nCommunity members might seek to register identities for many reasons:\n\nto signal support for the community\nto have a recognizable or branded community-oriented name to receive funds, eg. \u201cmember.CommCurr@\u201d\nto create a NFT or public profile attached to the name (\u201cidentities\u201d are capable of being expressed as nfts, artwork, public profiles, etc.)\nto be a ticket for an event or a discount code for purchases, or a membership in a club\nTo be attached to a physical item, like a community landmark, where it can represent a public profile or description, fundraiser, message board, etc.\nThese are just some of the virtually unlimited examples of digital goods that could be created, all of which would require CommCurr to acquire, this creating a real demand for the currency.\n\nConclusions\nThese are new blockchain capabilities. They do not currently exist on Ethereum or other smart contract blockchains because the interplay of such different elements would seem to create overwhelming complexity, requiring the use of multiple inter-operating contracts to implement. Certainly, such comprehensive and flexible solutions could not be carried out in minutes through the use of a few simple commands.\n\nCurrently, all of these capabilities exist in the Verus protocols and are in use on testnet. A mainnet activation is imminent, and communities can soon start to experiment, at the smallest initial scales they desire. It\u2019s important to note, however, that additional software development would be required to make some of these elements easy and safe to use for the broader community. As a FOSS project, Verus encourages communities to work together, and with the Verus developer community to create open source apps that leverage the protocols, so that all communities worldwide can benefit from the resulting development."
      }
    ]
  },
  {
    "id": "00013200",
    "image": "00013200.jpg",
    "conversations": [
      {
        "from": "human",
        "value": "<image>\nWhat is verus basic defi?"
      },
      {
        "from": "gpt",
        "value": "Verus is a UTXO-based cryptocurrency with DeFi in its consensus protocol. In this first vBasics-series, we explain what liquidity pools, automated market makers and fractional currencies are, and how they function in the Verus ecosystem.\nVerus is a foundational blockchain that builds key primitives at the consensus level of the protocol. DeFi is one of those key primitives, and quite difficult to wrap our heads around. Especially as the words we use can be confusing. This is new technology so we make it up as we go. DeFi systems we know use words like \u2018automated market makers\u2019 and \u2018liquidity pools\u2019. Verus adds \u2018fractional currency\u2019 to the terminology.\n\nIn a DeFi system there are no people you buy or sell your currency to. You only interact with a pool of liquidity. Inside this pool of liquidity can be many different currencies, small or large amounts. The liquidity pool is attached to a currency. The currency that is attached to the liquidity pool has a value that is determined by what is in the liquidity pool (image 1).\n\nImportant note: in the Verus ecosystem, all currencies with liquidity pools have adaptive supplies.\nLet\u2019s start by explaining currencies that are backed by 100% (see image 2). In our example we have NewCurrency. This currency is backed by 100% and has VRSC and ETH in its liquidity pool (A).\n\nIn a currency that is 100% backed, the value is always equally divided by the number of currencies in the liquidity pool. NewCurrency has 1000 VRSC and 2 ETH in its liquidity pool. And even though they are different values, and they have different values outside the Verus ecosystem, they still represent 50/50% of the value (B).\n\nLet\u2019s say the currencies in the liquidity pool of NewCurrency have a value of both $500. Consequently, the value of 1 NewCurrency is $1000 (C).\nSo, depending on what is in the liquidity pool of NewCurrency, the price of the currency fluctuates. Here comes the term \u2018automated market maker\u2019 in play. No person sets the price of the currency, it is fully automated. Anyone at any time can interact with this currency because there is always a value, and always liquidity. Which means it is an always \u2018on\u2019 market maker. A fully automated market maker.\n\nYou might ask yourself: why is there always liquidity? This is because a liquidity pool can never be really empty. One can always add or take out VRSC and ETH. When a balance tips too much to one side, there is opportunity to arbitrage and make money. There is always something to trade against.\n\nNow why would someone want to convert their VRSC or ETH to NewCurrency? This is a portfolio management choice. NewCurrency acts as a constant-mix strategy. You are exposed to two different currencies, while holding only one. By holding NewCurrency you also earn fees from people converting, more on this later.\n\nA Verus DeFi currency that is backed by 100% can have many more currencies than just two in its liquidity pool. All kinds of combinations are possible (image 3).\nIn the Verus ecosystem we call a currency that has a pool of liquidity attached to it a \u2018fractional currency\u2019. The currencies that are in the pool of liquidity we call \u2018reserve currencies\u2019, see image 4.\nTo make it a bit more complicated, let us explain why we call these currencies \u2018fractional currencies\u2019. In our example before (image 2) we showed a fractional currency that derives its value 100% from the reserve currencies: it is backed 100%. In the Verus ecosystem, we can have fractional currencies that are partially, fractionally, backed by a number between 5 and 95%, see image 5.\nHow one creates 100% backed or partially backed fractional currencies differs. A user can create a currency and define that the currency is 100% backed. A user can not define the fraction between 5 and 95%. The number of backing by a fractional currency is dependent upon market forces before the currency is launched.\n\nOne can ask, what is the consequence that a currency is backed by 10, 50, 80 or 100%? The difference is the curve of price vs supply. And remember, the fractional currencies have adaptive supplies. See image 6 for a simplified illustration.\nConverting From Reserve to Reserve\nWe have explained how one can always convert to a fractional currency with its reserve currencies. Or back to a reserve currency with the fractional currency. In the Verus ecosystem there is another way to convert currencies.\n\nWe call this converting through the fractional currency. One doesn\u2019t acquire the fractional currency, but converts through the fractional currency to a reserve currency. To simplify: one converts one reserve currency to another reserve currency. See image 7 for the different conversion possibilities within our NewCurrency example. Remember that all the currencies (fractional & reserves) have a value relative to each other.\n\nFor example, if one owns VRSC, they can convert it to ETH through NewCurrency. In the Verus DeFi ecosystem, if one wants to convert VRSC to ETH, the protocol searches through all the fractional currencies with both VRSC and ETH in its reserves, presenting you the best price for conversion (image 8).\nThere is always a value, and always liquidity attached to the fractional and reserve currencies. It will always be possible to obtain a fractional currency, or convert to a reserve currency with any of the many fractional AND reserve currencies that will be available in the Verus ecosystem.\n\nImportant note: all fractional currencies on the Verus blockchain must have VRSC as one of its reserves.\n\nEarning Fees\nLike we discussed earlier, holding a fractional currency is besides a portfolio/investment strategy, an opportunity to earn fees.\n\nLet's say one holds NewCurrency from image 2. Every time a user converts VRSC to ETH, or ETH to VRSC, 0.025% of the transaction in VRSC stays in the NewCurrency reserve. This means that the total value of NewCurrency goes up which is beneficial for the holder.\n\nJoin the Revolution\nWhat makes Verus unique compared to its competitor Ethereum, is that in Verus all blocks are solved simultaneously. Front-running will not be possible. Read more in-depth information on the differences between Verus and Ethereum DeFi.\n\nA giant system of liquidity will emerge, with value flowing in every other direction. Many times the value of the currencies in the Verus ecosystem will not be aligned with the same currencies outside of the ecosystem. Many arbitrage opportunities will arise which means more value flowing into the system."
      }
    ]
  }
]