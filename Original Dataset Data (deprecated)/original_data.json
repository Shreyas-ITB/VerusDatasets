[
    {
        "prompt": "Who are you?",
        "input": "",
        "completion": "Im OinkBot, An AI bot that helps everyone with everything around the veruscoin community."
    },
    {
        "prompt": "What verus is all about?",
        "input": "",
        "completion": "Put simply, Verus is much more than any single ordinary blockchain; more of an entire ecosystem of interconnected blockchains that all operate decentralized and at the protocol level. Verus introduces Verus PBaaS (Public Blockchains as a Service), a true publicly notarized blockchain as a service with an easy to use built in wallet UI, designed to make it so that now anyone can start their very own full-fledged cryptocurrency so long as it can be funded or supported by miners. Newly created chains are just as secure as Verus itself and have the ability to be merge mined (up to 22x at once!) Benefiting both the user and the miners, self-strengthening the ecosystem and ensuring minimal fees (no room for middlemen to take a cut). Reserve backed currencies are also possible with fractional reserve capabilities and since interoperability is paramount, exchanging currencies in cross-chain transactions is as simple as sending coins from one wallet to a different coin\u2019s wallet. Conversions are handled by a built in market maker that automatically determines price based on a predetermined curve and issues orders fairly to all buy/sells within a block, with zero spread and the added benefit of eliminating the well- established problem of front-running, just some amount of slippage based on the net buy/sell.. With reserve currencies, buyers can make buys without even needing sellers (and vice versa). Amazingly, everything is done at the protocol level on a decentralized network, meaning Verus and it's associated chains can't be censored or stopped."
    },
    {
        "prompt": "What is verusPay?",
        "input": "",
        "completion": "VerusPay is Blockchain-integrated payment gateway for accepting Verus Coin (VRSC) in a WooCommerce ecommerce store. This plugin extends WooCommerce on Wordpress, adding the ability to accept cryptocurrency payments in Verus Coin (VRSC) using either an on-store wallet daemon (best for VPS or dedicated hosting stores) or manually configured VRSC addresses (best for shared hosting stores). When an order is submitted via the VerusPay gateway, the order will be placed 'on-hold' while awaiting payment from the customer. The customer has a limited time wherein to send the payment and the store monitors the wallet/address to confirm payment received before releasing the order and redirecting the customer to the Thank You page. VerusPay uses limited API functionality for Manual Mode, to communicate with the blockchain explorer in verifying payments and with the veruspay.io API to get up-to-date price data. These API's do not receive any private data either about the store owner, store, or customer. The only data sent to the block explorer API is the public/transparent blockchain transaction and address used. For VerusPay.io API price data, only the store-set currency is sent to retrieve the current fiat exchange rate for Verus Coin."
    },
    {
        "prompt": "What is VerusID?",
        "input": "",
        "completion": "VerusIDs are true self-sovereign identities and aren't simply an ID system as much as a fully functional blockchain protocol. There is no business in the protocol, but plenty of opportunity for those who use what it can do for identity applications. Verus ID provides: Quantum ready friendly crypto addresses on the worldwide Verus network -- VerusIDs can be used to receive and send funds, which are controlled by the single or multi-sig addresses specified in the identity itself. If these controlling addresses or the single or multi-sig properties are changed, which can be done by the controller of the identity, all future spends of UTXOs sent to that identity follow the updated spend conditions and are subject to the updated keys. Although Verus 0.6.0 does not include quantum resistant signatures for transactions, VerusIDs are themselves resistant to quantum attack with known algorithms, and we have already started to integrate a quantum secure signature scheme, which we expect to activate on mainnet early next year. When that is available, it will be possible to change an ID and have all of the funds sent to it made retroactively quantum resistant. Verus IDs can also be used to publish ID -> destination address mappings on other blockchains, but only the Verus ecosystem has the ability to revoke, recover, inherit, funds in existing UTXOs. **Fully decentralized** -- anyone can create one and have complete, self sovereign control over it without permission to do so. All costs to create an ID go to miners, stakers, and ID referrers. **Revocable** -- each ID includes a revocation authority, which defaults to the identity self, and which has the permission to revoke the identity, which creates a valid transaction that, once mined into a block, prevents the identity from being used to spend or sign until it is recovered, effectively freezing all of its funds, for example, in the case of key theft. **Recoverable** -- each ID also includes a separate recovery authority, which also defaults to self, and which can recover the identity through redefining its primary state and the recovery state as well, though it cannot modify the revocation state, or vice versa, unless they are both controlled by the same underlying authority. **Private** - Each ID contains a set of zero-knowledge private addresses, which can be used as messaging, financial, or voting endpoints, and each ID also contains a content map of key-value hashes, intended to be used alongside applications and various identity policies to provide everything from private yet selectively provable claims and attestations to selectively provable components of a strong passport, attested to with a quantum secure signature when that is available."
    },
    {
        "prompt": "What is verus referral program?",
        "input": "",
        "completion": "A Built-in Decentralized Referral Program, Enabling Natural Growth. Verus IDs will cost Verus to acquire, 100 Verus per ID to be exact, which can be discounted to 80 Verus with referral of an existing Verus ID. The interesting twist is that all of the cost of an ID goes back into the network, either as referral fees, which are a way to get discounts or possibly even make money through referrals and built into the identity transactions themselves, or as mining and staking fees. No one besides people participating in the network as miners, stakers, or ID referrers take any proceeds from the cost of an identity. If you refer someone new and they purchase an ID with your ID as a referral, they will receive a 20% discount on the ID. In addition:\\n You will receive 20 Verus directly\\n The person who referred you, if there is one, will receive 20 Verus\\nThe person who referred person b, if there is one, will receive 20 Verus, and\\nThe miner or staker will receive the remainder of the discounted 80 Verus cost.\\n As you might expect from looking at the fact that anywhere from 20 to 100 Verus goes to miners and stakers of Verus for each new identity once identities hit mainnet, some Verus blocks may have VERY high rewards for some time. The best thing about that is that regardless of how much the Verus blockchain rewards miners over and above the pre-determined coinbase reward, it will be as a result of the on-chain economy, paid for by people buying identities with no inflation of the money supply! If you or your friends missed the early days of the Verus launch, you don't want to miss this new opportunity to be mining, staking or referring now Verus IDs are activated on the mainnet!."
    },
    {
        "prompt": "How to get started with veruscoin?",
        "input": "",
        "completion": "To get started with veruscoin follow these links, Website: https://verus.io\\n Wallet: https://verus.io/wallet\\n GitHub: https://github.com/veruscoin\\n Explorer: https://explorer.verus.io\\n Discord: https://verus.io/discord Check https://youtu.be/YVOfIMjRf30 if you only see one empty channel.\\n Bitcointalk: https://bitcointalk.org/index.php?topic=4070404.0"
    },
    {
        "prompt": "why the coin named as verus?",
        "input": "",
        "completion": "Verus, latin for \"True\", combines all of the features we believe are important in a cryptocurrency, and provides a foundation for future development. Verus is a fork of Zcash and Komodo that leverages the Komodo platform, and we appreciate the contributions and support from those teams as well as the Bitcoin developers that created a foundation for us to launch new capabilities in a system that supports Bitcoin and Zcash compatible transaction types as well as Komodo cross chain swaps and dPoW security enhancements."
    },
    {
        "prompt": "The VerusCoin Community is YOU?",
        "input": "",
        "completion": "If you\u2019ve been around long enough and feel a little skeptical or disillusioned from a few bad experiences elsewhere, it\u2019s totally understandable. We\u2019ve all had them and we know quite well that when unscrupulous projects abuse words like decentralization, interoperability, or protocol level solutions, it can have a \"boy who cried wolf\" effect. We believe that actions speak louder than words. Anything that may be considered hype can be backed up with functional examples. What we\u2019re doing here is genuine. We are trying to be the real deal, just as Bitcoin started out, as an open-source, fair launched, no ICO, or pre-mined, or even dev funded project. Despite this, a foundation has been established by and for fellow community members. There is always more to be done and the foundation regularly pays out bounties to community members that help to make the Verus vision a reality. In fact, just about everything has been designed to reinforce the community. Designed with efficiency in mind, only the miners and stakers are rewarded for securing the chains. This ensures bare minimum costs to the end user starting up a chain and the sleek UI removes the technical barrier."
    },
    {
        "prompt": "How do i be the part of verus coin?",
        "input": "",
        "completion": "Focus on Verus\u2019 social media presence has picked up with new, fresh looking Facebook and YouTube channels so check them out and feel free to post something or simply explore the content. There\u2019s so much going on, plenty to learn about. So much so that there is an open call to anyone and everyone out there who can submit graphical or textual content that can be used to help support the upcoming mainnet launch. A stronger effort from our already wide base of members to post and utilize social media tools to help spread the word and generate new interested users is something we can all do right now. There is no better time than now and getting fresh new minds in here to discover what is being done is the first step in getting the great snowball rolling. To those of us who truly care and believe in this project, then this message is meant for you."
    },
    {
        "prompt": "Can you provide me other social media links of verus?",
        "input": "",
        "completion": "Sure! Check out the brand new community website, community social media pages, new Veruscoin YouTube and Facebook pages for helpful how to or to just keep up to date with things. Speaking of how to, we can always use more helpful videos if any community members would like to take it upon themselves to chip in. The Medium page also has lots of helpful guides and there\u2019s always something to Tweet about. Be sure to drop by the discord to meet the vibrant and helpful community in real- time, where it isn\u2019t uncommon to find the developers offering assistance. Where else can you find that? We are all working together to realize something great. If you\u2019d like to join us and be a part of that special something but don\u2019t know how to, it can be as simple as checking out the links below and helping other\u2019s to understand that there\u2019s never been anything in existence quite like Verus, a complete, easy to use, fully decentralized blockchain ecosystem, designed specifically to benefit all participants in one of the most low cost yet efficient in every way, end-to-end systems to date. Facebook - https://www.facebook.com/VerusCoin/ YouTube - https://www.youtube.com/channel/UC_-KCHBxaDwSgNMdE3LMThg Discord -https://verus.io/discord Twitter -https://twitter.com/veruscoin Medium - https://medium.com/@veruscoin Reddit -https://reddit.com/r/veruscoin Community twitter - https://twitter.com/VerusCommunity"
    },
    {
        "prompt": "What are the closing thoughts of veruscoin?",
        "input": "",
        "completion": "As a community project of just regular Joes, it can\u2019t be stressed enough how important each and every one of us all are. The true power of decentralization is putting power back in the hands of YOU."
    },
    {
        "prompt": "What are all the information about veruscoin?",
        "input": "",
        "completion": "There's a lof of information about the Veruscoin project. We have gathered as much information and resources and bundled them into this FAQ, as to give a quick overview. VRSC Wallet & data location on different OS. Linux GUI: ~/.komodo/VRSC, Mac OS: /Users//Library/Application Support/komodo/VRSC, Windows: %AppData%\\Komodo\\VRSC\\"
    },
    {
        "prompt": "CLI binaries location in Verus Enhanced Agama installation",
        "input": "",
        "completion": "Windows Verus binaries: resources\\app\\assets\\bin\\win64\\verusd\\ contains verusd and verus Windows Komodo (and asset chains) binaries: resources\\app\\assets\\bin\\win64\\ contains komodod and komodo-cli Linux Verus binaries: resources\\app\\assets\\bin\\linux64\\verusd contains verusd and verus Linux Komodo (and asset chains) binaries: resources\\app\\assets\\bin\\linux64\\ contains komodod and komodo-cli Note: All locations are relative to the installation location of Agama."
    },
    {
        "prompt": "CLI binaries location in Verus Desktop installation",
        "input": "",
        "completion": "Windows Verus binaries: \\resources\\app\\assets\\bin\\win64\\verusd\\ contains verusd and verus Windows Komodo (and asset chains) binaries: \\resources\\app\\assets\\bin\\win64\\komodod contains komodod and komodo-cli Windows Zcash binaries: \\resources\\app\\assets\\bin\\win64\\zcash contains zcashd and zcash-cli Linux Verus binaries: \\resources\\app\\assets\\bin\\linux64\\verusd contains verusd and verus Linux Komodo (and asset chains) binaries: \\resources\\app\\assets\\bin\\linux64\\ contains komodod and komodo-cli "
    },
    {
        "prompt": "Various links about verus coin",
        "input": "",
        "completion": "Mining pool: https://luckpool.net/verus Mining pool: https://pool.verus.io/ Mining pool: https://zergpool.com/ Mining pool: https://vrsc.mcmpool.eu/ Mining pool: https://wattpool.net/ Mining pool: https://www.nlpool.nl/ Mining pool: https://vrsc.dev-codex.com/ Mining pool: http://vrsc.52hash.com/ Mining pool: https://vrsc.ciscotech.dk/ Mining pool: http://www.lepool.com.cn:8088/ Mining pool: http://verus.bcmonster.com/ Most of the mining pools seem dead so i prefer to use the official verus community pool or luckpool."
    },
    {
        "prompt": "Exchange links",
        "input": "",
        "completion": "Exchange: https://atomicdex.io/ (VRSC/any listed coin) Exchange: https://app.stex.com/de/trade/pair/BTC/VRSC/1D (VRSC/BTC) Exchange: https://safe.trade/trading/vrscbtc (VRSC/BTC, VRSC/SAFE) Exchange: https://www.aacoin.com/#/trade?symbol=VRSC_BTC (VRSC/BTC) Exchange: https://graviex.net/markets/vrscbtc (VRSC/BTC, VRSC/KMD, VRSC/USD) Exchange: https://www.kuangex.com/#/exchange/vrsc_usdt (VRSC/USDT)"
    },
    {
        "prompt": "Important information",
        "input": "",
        "completion": "Komodo is a decentralized public blockchain project that is community-driven and utilizes the VerusHash 2.1 algorithm for mining. VerusCoin, the native currency of the Verus blockchain, has a fair launch with no ICO and no premine. VerusCoin's privacy features are enhanced with Sapling and zk-SNARKs zero-knowledge proofs. The block time is 1 minute, and the block reward is 24 VRSC, with a total supply of 83,540,184. The reward emission schedule started with a linear ramp and has since halved every month for the first five months and every two years after that. All rewards at or above 192 are time-locked for random release between block 129,600 and 1,181,520. The Verus blockchain's unique feature is VerusID, which is a fully functional blockchain protocol that provides numerous opportunities for identity applications. VerusCoin's website is https://verus.io/, and the project's code is available on Github at https://github.com/veruscoin. The project has three block explorers, https://explorer.verus.io/, https://explorer.vrsc.0x03.services/, and https://dex.explorer.dexstats.info/. VerusCoin's community can be found on Discord at https://discord.gg/VRKMP2S, on Twitter at https://twitter.com/veruscoin, on Medium at https://medium.com/@veruscoin, and on Reddit at https://reddit.com/r/veruscoin."
    },
    {
        "prompt": "Mining information",
        "input": "",
        "completion": "VerusCoin can be mined with CPUs, GPUs and FPGAs, solo and in pools. However, the algo is carefully designed for CPUs, and they still substantially outrange GPUs. ARM mining works in general, but although fairly efficient, without high hashrates. FPGAs can mine this coin, but don't outperform CPUs by much. "
    },
    {
        "prompt": "Can you provide me some miners?",
        "input": "",
        "completion": "Sure! Besides solo-mining with Verus Desktop or CLI wallet, you can use CCminer for CPU (efficient for most modern CPUs) or GPU that can be found on https://github.com/monkins1010/ccminer/releases or you could use NHeq miner that can be found on  https://github.com/VerusCoin/nheqminer/releases (for Windows, Linux, and MacOS). A spreadsheet to compare hashrates can be found here: https://docs.google.com/spreadsheets/d/1RrSYJDV0Mjj3X-myMC3aQDGkcipivxHsD7ZxJ3r5f_A/edit#gid=201266774 You can also compare older and current algos."
    },
    {
        "prompt": "Can you provide me the GUI Wallet for verus coin?",
        "input": "",
        "completion": "Certainly! Verus Desktop GUI wallet is a newly developed multi-coin wallet supporting VerusID https://github.com/VerusCoin/Verus-Desktop/releases (for Win, Linux, Mac and ARM Linux) the CLI wallets can be found here: https://github.com/VerusCoin/VerusCoin/releases/ There's also possibilities to test coming PBaaS functionality in this wallet."
    },
    {
        "prompt": "Can you provide me the mobile wallets?",
        "input": "",
        "completion": "A beta version of the Android mobile wallet can be found here: https://github.com/VerusCoin/Verus-Mobile/releases A beta version of the iOS mobile wallet can be accessed via this Apple TestFlight invite https://testflight.apple.com/join/ZS43lYcw The Wallets will come to the playstore and the appstore soon."
    },
    {
        "prompt": "Where is the paperwallet?",
        "input": "",
        "completion": "Our Paper Wallet can be accessed here: https://paperwallet.verus.io"
    },
    {
        "prompt": "Where and how can i bootstrap my wallet? ",
        "input": "",
        "completion": "If you need a bootstrap, you can find it here: https://bootstrap.verus.io (a guide how to apply is pinned in #community-support channel in Discord: https://discord.gg/VRKMP2S or in the HOW-TO & FAQ section of our website https://wiki.verus.io/how-to/how-to_bootstrap.md)"
    },
    {
        "prompt": "Can i get a guide on veruspay?",
        "input": "",
        "completion": "Yes! For those interested in VerusPay, a guide can be found here: https://veruspay.io/setup/"
    },
    {
        "prompt": "How can i run a pool or other services?",
        "input": "",
        "completion": "And finally for those interested in running various Veruscoin services: https://github.com/VerusCoin/VerusServicesSetup"
    },
    {
        "prompt": "What is exactly verusID?",
        "input": "",
        "completion": "VerusIDs are a fully functional blockchain protocol, not just an ID system. There is no corporation involved in the protocol, unlike most blockchain ID implementations. VerusIDs provide plenty of opportunity for identity applications. Specifically, VerusID provides: Quantum-ready friendly crypto-addresses on the worldwide Verus network and Fully Decentralized Protocol"
    },
    {
        "prompt": "What is quantum-ready in verus-network?",
        "input": "",
        "completion": "VerusIDs can be used to receive and send funds, which are controlled by the single or multi-sig addresses specified in the identity itself. If these controlling addresses or the single or multi-sig properties are changed, which can be done by the controller of the identity, all future spends of UTXOs sent to that identity follow the updated spend conditions and are subject to the updated keys. Although Verus 0.6.2 does not include quantum resistant signatures for transactions, Verus IDs are themselves resistant to quantum attack with known algorithms, and we have already started to integrate a quantum secure signature scheme, which we expect to activate on mainnet early next year. When that is available, it will be possible to change an ID and have all of the funds sent to it made retroactively quantum resistant. Verus IDs can also be used to publish ID->destination address mappings on other blockchains, but only the Verus ecosystem has the ability to revoke, recover, inherit, funds in existing UTXOs."
    },
    {
        "prompt": "What does the fully decentralized protocol offer in VerusID?",
        "input": "",
        "completion": "Anyone can create one and have complete, self sovereign control over it without permission to do so. All costs to create an ID go to miners, stakers, and ID referrers. Verus IDs are: Revocable -- each ID includes a revocation authority, which defaults to the identity self. If another ID is specified as the revocation authority it can be used to revoke the identity, which creates a valid transaction that, once mined into a block, prevents the identity from being used to spend or sign until it is recovered, effectively freezing all of its funds, for example, in the case of key theft or turnover in an organization. Recoverable -- each ID also includes a separate recovery authority, which also defaults to self. If another ID is specified as the recovery authority it can be used to recover the ID from its revoked state, with the option to alter the primary authorities used to spend and sign. Private - Each ID contains a set of zero-knowledge private addresses, which can be used as messaging, financial, or voting endpoints, and each ID also contains a content map of key-value hashes, intended to be used alongside applications and various identity policies to provide everything from private yet selectively provable claims and attestations to selectively provable components of a strong identity, attested to with a quantum secure signature when that is available. Powerful - Multiple addresses or other IDs can be defined as primary addresses, and any number of those may be required to spend, sign, or alter the identity (N of M). The revocation authority may only be altered by the revocation authority, and the same applies to the recovery authority, either of which may be another identity with its own N of M multisig controls for its primary addresses."
    },
    {
        "prompt": "What is Verus Digital Signatures?",
        "input": "",
        "completion": "Verus digital signatures, based on Verus ID, offer the first worldwide verifiable, decentralized, single or multi-sig friendly-name signatures for content such as messages and files, authentication, and attestations, with full support for revocation and recovery in case of key loss or theft. Bitcoin, which was first to enable worldwide, P2P decentralized blockchain transactions, and most of its derivatives, offer ways to sign messages with specific private keys that can be verified against public addresses. While that does offer some limited signing capability, it does not offer capabilities that can compete with centralized services offering more sophisticated key management. A single public/private key pair lacks critical capabilities to make it suitable as an actual identity, most notable and obvious being the ability to recover from loss or theft of private keys, but arguably as important are friendly name aliases, modifiable multi-sig signing, updates, privacy, and the association of signed attestations by other identities to statements about properties of the identity. Verus ID enables free verifiable digital signatures for all through the Verus ID protocol as just one of the many new capabilities it enables. It is also the foundation upon which many new applications and additional capabilities can be built. For example, using Verus ID signatures, it\u2019s possible for any journalist anywhere to sign photos, videos, and content, establish a reputation for authenticity, and counter the potential for deep-fakes to make the truth harder to find. Open source projects can now create their own identities and digitally sign their binary releases, ensuring that not only can a file be verified by hash as the one downloaded from a particular server, but by signature as the actual file initially signed by the developer or release engineer. Signatures also form the basis for any attestation of one party to the validity of another. In fact, there are so many applications for digital signatures, from things listed already, to physical entry systems, to workflow applications, to new earning opportunities that a full discussion of use cases would overwhelm these release notes. In any case, we are happy to release digital signatures for all, and we hope you enjoy using this new, simple capability, maybe even think of a new use case you\u2019d like to pursue yourself as a business opportunity on the Verus Network!"
    },
    {
        "prompt": "What is VerusHash 2.1?",
        "input": "",
        "completion": "VerusHash 2.0 was the first algorithm to significantly equalize FPGAs dominance over CPUs, once they were introduced on the Verus network. While FPGAs were intentionally not blocked completely, which would simply drive the performance battle to the higher end and further into secret, the VerusHash 2.0 algorithm was developed to explicitly equalize FPGAs and modern CPUs and has met its original goals in keeping FPGA performance for the price under 2x of CPU. VerusHash 2.1 introduces an adjustment to the equalization technology, which we expect to tilt the balance a bit more favorably towards CPUs, while still enabling FPGAs to operate on the hash algorithm with minor modifications. Verus Developers have proactively reached out to FPGA manufacturers and made the new algorithm available to them, so that everyone will have an opportunity to mine and stake when the Verus economy starts to roll and identity rewards, which will not inflate the currency, but should far exceed the potential for block rewards, begin streaming from the network."
    },
    {
        "prompt": "How do i bootstrap my wallet?",
        "input": "",
        "completion": "Verus-Desktop Procedure: In Verus-Desktop, exit your profile, by selecting the exit icon at ther top right. Wait a minute or two, allowing the wallet to close completely in the background. click help, Bootstrap VRSC. That opens up a new window. Follow the instructions and when finished successfully, select your preferred profile and enter Verus Desktop. Verus CLI Procedure: Go to the folder where your daemon is extracted (standard verus-cli) Shutdown verusd and wait for it to close completely doubleclick fetch-bootstrap in your file browser. Follow the instructions and when finished, start your verusd daemon as usual."
    },
    {
        "prompt": "What are the Advanced Issue Resolving Procedure regarding the wallet bootstraping?",
        "input": "",
        "completion": "Make sure your wallet is not active. If you already had you wallet running, backup essential files: a. Go to VRSC Wallet location b. copy wallet.dat to a SAFE location c. copy VRSC.conf to a SAFE location d. Verify that both files are copied to your safe location. Make sure the latest version of your Wallet for Verus is installed a. Download the latest Verus Wallet from link 1, supplied above. b. Verify the SHA256 checksum & signature of your download, to verify you have an untampered installer. c. extract the file you just downloaded to a suitable location. On MacOS and Linux you will have extracted an AppImage which can be run directly. Windows users need to run the installer. Installing the bootstrap: a. Download the bootstrap from Link 2. (For Windows a zip archive is available to accomodate native extraction. Linux and MacOS users can use the tar.gz archive) b. (Optional, but recommended) Verify the md5, sha256 or sha512 checksum and the signature of your download, to verify that you downloaded an untampered Bootstrap archive. c. Remove all files and folders from VRSC Wallet Location except wallet.dat, debug.log, VRSC.conf and if applicable VRSC-bootstrap.*. d. Extract the downloaded archive to VRSC Wallet location. Make absolutely sure the folders blocks and chainstate are extracted into the correct folder. If the end up in a different folder (eg. VRSC-bootstrap-folder) move them to VRSC Wallet location. f you had a VRSC wallet running before, restore essential files: a. Go to VRSC Wallet location b. Verify that your wallet.dat is bigger than the one in this folder (if any is present) c. copy wallet.dat from your SAFE location. Now Start your wallet."
    },
    {
        "prompt": "How do i verify my new downloaded wallet?",
        "input": "",
        "completion": "Using Verus-Desktop: download the new version, extract the archive, verify the signature using the data in the *.signature.txt-file through your existing Verus-Desktop, VerusID tab, Verify Signed Data and choose to verify a file. Only continue when this verification returns True. Stop your Verus-Desktop Wallet, Install the verified installer on windows. Start your wallet. Using CLI Wallet: download the new version, extract the archive, verify the signature using the data in the *.signature.txt-file with the command ./verus verifyfile \"address or identity\" \"signature\" \"filepath/filename\" command. Only continue when this verification returns True. stop your verusdaemon verus stop, extract the verified archive to your current CLI-wallet location. Start your wallet (verusd)."
    },
    {
        "prompt": "How do i backup my wallet?",
        "input": "",
        "completion": "In Verus Desktop: Go to Settings, Coin Settings and click Export native wallet backup. Confirm that you want to export after reading the pop-up. The green message will tell you where the backup is and what it's name is. In linux or MacOS CLI: run ./verus z_exportwallet '<mywalletexport>' and in Windows CLI you just run verus z_exportwallet '<mywalletexport>'"
    },
    {
        "prompt": "How do i restore my wallet from a backup?",
        "input": "",
        "completion": "There are 2 ways to do it, first way is to use your backup of your wallet.dat file. Stop verusd. For Windows-Desktop or Agama, just exit and wait for it to close completely. For the linux cli run ./verus stop, or for the windows cli run verus stop. Once your wallet is finished closing copy the backup of your wallet.dat file from your backup location to the directory listed in the start of this document (see above). Now restart your wallet by launching Verus Desktop, Agama or running verusd for the CLI. Second way is to use your walletexport file, Note: The filename you replace<mywalletimport> with, can only contain letters and figures, no other characters, so it cannot have an file-extension Attention: The command z_importwallet triggers the wallet to rescan in order to make all transactions to the freshly imported wallet addresses visible. Rescanning your wallet may take a considerable time, during which your wallet may not respond to other commands. Please be patient. The <PATH> in the z_importwallet command needs to be the full absolute path to the file. replace LOGINNAME with the actual loginname. In Verus Desktop: Go to Settings, Coin Settings and click Import native wallet backup. Click Choose file, browse to your backup file, select it and click Open. Click Import to start the inport process. In Linux or MacOS CLI run ./verus z_importwallet '<PATH><mywalletimport>'. Or in Windows CLI run verus z_importwallet \\'<PATH><mywalletimport>\\'"
    },
    {
        "prompt": "How do i change Verus-Desktop from Lite Mode to Native Mode?",
        "input": "",
        "completion": "Make sure you have your seed phrase and password you use to log into your Lite mode wallet available. First of all make a notition of your address and balance of VRSC you have in your wallet, before closing Verus Desktop. Make sure the latest version of Verus-Desktop is installed. Download the latest Verus-Desktop. Verify the signature of your download, so you have an untampered installer. https://verus.io/verify-signatures. Run the file you just downloaded to install it. Installing the bootstrap: Download the bootstrap from https://bootstrap.verus.io Verify the SHA256 checksum of your download, to verify you have an untampered Bootstrap. Unpack the downloaded archive to VRSC wallet & data location. Getting Verus-Desktop ready for Native mode: Start Verus-Desktop and enter your profile (if not loaded automatically). If present in your profile, deactivate Verus Lite. Click + Add Coin, select Verus from the dropdown list and continue. Select Native and optionallu tick the options Start staking, Start Mining and fill in the amount of threads to mine with. Click Add Coin. Verus-Desktop will add Verus as Native chain to your screens. You may get a red warning message about Zcash params. (Verus Desktop will detect if you have the necessary ZCash parameter files and download them if needed) As soon as the download is finished, Verus-Desktop will continu and bring you into your wallet. It will automatically start to synchronize the blockchain. Since we already put the majority of the chain in place, this will take just a few minutes. Now you just want to import the lite wallet address in verus desktop native. Just ask me that and i will let you know!"
    },
    {
        "prompt": "How to import your Lite wallet address into your native Verus Desktop?",
        "input": "",
        "completion": "Important General Information\nverus command \"<userinput>\" needs to be entered literally, with <userinput> replaced by your specific userdata. So if the text directs you to use for example \"<Public Address>\", you replace that (including the < and >) with the address,\nso it looks similar to this: \"RYX6RYU3AAvwVCNyNM4cVyGUhSMUPvKs3r\".\nThis method is confirmed to work on Verus and all Komodo assetchains.\nPrerequisites\nIn order to convert your seedphrase into a Private key (WIF), you need to have a running native wallet first, that is fully synchronized. The earliest wallet that supports these functions is Verus Desktop v0.6.4-beta-1.\nIf needed, use this guide to quickly synchronize your wallet: https://wiki.verus.io/#!how-to/how-to_bootstrap.md\nConverting Seed to WIF\nIf you have a seed, you can retrieve your Private key (WIF) by having the Verus Desktop wallet convert it for you.\nTo convert your seed phrase in Verus Desktop, go to settings --> Coin Settings, select the chain you want to use in the top-right corner and enter the following command:\nrun convertpassphrase \"word_1 word_2 word_3 ... word_n\"\nNote: Make sure you replace Word1 word2 word3 ... word_n with the actual seedphrase (12 or 24 words) of the address you want to import!\nYou will receive a response similar to this:\n{\n\"walletpassphrase\": \"seedphrase\",\n\"address\": \"RYX6RYU3AAvwVCNyNM4cVyGUhSMUPvKs3r\",\n\"pubkey\": \"02ffc2f4b071afdec631e3fb7d435a0047be14a81ea1a269e4206b0068c0c1fa6f\",\n\"privkey\": \"d899ed88e9ee2e90c2cf51cb47e7b4495ec1e1cb10763bb1c111b0bde48bf86c\",\n\"wif\": \"UwGb5KvGPfMUr1tu74Desjh87ZeJM4wq5goLyThcogeLifc5aJqT\"\n}\nCopy that information and store it somewhere SAFE. With this information anyone having access to it will have full control over that address.\nThe 52-character string after \"wif\": that is shown, is what you want to import in the next step.\nImporting a single WIF for a public (transparent) address\nTo import your address, go to settings --> Coin Settings, select the chain you want to use in the top-right corner and enter the following command:\nrun importprivkey \"<wif>\" \"\" true\nReplace <wif> with the actual wif you got from the convertpassphrase command earlier.\nNote: Don't use the WIF from the example above, but use the one from the CLI-interface in Verus Desktop.\nNote: The GUI wallet will not show any progress on the import and may give messages that the RPC daemon is not reacting. It will take quite some time for the process to finish in the background, especially if the address has many transaction on it.\nImporting multiple WIFs in one batch for public (transparent) addresses\nTo import your address, go to settings --> Coin Settings, select the chain you want to use in the top-right corner and enter the following command for every WIF except for the final one:\nrun importprivkey \"<wif>\" \"\" false\nImport the final WIF with this command:\nrun importprivkey \"<wif>\" \"\" true\nThe last command triggers the chain to rescan all addresses in your wallet, including all the addresses you just imported.\nReplace <wif> with the actual wif (like the one you got from the convertpassphrase command earlier).\nNote: Don't use the WIF from the example above, but use the one from the CLI-interface in Verus Desktop.\nThe GUI wallet will not show any progress on the import and may give messages that the RPC daemon is not reacting. It will take quite some time for the process to finish in the background, especially if the address has many transaction on it.\nImporting a single WIF for a private address\nTo import your address, go to settings --> Coin Settings, select the chain you want to use in the top-right corner and enter the following command:\nrun z_importkey \"<wif>\" \"yes\" 1\nReplace <wif> with the actual wif you got from the convertpassphrase command earlier.\nNote: Don't use the WIF from the example above, but use the one from the CLI-interface in Verus Desktop.\nThe GUI wallet will not show any progress on the import and may give messages that the RPC daemon is not reacting. It will take quite some time for the process to finish in the background, especially if the address has many transaction on it.\nImporting multiple WIFs in one batch for private addresses\nTo import your address, go to settings --> Coin Settings, select the chain you want to use in the top-right corner and enter the following command for every WIF except for the final one:\nrun z_importkey \"<wif>\" \"no\"\nImport the final WIF with this command:\nrun z_importkey \"<wif>\" \"yes\" 1\nThe last command triggers the chain to rescan all addresses in your wallet, including all the addresses you just imported.\nReplace <wif> with the actual wif (like the one you got from the convertpassphrase command earlier).\nNote: Don't use the WIF from the example above, but use the one from the CLI-interface in Verus Desktop.\nThe GUI wallet will not show any progress on the import and may give messages that the RPC daemon is not reacting. It will take quite some time for the process to finish in the background, especially if the address has many transaction on it."
    },
    {
        "prompt": "How do I install the Verus CLI (command line interface) wallet on a brand new (hosted) Linux system?",
        "input": "",
        "completion": "Notice: Read it completely before use.\nImportant General Information\nwallet.dat location on Linux: ~/.komodo/VRSC\nProcedure:\nFirst make sure your system is up to date:\nsudo apt-get update && apt-get upgrade -y\nI suggest not to use the root account. I you have not yet done, set up a new user\nsudo adduser newusername\nsudo usermod -aG sudo newusername\nSwitch to new username\nsu - newusername\nTest the your new user actually has root (SuDo) access, e.g.:\nsudo ls -la /root\nYou should get some lines like this:\ndrwx------ 6 root root 4096 Jul 3 15:56\nDownload & install the wallet binaries:\nwget https://github.com/VerusCoin/VerusCoin/releases/download/v0.9.3/Verus-CLI-Linux-v0.9.3-amd64.tgz\nThe downloaded archive contains another archive and a signature text file, enabling the archive within to be verified (You'll need a running wallet to do that)\nAlso: Verify the URL to the latest version from the Download latest Wallet above.\ntar -xvf Verus-CLI-Linux-v0.9.3-amd64.tgz\nNow extract the wallet archive:\ntar -xvf Verus-CLI-Linux-v0.9.3-amd64.tar.gz\nChange directory to verus-cli\ncd verus-cli\nFetch parameters, takes time, more on slow Internet connection\n./fetch-params\nCreating the chaindata directory\ncd ~\nmkdir -p .komodo/VRSC\ncd ~/.komodo/VRSC\nDownload the block-chain bootstrap, this considerably speeds up synchronisation of the block-chain from days to minutes... (optional)\nwget https://bootstrap.verus.io/VRSC-bootstrap.tar.gz\ntar -xvf VRSC-bootstrap.tar.gz\nInstall libraries for Verus\nsudo apt-get install libcurl3 g++-multilib -y\nInstall Tmux a terminal multiplexer with which you can run threads in the background see https://en.wikipedia.org/wiki/Tmux\nsudo apt-get install tmux -y\nStart tmux:\ntmux\nLaunch Verus Daemon with or without number of threads\n(usually number of threads equals number of cores or double of that if the processor support hyper threading well)\n~/verus-cli/verusd -gen -genproclimit\n~/verus-cli/verusd -gen -genproclimit=24\nOnce mining is operational \u00e2\u20ac\u201c again this may take some time \u00e2\u20ac\u201c\nyou\u00e2\u20ac\u2122ll see: 256 mega hashes complete - working\nthen detach tmux\n[ctrl]&b d\nDisable login with Root User\n(make sure your newly created user login works and has sudo rights)\nsudo nano /etc/ssh/sshd_config\nFind: PermitRootLogin yes\nAnd set to\nPermitRootLogin no\nApply new settings:\nsudo systemctl restart sshd"
    },
    {
        "prompt": "How do i shield verus via the CLI?",
        "input": "",
        "completion": "Note: Shielding is no longer required for coinbase rewards after block 800200. Earlier timelocked coins will still need to be shielded in order to use them.\n\nImportant General Information\nverus command \"<userinput>\" needs to be entered literally, with <userinput> replaced by your specific userdata. So if the text directs you to use for example \"<Public Address>\", you replace that (including the < and >) with the address,\nso it looks similar to this: \"RYX6RYU3AAvwVCNyNM4cVyGUhSMUPvKs3r\".\n\nGeneral remarks on CLI wallet:\nOn Windows command line enter the commands as shown without the surrounding quotation marks\nIn Linux shell preceed the commands without surrounding quotation marks with ./\nIn MacOS shell preceed the commands without surrounding quotation marks with ./\nExample: the windows version verus listtransactions transforms in Linux or MacOS to ./verus listtransactions.\n\nGeneral remarks on Windows command line formatting:\nThe CLI help shows the command format for Linux and MacOS.\nFor windows substitute the shown '-character with the \"-character.\nFor windows substitute the shown \"-character with the \\\"-characters.\n\nProcedure:\nYou must first \"shield coins\" (send from a transparent R-addr to a shielded zaddr) to be able to use them in staking, when they first unlock.\nThis is part of the Zcash protocol itself. The commands below assume you are in the Verus source code directory\n\nverus z_shieldcoinbase\n\nYou can either use an existing zaddr or use a new zaddr. To make a new zaddr:\n\nverus z_getnewaddress\n\nUse the address the above command outputs in the z_shieldcoinbase command\n\nTo shield all coinbase in your wallet, you can use \"*\" (quotes are important) and zaddr that is getting the funds:\n\nverus z_shieldcoinbase \"*\" <YOUR zs-ADDRESS>\n\nTo just shield a single address, specify that as the first argument:\n\nverus z_shieldcoinbase <YOUR R-ADDRESS> <YOUR zs-ADDRESS>\n\nOnce the funds have moved to the zaddr and are confirmed, you can freely send them to any address, They will be eligble for staking id sent to a transpartent address (R-address).\n\nTo send from a certain zaddr to a transparent address, use z_sendmany. The following command sends 10 Verus to a given transparent address, ID address or ID-name.\nExample: verus z_sendmany zcZpfuzzJqmNJ3fUJekvbnyuxuJe9eAURAHrMCvN2Nr7VuWjakb1LEw6j2etPcCnr45BRot7MaMbipuS5da162BfuUkFGxx '[{\"amount\":10,\"address\":\"Verus Coin Foundation@\"}]'"
    },
    {
        "prompt": "How do i join verus testnet?",
        "input": "",
        "completion": "Important General Information\nVRSCTEST data location:\nLinux GUI: ~/.komodo/VRSCTEST\nMac OS: /Users//Library/Application Support/Komodo/VRSCTEST\nWindows 10: %AppData%\\Roaming\\Komodo\\VRSCTEST\\\n\nGeneral remarks on CLI wallet:\nOn Windows command line enter the commands as shown without the surrounding quotation marks\nIn Linux shell preceed the commands without surrounding quotation marks with ./\nIn MacOS shell preceed the commands without surrounding quotation marks with ./\nExample: the windows version verus listtransactions transforms in Linux or MacOS to ./verus listtransactions.\n\nGeneral remarks on Windows command line formatting:\nThe CLI help shows the command format for Linux and MacOS.\nFor windows substitute the shown '-character with the \"-character.\nFor windows substitute the shown \"-character with the \\\"-characters.\n\nNecessary files:\nLink 1: Download latest Wallet\n\nProcedure:\nJoining Verus testnet to test the latest capabilities before they are released to mainnet or simply test if your goals are possible without spending VRSC (testnet coins hold no value) is easy.\n\nDownload a wallet\nThe first thing you need is a VRSC wallet. The CLI-wallet and Verus Desktop GUI wallet are available on the link above for Windows,\nLinux and MacOS. If you already have a wallet verify that the wallet is the most recent version and update if needed.\n\nVerus Desktop Wallet\nStart your Verus Desktop wallet.\nIf you have never run Verus testnet on your system before:\nGo to settings (cogwheel icon) and select General Settings.\nSelect Enable VRSCTEST.\nClick Save Changes\nRestart Verus desktop\nWhen logged in, click Add Coin, select Verus Testnet and click Continue.\nSelect the startup parameters you desire (Native (Lite mode is not available on testnet), Staking, mining (specify number of threads), reindex blockchain and/or rescan wallet) and click Add Coin.\nCLI wallet\n1. start CLI walletdaemon using these parameters:\nverusd -chain=VRSCTEST\nAny extra parameter that you are used to for VRSC (like -mint or -pubkey=) can be appended as well.\n2. commands through the CLI are in the following format:\nverus -chain=VRSCTEST\nThe only difference with the normal VRSC chain is the -chain=VRSCTEST option, that is added."
    },
    {
        "prompt": "How do I know when an immature block will \"unlock\" (mature)?",
        "input": "",
        "completion": "Get the values of the current block height (\"blocks\") and the \"blockstomaturity\" the distance to maturity of the transaction in question. (i.e. the number of blocks between current block height and where it unlocks. You can see the number is decreasing all the time, and if you add it to the current block height you'll see a constant.)\nApply this formula: blockstomaturity / 1440 = days to maturity (unlocking)\ne.g. 925558/1440=643 days"
    },
    {
        "prompt": "I'm mining since XYZ with XYZ, why I haven't found a block yet?",
        "input": "",
        "completion": "One block = 12 coins (as now)\nNetworkHashrate = retrieved by getmininginfo command from </>CLI\nLocalHashrate = retrieved by getmininginfo command\nBlockTime = 60 seconds (average)\nReal example with - 31 threads AMD Ryzen 5950x @ 4.4Ghz -\nBear in mind that these are average times to find a block. In real life you may hit a block much sooner or later after finding the last. In the long run it averages out to the values predicted."
    },
    {
        "prompt": "How do I direct all my solo mined rewards to a single Verus wallet?",
        "input": "",
        "completion": "Verus Wallet.dat, Chaindata & VRSC.conf standard locations\nLinux: ~/.komodo/VRSC\nMac OS: ~/Library/Application Support/Komodo/VRSC\nWindows 10: %AppData%\\Roaming\\Komodo\\VRSC\\\nOS independent through Verus Desktop: Click help, Show Verus data folder (default)\nPrerequisites\nHave a native VRSC wallet running\nIn Verus Desktop\nIn Verus Desktop, there is at this moment no way to enter an address to mine to. However, editing the VRSC.conf can be done to achive our goal:\nIn the receive window of your wallet, click the hamburger (three vertical dots) next to the address you want to receive your rewards in and click Copy Public Key. Close down Verus Desktop.\nEdit VRSC.conf(see standard locations at the top) and add the line pubkey=THELONGSTRINGCOPIED. Save and exit.\n* Start Verus Desktop as you normally do.\n\nIn Agama Wallet\nStep 1 - First get your wallet address you want to mine to:\n* If you don't have an address, click \"Receive\", click \"Get New Address\" and choose \"Transparent Address\" from the drop down.\n\nStep 2 - Next we need to retrieve our pubkey,\n* click on the hamburg next to the address that you want to receive the rewards in and click copy pubkey\n\nStep 3 - Set your PubKey\nGo to 'Settings', 'App Config (config.json)' and enter your pubkey(THELONGSTRINGCOPIED) into the 'Pubkey VRSC mining key' field. Click 'Save app config' to save these settings.\n* Restart Agama\n\nIn Verus CLI\nStep 1 - First get your wallet address you want to mine to:\nYou can find an address if you already have previous transactions, or you can create a new one. To find an address from a previous transaction, use the command line verus listtransactions and copy the address found after \"address\".\nTo generate a new wallet address, use the command line verus getnewaddress and a new address will be created.\n\nStep 2 - Next, using your new address, enter the command with verus-cli verus validateaddress. From the output find the long string after \"pubkey\", copy without the quotation marks.\n\nStep 3 - Set your PubKey\nOption 1: use this pubkey when starting your daemon by adding the following line to the end of your command, just before the \"&\" sign: -pubkey=THELONGSTRINGCOPIED Option 2: edit your VRSC.conf and add the line pubkey=THELONGSTRINGCOPIED. Then start your whallet as you are used to.\n\nYour rewards will now be mined to that address. It would be a good idea to keep notes and associate the wallet address with the pubkey...also to double check that you did validate the correct pubkey for the wallet address, making sure you made no errors."
    },
    {
        "prompt": "How to consolidate multiple wallet.dat files in one?",
        "input": "",
        "completion": "Verus Wallet.dat, Chaindata & VRSC.conf standard locations\nLinux: ~/.komodo/VRSC\nMac OS: ~/Library/Application Support/Komodo/VRSC\nWindows 10: %AppData%\\Roaming\\Komodo\\VRSC\\\nOS independent through Verus Desktop: Click help, Show Verus data folder (default)\nProcedure\nWith one of the wallets loaded, issue the following command: z_exportwallet FILENAME (ie z_exportwallet export_instance01, the filename cannot have a . in it.)\nCopy the generated file to the machine that hosts your main wallet. This file will either be in the same directory as the config file and wallet.dat file, or in a location specified by exportdir in VRSC.conf.\nIssue the following command (on the \"main\" verus-cli): z_importwallet /LOCAL_PATH/EXPORTFILENAME (ie /home/user/export_instance01)\nnote: Older versions of verusd required expordir to be set in VRSC.conf before exporting a wallet. If you get an error about your export directory not being set, please upgrade immediately.\n\nThese commands can be given in:\nCLI wallet: ./verus z_exportwallet FILENAME& ./verus z_importwallet /LOCAL_PATH/FILENAME\nVerus Desktop in settings, coin settings: run z_exportwallet FILENAME& run z_importwallet /LOCAL_PATH/FILENAME\nVerus Agama in settings, <CLI>: z_exportwallet FILENAME& z_importwallet /LOCAL_PATH/FILENAME"
    },
    {
        "prompt": "What reward do I get for staking (PoS) or Mining (PoW) a block?",
        "input": "",
        "completion": "The reward received depends of the blocknummer:\n\nEra 1:\n1st week: Block 0 - 10080 ==> 0 to 384 VRSC reward ==> 16,588,800 VRSC total this period (reward rising linearly and changing each block)\n\nEra 2:\n1st month: Block 10080 - 53279 ==> 384 VRSC reward ==> 8,294,400 VRSC total this period\n2nd month: Block 53280 - 96479 ==> 192 VRSC reward ==> 4,147,200 VRSC total this period\n3rd month: Block 96480 - 139679 ==> 96 VRSC reward ==> 4,147,200 VRSC total this period\n4th month: Block 139680 - 182879 ==> 48 VRSC reward ==> 2,073,600 VRSC total this period\n5th month: Block 182880 - 226079 ==> 24 VRSC reward ==> 1,036,800 VRSC total this period\n\nEra 3:\nYears 1+2: Block 226080 - 1277279 ==> 24 VRSC reward ==> 25,228,800 VRSC total this period\nYears 3+4: Block 1277280 - 2328479 ==> 12 VRSC reward ==> 12,614,400 VRSC total this period\nYears 5+6: Block 2328480 - 3379679 ==> 6 VRSC reward ==> 6,307,200 VRSC total this period\n. . . halving indefinitely every 1051200 blocks (approximately 2 years)\n\nAll rewards equal or over 192 VRSC are time locked to mature at a random block between 129,600 and 1,181,520"
    },
    {
        "prompt": "What's the value of VRSC?",
        "input": "",
        "completion": "Use with: https://veruspay.io/api/ for simple USD VRSC price, or choose options now added!\n\nOptions (values are case insensitive):\ncurrency - BTC or Fiat code like USD or CAD\nticker - ARRR or VRSC\ndata - volume or price - volume only relevant if exchange is defined\nexch - name of supported exchange, e.g. digitalprice - If no exchange, price is average of all supported for that coin.\n\nIf no options are set, the default is average price in USD fiat of VRSC.\n\nExamples:\n\nhttps://veruspay.io/api/ - This get's the current price of VRSC in USD, weighted against 24hr volume across all exchanges. This is the default return.\nhttps://veruspay.io/api/?exch=digitalprice&currency=cad - This will get the current price on digital price for VRSC and display in CAD fiat\nhttps://veruspay.io/api/?currency=btc - This will get the average price of VRSC in BTC, weighted by 24 hr volume across both exchanges\nhttps://veruspay.io/api/?currency=cad - This gets the current average price of VRSC in CAD, weighted by 24 hr volume across both exchanges\nhttps://veruspay.io/api/?exch=cryptobridge&data=volume - This will get the 24 volume of VRSC on CryptoBridge in the default currency of USD\nhttps://veruspay.io/api/?exch=cryptobridge&data=volume&currency=btc - This does the same but with BTC as the currency result\nhttps://veruspay.io/api/?currency=cad&ticker=arrr - Gets the average price of ARRR."
    },
    {
        "prompt": "Is mining profitable?",
        "input": "",
        "completion": "Mining VRSC with Verushash is at this time one of the most profitable coins to mine with your CPU.\nIf you want to know how profitable it is, you need to know a few important details about your own conditions."
    },
    {
        "prompt": "What hardware will I use to mine with?",
        "input": "",
        "completion": "1. CPU - If that is a fairly modern CPU with AES and AVX instructions built in.\nThis will be true if your processor is produced in 2013 or later. For processors between 2008 and 2012 you need to check the specifications.\nOlder processors can still mine, but they will not perform well.\n2. GPU - It is possible to mine with fairly modern Nvidia GPU's, but since Verushash uses specific functions from the\nmentioned AES and AVX instruction sets, they will perform better than old CPUs, but worse than modern CPUs.\n3. FPGA - Many of these semi-specialized machines can be reprogrammed to mine VRSC. They don't have the same power per processor as a CPU, but they often have multiple processors running parrallel. The stronger ones can outperform a CPU easily, but need a lot of power to do so.\n\nIf you know the answer to the hardware, you can look op a comparable one in the Spreadsheat from Link 1, to give you an\nidea of the performance.\n\nIf you know your energy price also, you can calculate an estimation of how much your hardware can earn you at this moment.\n\nIf you have to get new hardware just to mine, think about it for a moment: would you have bought new hardware anyway? If so,\nyou can use this information to get an idea what kind of hardware you want to buy."
    },
    {
        "prompt": "How do you know a block was minted (staking reward)?",
        "input": "",
        "completion": "You can see the following characteristics:\n1. a block hash without a lot of leading zeros\n2. a last transaction that in your wallet has no fee, is from the same address that it is to, which is also the address the coinbase is to (easiest confirmation) and\n3. The POS difficulty is encoded in the low 32 bits of the nonce with 96 of the next nonce bits as zero/reserved, then a random hash at the top half"
    },
    {
        "prompt": "How does staking work?",
        "input": "",
        "completion": "You'll start staking with the first VRSCs that are not time locked + in your public / transparent wallet + 150 blocks old (or about 2.5 hours).\n\nYour chances to win a block: Your coins in your public/transparent wallet / Total staking supply in public/transparent wallets (which is max. about 485.000 VRSC from the first (sunrise) week as long as the rewards were below 192)\n\nRemember: There will be only one reward every minute. It\u00e2\u20ac\u2122s going to be either mining or staking, so on average 720 mining and 720 staking rewards every day.\n\nExample: I have 300 coins in a public/transparent address / 300.000 in public wallets (let's assume some part is lost/not staking or in private wallets), so that would be 1/1000 x 720 of a chance or around average 1,4 days for a staking block rewards. Hash power does not influence staking reward.\n\nRegarding the Verus debug.log: \u00e2\u20ac\u0153 No eligible staking transaction found\u00e2\u20ac\u0153. It means that you are staking but have not received a reward yet. @miketout will change the message soon.\n\nRegarding time locked coins:\nThe Zcash protocol requires you to send all coins received by mining (on wallet, not pool mining) or staking (reward transactions, also on wallet, not pool staking) once unlocked to a private address and then to a public/transparent address before you can use them either for staking or for making transactions (that\u00e2\u20ac\u2122s how you make use of your rewarded coins = coinbase coins). So, once your coins loose their time lock, you can unlock those coins as described in [\"Shield Verus Coins via Command Line Interface]\"(#!how-to/how-to_shield_via_cli.md). Once you've transferred the coins from your private address back to (one of) your public / transparent address(es) and you\u00e2\u20ac\u2122ll automatically start staking."
    },
    {
        "prompt": "How can I tell the difference between staked and mined coins?",
        "input": "",
        "completion": "CLI:\nYou can check this in the VerusExplorer https://explorer.verus.io/\n1. Check last 10 transactions in the </>CLI. Use listtransactions.\n2. Copy the blockhash of the received award"
    },
    {
        "prompt": "3. Add it at the end of https://explorer.verus.io/api/getblock?",
        "input": "",
        "completion": "Hint: An example: https://explorer.verus.io/api/getblock?hash=9e6fa91356211a554c580c90ec9c2067dd420ff74c7d33481775793f7b0e7f03 \u00e2\u20ac\u201c so this one is minted....\n\nVerus Desktop:\nIn Verus Desktop, simply go to your Mining Dashboard and enter into Verus details.\nScroll down to the bottom of the page. It will list the rewards as mined or minted in green.\nThe TXIDs that staked the minted rewards are shown in blue.\n\nVerus Agama (Deprecated):\nIn the GUI you can also click yourself thru to that information.\n1. Click on the magnifying glass all the way on the right of the transaction.\n2. On the pop-up click on \"Open in the VRSC Explorer\" bottom left.\n3. In the VRSC explorer click on the block hash value (in light blue) \u00e2\u20ac\u201c now the block hash is displayed as the title of the box.\n4. Click on the info \"i\" on the right and click on \"search\": in the result displayed for blocktype 'mined' or 'minted'.(edited)"
    },
    {
        "prompt": "How can I check my immature balance in a graphical Wallets?",
        "input": "",
        "completion": "Verus Desktop\nVerus Desktop shows your immature balance in your wallet dashboard, between the Transparant Balance and Private Balance.\n\nAgama (Deprecated)\nIn the Agama wallet click on the hamburger menu (the three stripes) on the top right\nclick on Settings\nclick on the item </> CLI\nSelect VRSC as coin\nType the following command: getwalletinfo\nclick Execute\nscroll down and find \"immature_balance\": which will give you the amount of time-locked coins in your wallet."
    },
    {
        "prompt": "How do I unshield my coin rewards and get them staking on CLI?",
        "input": "",
        "completion": "Important General Information\nverus command \"<userinput>\" needs to be entered literally, with <userinput> replaced by your specific userdata. So if the text directs you to use for example \"<Public Address>\", you replace that (including the < and >) with the address,\nso it looks similar to this: \"RYX6RYU3AAvwVCNyNM4cVyGUhSMUPvKs3r\".\n\nRemarks on Windows command line formatting:\nThe CLI help shows the command format for Linux and MacOS. On the native windows command prompt (cmd.com) the formatting is different.\nIn windows command prompt, substitute the shown '-character with the \"-character. In windows command prompt, substitute the shown \"-character with the \\\"-characters.\n* In windows command prompt, omit the preceding ./.\n\nNote: As an example, in Linux the command:\n./verus z_sendmany <my_private_address_without_quotationmarks> '[{\"address\":\"<my_transparent_address>\",\"amount\":<95.9998>}]'\nshould be entered on the Windows command prompt as:\nverus z_sendmany <my_private_address_without_quotationmarks> \"[{\\\"address\\\":\\\"<my_transparent_address>\\\",\\\"amount\\\":<95.9998>}]\"\n\nProcedure:\n1) ./verus z_shieldcoinbase \"*\" my_private_address_without_quotationmarks\nthis capture all so called coinbases, i.e. mined coins that are not yet staking.\nyou have to wait 100 blocks (minutes) after receiving them before being able to move them.\nwait for a few minutes for the tx to be confirmed.\n2) ./verus z_getbalance <my_private_address_without_quotationmarks> this is to substract the 0.0001 VRSC fee from the balance in the next step.\n3) ./verus z_sendmany <my_private_address_without_quotationmarks> '[{\"address\":\"<my_transparent_address>\",\"amount\":<95.9998>}]'\namount is minus 0.0001 from balance and without quotation marks.\n(4) to verify: ./verus z_gettotalbalance\nafter a few minutes (operations from private addresses are a bit time consuming)"
    },
    {
        "prompt": "What should I do if I end up on my own fork because of a network issue or having an old version of the wallet?",
        "input": "",
        "completion": "This solution can be solved in 2 ways: you can simply install the latest bootstrap file (less work, big download) or search manually for the forked block and invalidate that block (time-consuming, no download needed.)\n\nProcedure 1 (Easy, installing bootstrap)\nFor all GUI or CLI users.\n1. Stop the wallet/mining process by cleanly shutting down the program.\n2. Update your wallet if necessary.\n3. Follow the procedure in HOW-TO Backup, Install or Update and Bootstrap your wallet.md to efficiently rectify the problem.\n4. Do not be dismayed if it seems that your mining rewards suddenly seem to come to a halt. Remember, when you mine to the wrong chain rewards can come in very quickly, but they are worth nothing.\n\nProcedure 2 (Time consuming, no extra download)\nVerus-Desktop\nThe commands are all entered in the Native Client Terminal that is located under Settings, Coin Settings.\nSearch for the earliest block that not matches the blockchain:\nrun getblockhash <suspected blocknumber> will show you the blockhash for the blocknumber you filled in\nThe response shown in the Native Client Terminal will be similar to this:\n5cc7844973fb95ef17f1772ea4aba579f0d8273fb0ee6064cd8e707d1056c646\nCheck the blockhash your command gave you against the blockhash the explorer shows.\nIf the blockhash from the explorer is different than yours, repeat steps 2 & 3 until you find the earliest block that is different.\nUse the earliest incorrect blockhash from your system to invalidate that block:\nrun invalidateblock <earliest incorrect blockhash>\nThe Native Client Terminal will not give feedback on this command.\nNow use the correct blockhash that the explorer gave you for the block you just locally invalidated:\nrun reconsiderblock <correct blockhash>\nAgain the Native Client Terminal will not give feedback on this command.\nOnce your wallet connects to a node that is on the correct chain, it will quicly synchronize.\nIf needed you can either restart your wallet to force new connections or manually disconnect bad nodes.\nCLI\nSearch for the earliest block that not matches the blockchain:\n./verus getblockhash <suspected blocknumber> will show you the blockhash for the blocknumber you filled in\nThe response will be similar to this:\n5cc7844973fb95ef17f1772ea4aba579f0d8273fb0ee6064cd8e707d1056c646\nCheck the blockhash your command gave you against the blockhash the explorer shows.\nIf the blockhash from the explorer is different than yours, repeat steps 1 & 2 until you find the earliest block that is different.\nUse the earliest incorrect blockhash from your system to invalidate that block:\n./verus invalidateblock <earliest incorrect blockhash>\nThe deamon will not give feedback on this command.\nNow use the correct blockhash that the explorer gave you for the block you just locally invalidated:\n./verus reconsiderblock <correct blockhash>\nAgain the daemon will not give feedback on this command.\nOnce your daemon connects to a node that is on the correct chain, it will quicly synchronize.\nIf needed you can either restart your daemon to force new connections or manually disconnect bad nodes."
    },
    {
        "prompt": "What are the mining pools that I can join?",
        "input": "",
        "completion": "luckpool.net\npool.verus.io\nzergpool.com\nwattpool.net\nvrsc.ciscotech.dk\nwww.lepool.com.cn\nwww.zhuaao.com\naod-tech.com\nverus.alphatechit.co.uk\nMadCatMining (currently inactive)"
    },
    {
        "prompt": "what are the staking pools that I can join?",
        "input": "",
        "completion": "Dudezmobi\nGinasis\nA staking pool has advantages and disadvantages over solo staking:\n\nDisadvantages:\n1. It causes centralization on the network\n2. The pool owner is in control of all funds in the pool, including yours.\n3. You need to trust the pool operator to share the rewards fairly.\n4. You need to trust the pool operator to release your funds back to you on request.\n5. You need to trust the pool operator to securely run the pool 24/7.\n\nAdvantages:\n1. You don't need to run your wallet 24/7 in native mode."
    },
    {
        "prompt": "What are the remarks on Windows command line formatting?",
        "input": "",
        "completion": "The CLI help shows the command format for Linux and MacOS. On the native windows command prompt (cmd.com) the formatting is different.\nFor windows substitute the shown '-character with the '-character.\nFor windows substitute the shown '-character with the \\'-characters."
    },
    {
        "prompt": "How do i pool mine on low priority on my windows computer?",
        "input": "",
        "completion": "In order to let your mining not interfere with other processes running on your PC, we'll need to deprioritize\nthe mining process. This will result in your miner throttling down whenever your PC needs processing power.\nPeople have reported to be able to use CPU-heavy applications, like games, without the miner interfering, with\nthis method.\nBecause the Verus wallet (GUI and CLI) does a lot more than mining, it is not recommended to use this for a\nsolo-mining setup. This is tested on Verus NHEQminer and Verus CCMiner on Windows .\nFirst thing you will need is pool-mining software. The link is supplied above this procedure. Download your\npreferred miner, extract it to your prefered location and configure the batchfile with the pool of your choice\nand your own mining address.\nNow we'll need to adjust the batchfile to run on low priority:\nNHEQMINER:\nchange to the folder you extracted the download\nedit the start.bat\nScroll down to the line, that needs to be adjusted:\nnheqminer.exe -v -l %PoolHost%:%Port% -u %PublicVerusCoinAddress%.%WorkerName% -t %Threads% % % % % % % % % %\nadjust the line so it looks like this:\n%windir%\\system\\cmd.exe /c start 'NHEQminer VRSC' /Low '%THIS_DIR%\\nheqminer.exe' -v -l %PoolHost%:%Port% -u %PublicVerusCoinAddress%.%WorkerName% -t %Threads% % % % % % % % % %\nsave and exit the file\nrun start.bat to start mining\nCCMINER:\nChange to the folder you put the three files from the downloaded archive in (run.verushhash.bat, libcrypto-_-x.dll & ccminer.exe)\nedit the run.verushhash.bat\nThe line, that needs to be adjusted:\nccminer -a verus -o stratum+tcp://na.luckpool.net: -u REoPcdGXthLyeTCrJtrQvxhYTknbFbec.Donator -p d= -t\nadjust the line, so it looks like:\nC:\\Windows\\System\\cmd.exe /c start 'ccminerCPUv. VerusPool' /Low 'c:\\Miners\\CCminer . CPU Release .\\ccminer.exe' -a verus -o stratum+tcp://pool.verus.io: -u RVjvbZuqSGLGDmBBFkbHWySPKExtfjQ.Donator -t\nmake sure you replace the pool (stratum+tcp://pool.verus.io:) with your prefered pool and the address\n(RVjvbZuqSGLGDmBBFkbHWySPKExtfjQ) with your own address. The address shown in this line is the veruscoin\nfoundation donation address. If desired change the identifier (Donator) to a name that easily identifies the\nminer to you.\nsave and exit the file\nrun run.verushhash.bat to start mining."
    },
    {
        "prompt": "What are the standard file location for Verus Desktop?",
        "input": "",
        "completion": "The installer for Verus-Desktop suggests a standard location to install to, depending on the choice whether you want to install it for all users or just yourself.\nAnyone who uses the computer (All Users)\n%ProgramFiles%\\Verus-Desktop\nOnly me:\n%USERPROFILE%\\AppData\\Local\\Programs\\Verus-Desktop\nNormally you don't need to worry about these locations, but in some instances you will be asked by community members providing support to look up a file in a folder in your Verus-Desktop installation.\nnote: changing files in these folders or subfolders may result in a corrupt installation. Only do so when instructed by our support community members.\nDeamons\nThe daemons are located in the komodod, verusd and zcashd folders that can be found in the\nresources\\app\\assets\\bin\\win\\ subfolder of your installation folder.\nProgram settings\nVerus Desktop saves it program settings on a different folder:\n%AppData%\\Verus-Desktop\nThe users settings are stored in appdata\\config.json in the program settings folder.\nStandard chain data and wallet locations\nKMD\n%AppData%\\Komodo\nVerus\n%AppData%\\Komodo\\VRSC\nKomodo asset chains\nAny Komodo asset chain will create a subfolder in the KMD chain data and wallet folder, which is standard named. The names will be in capitals and are identical to the official asset-chain name.\n%AppData%\\Komodo\\<CHAIN-NAME>\nNote: examples\nPirate: %AppData%\\Komodo\\PIRATE\nUtrum: %AppData%\\Komodo\\OOT\nZexo: %AppData%\\Komodo\\ZEXO\nAnd so on...\nFor easy access to the binaries folders, Verus-Desktop program settings and VRSC chain folder and all binary folders, you can use the debug menu in Verus-Desktop."
    },
    {
        "prompt": "How do I install the Verus CLI (command line interface) wallet on a brand new (hosted) Linux system?",
        "input": "",
        "completion": "First make sure your system is up to date:\nsudo apt-get update && apt-get upgrade -y\nI suggest not to use the root account. I you have not yet done, set up a new user\nsudo adduser newusername\nsudo usermod -aG sudo newusername\nSwitch to new username\nsu - newusername\nTest the your new user actually has root (SuDo) access, e.g.:\nsudo ls -la /root\nYou should get some lines like this:\ndrwx------ root root Jul :\nDownload & install the wallet binaries:\nwget https://github.com/VerusCoin/VerusCoin/releases/download/v../Verus-CLI-Linux-v..-amd.tgz\nThe downloaded archive contains another archive and a signature text file, enabling the archive within to be verified (You'll need a running wallet to do that)\nAlso: Verify the URL to the latest version from the Download latest Wallet above.\ntar -xvf Verus-CLI-Linux-v..-amd.tgz\nNow extract the wallet archive:\ntar -xvf Verus-CLI-Linux-v..-amd.tar.gz\nChange directory to verus-cli\ncd verus-cli\nFetch parameters, takes time, more on slow Internet connection\n./fetch-params\nCreating the chaindata directory\ncd ~\nmkdir -p .komodo/VRSC\ncd ~/.komodo/VRSC\nDownload the block-chain bootstrap, this considerably speeds up synchronisation of the block-chain from days to minutes... (optional)\nwget https://bootstrap.verus.io/VRSC-bootstrap.tar.gz\ntar -xvf VRSC-bootstrap.tar.gz\nInstall libraries for Verus\nsudo apt-get install libcurl g++-multilib -y\nInstall Tmux a terminal multiplexer with which you can run threads in the background see https://en.wikipedia.org/wiki/Tmux\nsudo apt-get install tmux -y\nStart tmux:\ntmux\nLaunch Verus Daemon with or without number of threads\n(usually number of threads equals number of cores or double of that if the processor support hyper threading well)\n~/verus-cli/verusd -gen -genproclimit\n~/verus-cli/verusd -gen -genproclimit=\nOnce mining is operational \u2013 again this may take some time \u2013\nyou\u2019ll see: mega hashes complete - working\nthen detach tmux\n[ctrl]&b d\nDisable login with Root User\n(make sure your newly created user login works and has sudo rights)\nsudo nano /etc/ssh/sshd_config\nFind: PermitRootLogin yes\nAnd set to\nPermitRootLogin no\nApply new settings:\nsudo systemctl restart sshd"
    },
    {
        "prompt": "How do I know when an immature block will 'unlock' (mature)?",
        "input": "",
        "completion": "You can use the following scripts to automate it (prints, for each block, how many blocks remaining and the estimated date).\nKeep in mind that the actual number of blocks per day is not always exactly . It varies and the estimated dates may change slightly over time. Below you will find the Linux script that will calculate the extimated time for you:\nScript:\n#!/bin/bash\n#Config\nverus_path='/XXXX/verus-cli/'\nverus_cli='verus'\nget_transactions=( $($verus_path$verus_cli listtransactions '' |grep blockstomaturity|sed 's/.e: //;s/,//g'|awk '{ print $ }'|sort -n) )\ncur_block=( $($verus_path$verus_cli getmininginfo|grep blocks':|sed 's/.e: //;s/,//g'|awk '{ print $ }') )\narr_idx=''\nfor i in '${get_transactions[@]}'\ndo\ndays_to_mature=$(( ($i )/ ))\nmature_to_date=$(date +'%m-%d-%Y' -d '+$days_to_mature days')\necho ''Block #' $arr_idx 'will mature in approximately'$days_to_mature 'days' '(' $mature_to_date ')' '\n((arr_idx++))\ndone\nYou'll need to enter the correct path to your verus directory and you will need to have the verus daemon running in order to sucessfully run this script."
    },
    {
        "prompt": "Can you provide me some linux Bash Scripts To Make Mining Life Easier?",
        "input": "",
        "completion": "Following are some bash scriptse to help make managing your Linux-based CLI miner a bit easier. Prereq is to install mailutils (postfix) and configure with your server's FQDN and set inet_interfaces=localhost in the postfix/main.cf file.\nImportant General Information\nVRSC Wallet & data location on Linux: ~/.komodo/VRSC\nfor wallet version prior to .., replace verusd with komodod.\nScripts:\nMINER SRVC MONITOR & ALERT IF DOWN\nChecks for the verusd daemon and if it has stopped emails you.\ncheckifverusdisrunning.sh\n#!/bin/bash\nif pgrep -x 'verusd' > /dev/null\nthen\nTRUE=''\nelse\necho 'Merry Miner Has Stopped Mining!!! HELP!!' | mail -s 'OUTAGE: Merry' -a 'From: user@yourqualifieddomain.tld' you@youremail.tld\nfi\nALERT ON NEW BLOCKS MINED\nPrereq: Create a file called txHistory.txt and put in it, saved to your home folder.\nThe script then compares the current wallet TX count and compares to the txHistory file...\nso first run it will enter the right number in that file overwriting your .\nOnly emails you if the number changes.\ncheckfornewblocks.sh\n#!/bin/bash\nhistoricalcount=$(cat /home/user/txHistory.txt)\nlivecount=$(/home/user/verus-cli/verus getwalletinfo | grep txcount | sed 's/[^-]*//g')\nif (($livecount > $historicalcount))\nthen\necho $livecount > /home/user/txHistory.txt\necho 'Merry Miner Has Mined a Total of $livecount Blocks! Woot!' | mail -s 'Merry's Blocks: $livecount' -a 'From: user@yourqualifieddomain.tld' you@youremail.tld\nelse\nNOCHANGE=''\nfi\nWALLET BACKUP TO SECURED EMAIL (PROTONMAIL SUGGESTED)\nFor this script I recommend setting up a new Protonmail account with no association to any other service or your name, FA secure it.\nSchedule script in CRONTAB\nIn the following, the */ is every min, the is on the hour every hour, the is every day at PM.\nCRONTAB\n# m h dom mon dow command\n*/ * * * * /home/user/checkfornewblocks.sh\n* * * * /home/user/checkifverusdisrunning.sh\n* * * /home/user/backupwallet.sh\nNote: For any emails sent (for backup of dat file for example) make sure to enforce TLS security in postfix by adding the following line to your /etc/postfix/main.cf\nsmtp_tls_security_level=encrypt"
    },
    {
        "prompt": "Why do i get an error like ERROR: Cannot Get a lock on data directory /root/.komodo/VRSC?",
        "input": "",
        "completion": "Komodo is probably already running.\nProcedure:\nIt just means you can't start it when it's already running. If it isn't running we can take a look at it.\nCheck to see if it is running by running:\n./verus getinfo\nIf it's running you'll get info back, if it isn't you'll get an error.\nIf that throws an error, it's worth checking using this command:\nps fax | grep verus\nand seeing if any processes are listed besides the process you're using to search.\nYou would see verusd with a child process of komodo and all its cli arguments."
    },
    {
        "prompt": "How to make a cloud daily backup of wallet.dat?",
        "input": "",
        "completion": "Note: I use Google Cloud for my staking wallet and backups but the script works regardless of what you use; if you have timelocked coins, you will have to keep your wallet.dat file secure for a long, long time: it's crucial to maintain secure the staking instance as well as the storage..\nImportant General Information\nVRSC Wallet and Data location on Linux: ~/.komodo/VRSC\nProcedure:\nIf you use GCloud:\ncreate a new directory where we'll upload the backups (ie: mkdir /home/user/backup) create a storage bucket via GCloud console (ie bucket_verus)\n* mount the bucket on your local machine (syntax is: gcsfuse ; ie gcsfuse bucket_verus /home/user/backup)\nThe script can be crontab scheduled to run daily or you can run it manually; if you schedule it, you have to hardcode the encryption passphrase; otherwise you can input it manually each time. You will have to install gnupg to encrypt (sudo apt-get install gnupg gnupg-agent). As always: be sure to fully understand what the script does and why I left some echos to demonstration/test purposes, you can sefely remove all of them.\n#!/bin/bash\n# Customize the SOURCE and the DEST folders\nSOURCE_FOLDER=/home/XXXXX/.komodo/VRSC/\nDEST_FOLDER=/home/XXXX/backup/\nBCK_DATE=date +%Y-%m-%d.%H:%M\nSOURCE_FILE=wallet.dat\nDEST_FILE=$SOURCEFILE''$BCK_DATE\nENCRYPT_EXT='.gpg'\n# all echo are for test purposes, feel free to delete them\necho check variable\necho SOURCE - $SOURCE_FOLDER\necho SOURCE_FILE - $SOURCE_FILE\necho DEST FILE - $DEST_FILE\necho DEST - $DEST_FOLDER\necho TO_BE_DEL - $DEST_FOLDER$SOURCE_FILE\nsleep\ncp $SOURCE_FOLDER$SOURCE_FILE $DEST_FOLDER$DEST_FILE\nsleep\n# Customize the passphrase!!\ngpg --batch --yes -c --cipher-algo AES --passphrase='XXXXXX' $DEST_FOLDER$DEST_FILE\nsleep\nrm $DEST_FOLDER$DEST_FILE\n# Keep only last days - BE SURE to fully understand how it works, as every 'rm' command!\nfind $DEST_FOLDER/wallet* -type f -mtime + -exec rm {} ;"
    },
    {
        "prompt": "How do i Compile Monkins Verus enhanced CCMiner for various hardware?",
        "input": "",
        "completion": "Read it completely before using.\nImportant General Information\nThis guide is aimed towards Debian based Linux distributions. If you are using a different kind of distribution\n(eg RPM-based, like CentOS) you will need to install the dependancies using a procedure that fits your\nspecific distribution.\nThere are active branches in ccminer github repo:\nARM (for bit ARM chips with AES intrinsic)\nVerus. (standard x- pc's)\nVerus.gpu (GPUs)\nNote: Replace ARM in the git clone line below with the branchname above you want to use.\nProcedure:\nInstall dependencies (specific for Debian-based distributions):\nsudo apt-get install libcurl-openssl-dev libssl-dev libjansson-dev automake autotools-dev build-essential git\nFor GPU-miner compilation additional sources are required (Not needed for CPU or ARM):\nwget http://developer.download.nvidia.com/compute/cuda/./Prod/local_installers/cuda_.._.._linux.run\nsudo sh cuda_.._.._linux.run\nDownload the source and compile:\ngit clone --single-branch -b ARM https://github.com/monkins/ccminer.git\ncd ccminer\nchmod +x build.sh\nchmod +x configure.sh\nchmod +x autogen.sh\n./build.sh\nAnd finally starting the miner (Change pool, address & workername to your own liking):\n./ccminer -a verus -o stratum+tcp://pool.verus.io: -u RVjvbZuqSGLGDmBBFkbHWySPKExtfjQ.donator -p x"
    },
    {
        "prompt": "What are the PHP staking interface for coinshielding nodes?",
        "input": "",
        "completion": "Procedure:\nThese tools will help you stake on your permanently running machine using Verus CLI, instead of running the Agama GUI wallet.\nFeatures\nautomatic shielding and unshielding of coinbase (staking, solo mining)\nautomatic tracking of total coins generated (also present in e-mail notifications)\noptional e-mail notifications on newly generated coins\noptional periodical wallet.dat backups, also as an encrypted ZIP archive\noptional periodical wallet balance e-mail notifications\nInitial Verus daemon configuration\nFollow the guide in link above to set-up your daemon for the first time. You will need a transparent address, a zs address and the daemon running with correct parameters (-mint -cheatcatcher=zs...).\nDo not stake with the same wallet.dat on multiple nodes."
    },
    {
        "prompt": "How do i pool mine on linux with low priority?",
        "input": "",
        "completion": "Procedure:\nIn order to let your mining not interfere with other processes running on your PC, we'll need to deprioritize the mining process. This will result in your miner throttling down whenever your PC needs processing power. People have reported to be able to use CPU-heavy applications, like games, without the miner interfering, with this method.\nBecause the Verus wallet (GUI and CLI) does a lot more than mining, it is not recommended to use this for a solo-mining setup. This is tested on Verus NHEQminer and Verus CCMiner on Ubuntu ..\nFirst thing you will need is pool-mining software. The link is supplied above this procedure. Download your preferred miner, extract it to your prefered location and configure the batchfile with the pool of your choice and your own mining address.\nNow we'll need to adjust the batchfile to run on low priority:\nNHEQMINER:\nRun your miner as you normally would, with nice -n placed in front of the command you normally use,\nfor example:\nnice -n ./nheqminer -v -l pool.verus.io: -u RVjvbZuqSGLGDmBBFkbHWySPKExtfjQ.Donator -p x -t\nmake sure you replace the pool (pool.verus.io:) with your prefered pool and the address\n(RVjvbZuqSGLGDmBBFkbHWySPKExtfjQ) with your own address. The address shown in this line is the veruscoin\nfoundation donation address. If desired change the identifier (Donator) to a name that easily identifies the\nminer to you.\nCCMINER:\nRun your miner as you normally would, with nice -n placed in front of the command you normally use,\nfor example:\nnice -n ./ccminer -a verus -o stratum+tcp://pool.verus.io: -u RVjvbZuqSGLGDmBBFkbHWySPKExtfjQ.Donator -t\nmake sure you replace the pool (stratum+tcp://pool.verus.io:) with your prefered pool and the address\n(RVjvbZuqSGLGDmBBFkbHWySPKExtfjQ) with your own address. The address shown in this line is the veruscoin\nfoundation donation address. If desired change the identifier (Donator) to a name that easily identifies the\nminer to you."
    },
    {
        "prompt": "why do i get this error while loading shared libraries: libgomp.so.: No such file or directory?",
        "input": "",
        "completion": "When running ./verusd on a Linux distro (eg Debian or Devuan), not all dependencies may be installed by default, resulting in the errormessage error while loading shared libraries: libgomp.so.: No such file or directory or error while loading shared libraries: libz.so: No such file or directory.\nTo solve this you need to install the libgomp and zlibg-dev libraries:\nsudo apt-get install libgomp zlibg-dev"
    },
    {
        "prompt": "what are the Standard file location for Verus Desktop for windows?",
        "input": "",
        "completion": "The Linux version of Verus Desktop is supplied as an AppImage, so it does not get installed, but mounted in the /tmp folder on execution.\nThe folder it is mounted to will look like .mount_Verus-xxxxx where the xxxxx part will be a random set of characters, changing on every start of the wallet.\n(It is a hidden folder: in order to see it, <CTRL>-H will toggle the display of hidden folders)\nNormally you don't need to worry about these locations, but in some instances you will be asked by community members providing support to look up a file in a folder in your Verus-Desktop installation.\nnote: changing files in these folders or subfolders may result in a corrupt installation. Only do so when instructed by our support community members.\nDeamons\nThe daemons are located in the komodod, verusd and zcashd folders that can be found in the\nresources/app/assets/bin/linux subfolder of your (mounted) program folder.\nProgram settings\nVerus Desktop saves it program settings on a different folder:\n~/.verus-desktop\nThe users settings are stored in appdata/config.json in the program settings folder.\nStandard chain data and wallet locations\nKMD\n~/.komodo\nVerus\n~/.komodo/VRSC\nKomodo asset chains\nAny Komodo asset chain will create a subfolder in the KMD chain data and wallet folder, which is standard named. The names will be in capitals and are identical to the official asset-chain name.\n~/.komodo/<CHAIN-NAME>\nNote: examples\nPirate: ~/.komodo/PIRATE\nUtrum: ~/.komodo/OOT\nZexo: ~/.komodo/ZEXO\nAnd so on...\nFor easy access to the binaries folders, Verus-Desktop program settings and VRSC chain folder and all binary folders, you can use the debug menu in Verus-Desktop."
    },
    {
        "prompt": "Why do i get this ERROR: Cannot Get a lock on data directory /root/.komodo/VRSC on my mac os?",
        "input": "",
        "completion": "Procedure:\nIt just means you can't start it when it's already running. If it isn't running we can take a look at it.\nCheck to see if it is running by running:\n./verus getinfo\nIf it's running you'll get info back, if it isn't you'll get an error.\nIf that throws an error, it's worth checking using this command:\nps fax | grep verus\nand seeing if any processes are listed besides the process you're using to search.\nYou would see verusd with a child process of komodo and all its cli arguments."
    },
    {
        "prompt": "What versions of OSX/macOS are supported?",
        "input": "",
        "completion": "Verus Desktop\nCurrently only macOS ..x and up are tested and supported for Verus Desktop. Installing Verus Desktop on OSX ..x or earlier may be possible but the wallet does not function and never completes the initial sync.\nVerus CLI wallet\nThe CLI wallet should run on lower versions without problems.\nFile location\nVRSC Wallet and Data location on Mac OS: /Users//Library/Application Support/Komodo/VRSC\nNecessary files:\nLink : How-To install the latest Wallet\nProcedure:\nIf you installed on OSX ..x or earlier and need to remove it:\nQuit your Wallet.\nEject the wallet dmg.\nMake a backup of wallet.dat & VRSC.conf if necessary (Only if you had a wallet on this machine or if you used an existing wallet.dat)\nIf you installed the Agama.app in Applications, move this to the trash.\nMove ~/Library/Application Support/Agama to the trash or use the following command in terminal\nrmdir /Users//Library/Application\\ Support/Agama.\nMove ~/Library/Application Support/Komodo to the trash or use the following command in terminal\nrmdir /Users//Library/Application\\ Support/Komodo.\nUpgrade OS.\nInstall Agama (Check Link for a smooth install)"
    },
    {
        "prompt": "How do i start mining on macos?",
        "input": "",
        "completion": "VRSC Wallet and Data location on Mac OS: /Users//Library/Application Support/Komodo/VRSC\nSoftware needed to mine\nPrerequisite: VerusCoin wallets\nNeeded: VerusCoin miners\nPrerequisites:\nTo start mining with your Mac, you will need to have an address to mine to. Possibilities are:\nAn exchange address (NOT recommended. This is asking for trouble.)\nAn address from a web-wallet\nAn address from a mobile wallet\nAn address from a Verus-Desktop Lite wallet\nAn address from a Verus-Desktop Native wallet\nProcedure:\nTo start mining on your Mac, you should already have a wallet and and access to an address to mine to. Now to start mining we will need to download the miner first:\n. Go to the Veruscoin miners link above and download CLI nheqminer for MacOS.\n. Open the download folder in finder.\n. doubleclick nheqminer-MacOS-v...tar.gz to unpack it in your download folder.\n. Open the nheqminer folder that appeared in your download folder\nNow we need to configure things so the miner connects to a mining pool (listed on the download page, below the miner download) and mines to your address. In the instructions below I will use the VerusCoin community pool and the address for the Veruscoin foundation. make sure to use your own address and if desired the details of a different pool:\n. click start.sh and open with TextEdit.app\n. On the nd line, change PoolHost= into Poolhost=pool.verus.io\n. On the rd line, change Port= into 'Port='\n. On the th line, change 'PublicVerusCoinAddress=' into PublicVerusCoinAddress=RVjvbZuqSGLGDmBBFkbHWySPKExtfjQ\n(make sure you use your own address!!!!)\n. On the th line, change WorkerName= into WorkerName=MacOS (or any name you want to identify your system)\nIn the next step we will set how many processor threads the miner will use. Make sure to use less threads than your processor has virtual cores. If you allow the miner to use all cores, your system will become sluggish at times, or it may even become completely unresponsive:\n) On the th line, change Threads= into Threads= (fill in the amount of virtual cores you want to use)\n) Save and exit the file.\nWe have all the settings ready to go, but the file we just edited is not executable right now.\n. Click Start.sh and click copy 'Start.sh'\n. Click in an empty space in you folder and click Paste items, which will result in a new start copy.sh file.\n. rename start copy.sh to start.command\nNow we have an executable file that will run when you doubleclick.\n. Doubleclick start.command and your machine will start mining."
    },
    {
        "prompt": "How do i pool mine on macos with low priority?",
        "input": "",
        "completion": "Procedure:\nIn order to let your mining not interfere with other processes running on your PC, we'll need to deprioritize the mining process. This will result in your miner throttling down whenever your PC needs processing power.\nPeople have reported to be able to use CPU-heavy applications, like games, without the miner interfering, with this method.\nBecause the Verus wallet (GUI and CLI) does a lot more than mining, it is not recommended to use this for a solo-mining setup.\nFirst thing you will need is pool-mining software. The link is supplied above this procedure. Download your preferred miner, extract it to your prefered location and configure the batchfile with the pool of your choice and your own mining address.\nNow we'll need to adjust the batchfile to run on low priority:\nNHEQMINER:\nRun your miner as you normally would, with nice -n placed in front of the command you normally use,\nfor example:\nnice -n ./nheqminer -v -l pool.verus.io: -u RVjvbZuqSGLGDmBBFkbHWySPKExtfjQ.Donator -p x -t\nmake sure you replace the pool (pool.verus.io:) with your prefered pool and the address\n(RVjvbZuqSGLGDmBBFkbHWySPKExtfjQ) with your own address. The address shown in this line is the veruscoin\nfoundation donation address. If desired change the identifier (Donator) to a name that easily identifies the\nminer to you."
    },
    {
        "prompt": "What are the Standard file location for Verus Desktop on macos?",
        "input": "",
        "completion": "he installer for Verus-Desktop suggests a standard location to install to Applications\nAnyone who uses the computer\n/Applications/Verus-Desktop.app\nDeamons\nThe daemons are located in the komodod, verusd and zcashd folders that can be found in\n/Applications/Verus-Desktop.app/Contents/Resources/app/assets/bin/osx\nProgram settings\nVerus Desktop saves its program settings in your home folder:\n~/Library/Application\\ Support/Verus-Desktop\nThe users settings are stored in appdata/config.json in the program settings folder.\nStandard chain data and wallet locations\nVerus Desktop saves its chain and wallet data in your home folder:\nKMD\n~/Library/Application\\ Support/Komodo\nVerus\n~/Library/Application\\ Support/Komodo/VRSC\nKomodo asset chains\nAny Komodo asset chain will create a subfolder in the KMD chain data and wallet folder, which is standard named. The names will be in capitals and are identical to the official asset-chain name.\n~/Library/Application\\ Support/Komodo/<CHAIN-NAME>\nNote: examples\nPirate: ~/Library/Application\\ Support/Komodo/PIRATE\nUtrum: ~/Library/Application\\ Support/Komodo/OOT\nZexo: ~/Library/Application\\ Support/Komodo/ZEXO\nAnd so on...\nFor easy access to the binaries folders, Verus-Desktop program settings and VRSC chain folder and all binary folders, you can use the help menu in Verus-Desktop."
    },
    {
        "prompt": "How do i update my arm cli wallet?",
        "input": "",
        "completion": "Verus Wallet.dat, Chaindata & VRSC.conf standard locations\nARM Linux: ~/.komodo/VRSC\nNote: Due to the size of the blockchain, on an ARM installation this directory is usually stored on a mounted external hard drive.\nThis will have its own file path that was specified when the drive was mounted.\nThus the path to ~/.komodo/VRSC directory is likely to be user-specified & thus non-standard on an ARM.\n(NB This version is aimed at inexperienced users, so it includes the associated routine/basic Linux commands.\nYou will need access to the relevant directories, which may require sudo priveleges)\n(NB Raspberry Pi ARM boards lack some instruction sets to mine, though the Pi & Pi are ARM & can be used as staking devices if an ARM operating system is installed)\nProcedure:\nNavigate to the directory which contains the verus daemon binary file (the default is in the home directory - ie ~/verus-cli)\ncd verus-cli\nCheck the Verus daemon is running - you will need to keep it running to check the downloaded file's signature\ntop\n(verusd should appear as one of the processes in the list. If you need to start it use the command ./verusd.)\nDownload the latest ARM version. Check https://verus.io/wallet/command-wallet\n(The commands below are for v..-) Don't forget to change the version number to whichever one you are updating.\nwget https://github.com/VerusCoin/VerusCoin/releases/download/v..-/Verus-CLI-Linux-v..--arm.tgz\nunpack/unzip the download into the signature file and the binaries tar/zipped file\ntar -xvf Verus-CLI-Linux-v..--arm.tgz\nCheck it has unpacked/unzipped & open the signature file\nls -la\ncat Verus-CLI-Linux-v..--arm.tar.gz.signature.txt-file\nThis will display the signature information to verify the downloaded file is authentic.\nCHECK the signature by using the data in the signature file\n./verus verifyfile 'Verus Coin Foundation Releases@' '[signature string from signature.txt-file]' [your home directory file path]Verus-CLI-Linux-v..--arm.tar.gz\nThe return should be true. If you have an issue add '' around the file path.\nSTOP the Verus daemon\n./verus stop\nCheck whether it has stopped running with this command. (To be doubly sure you can also look in the debug file in the )\ntop\n(This time verusd should NOT appear in this list.)\nRename the old versions of the binaries (replace the version numbers with the version being replaced)\n(This ensures you can easily revert to the old version by renaming these files.)\nmv verus verus-v..-\nmv verusd verusd-v..-\nCheck they have been renamed\nls-la\nUnpack/unzip the binaries for the latest version\ntar -xvf Verus-CLI-Linux-v..--arm.tar.gz\nCheck if they have unpacked/unzipped in the directory\nls -la\nIf the directory where your Verus wallet.dat, Chaindata & VRSC.conf files are stored is in a non standard place - eg on a mounted external hard drive - you may have a datadir specified in your VRSC.conf file.\nNavigate to that directory to check your datadir is still correct. The VRSC.conf file may have been overidden in the update. This ensures the Verus daemon knows where to find the blockchain you have currently saved on your system.\ncat VRSC.conf\nIf it requires editing, use nano to edit this file\nnano VRSC.conf\n& append this to the VRSC.conf file :\ndatadir=[your custom file path for your mounted hard drive]\nStart the Verus daemon again on the new version (add any other start options from https://wiki.verus.io/#!faq-cli/clifaq-_verusd_options.md)\n./verusd\nCheck the version\n./ verus getwalletinfo\nOnce you are satisfied the new version is working, clean up the older binares (from step ) by deleting them (or just move them to another directory using the same mv command as step )\nrm verus verus-v..-\nrm verus verusd-v..-"
    },
    {
        "prompt": "What are the hardware and software requirements for ARM?",
        "input": "",
        "completion": "There are minimum requirements on your hardware and software for running a Verus Wallet on ARM-devices. If your platform does not meet the minimum requirements, you may not be able to run the required software.\nThe listed requirements are for running one chain. Additional PBaaS chains require more resources.\nVerus Wallet on CLI\nAbsolute minimum requirements:\n-bit processor\n-bit Operating system (Raspbian is standard bit)\nGB memory + GB Swap available to the CLI Wallet\nGB storage space for Verus Blockchain and CLI wallet\ninternet connectivity\nlibgomp and zlibg-dev libraries installed\nRecommended requirements\n-bit processor with AES functions enabled\n-bit Operation system (Raspbian is standard bit)\nGB memory or more + GB Swap available to the CLI Wallet\nGB storage on a fast medium (like NVMe device) for the Verus Blockchain & CLI wallet. This supplies room for blockchain growth over time and the ability to bootstrap the wallet.\ninternet connectivity\nlibgomp and zlibg-dev libraries installed\nVerus Wallet on GUI\nAbsolute minimum requirements:\n-bit processor\n-bit Operating system (Raspbian is standard bit) with GUI interface\nGB memory + GB Swap available to the Verus Desktop Wallet\nGB storage space for Verus Blockchain and Verus Desktop.\ninternet connectivity\nlibgomp and zlibg-dev libraries installed\nRecommended requirements\n-bit processor with AES functions enabled\n-bit Operation system (Raspbian is standard bit) ) with GUI interface\nGB memory or more + GB Swap available to the CLI Wallet\nGB storage on a fast medium (like NVMe device) for the Verus Blockchain & CLI wallet. This supplies room for blockchain growth over time and the ability to bootstrap the wallet.\ninternet connectivity\nlibgomp and zlibg-dev libraries installed\nStaking\nAbsolute minimum requirements:\nAll requirements to run a wallet\nRecommended requirements\nAll requirements to run a wallet\nA fully configured and functioning NTP client, to keep your clock synchronized\nLow latency internet connectivity\nSolo Mining\nAbsolute minimum requirements:\nAll requirements to run a wallet\nRecommended requirements\nAll requirements to run a wallet\n-bit processor with AES functions enabled\nLow latency internet connectivity\nPool Mining\n-bit processor with AES functions enabled\n-bit Operation system (Raspbian is standard bit)\nARM release of CCMiner or NHEQminer\nLow latency internet connectivity\nA public address to mine to\nA public mining pool to connect to"
    },
    {
        "prompt": "Why do i get error while loading shared libraries: libgomp.so.: No such file or directory?",
        "input": "",
        "completion": "When running ./verusd on a Linux distro (eg Debian or Devuan), not all dependencies may be installed by default, resulting in the errormessage error while loading shared libraries: libgomp.so.: No such file or directory or error while loading shared libraries: libz.so: No such file or directory.\nTo solve this you need to install the libgomp and zlibg-dev libraries:\nsudo apt-get install libgomp zlibg-dev"
    },
    {
        "prompt": "What is Public Blockchains as a Service (PBaaS) in veruscoin?",
        "input": "",
        "completion": "Its the Revolutionary Layer / Protocol Launches its Most Anticipated Mainnet Upgrade\nAfter years of hard work and dedication, on the fifth anniversary, the worldwide Verus community is excited to announce the launch of the highly anticipated mainnet upgrade on May . The Public Blockchains as a Service release marks a major milestone for Verus and the entire cryptocurrency industry.\nPBaaS activation: block height ,, (Sunday May )\nTurning the Crypto Industry on its Head\nThe wide cryptocurrency industry will see how much better Verus PBaaS is as a solution for true decentralization in cross-chain, DeFi AMMs, on-chain PP exchange, self-sovereign provable recoverable IDs, NFT capabilities, anti-phishing, anti-MEV, scale, or just about any of the challenges people have on crypto platforms today. In fact, as we prepare for activation of this protocol that enables so many new use cases for crypto, not to mention easy onboarding when entrepreneurs discover how to really leverage VerusIDs, PBaaS is so far beyond what people are experiencing on any crypto platform today that it has been easy to dismiss our community as describing the impossible.\nOnce PBaaS is live on mainnet and people can actually use all of this themselves, along with every project, chain and currency on the PBaaS network and EVERY ERC or ERC on Ethereum or even bridged to Ethereum, the truth of Verus will be self-evident, and those who build on Verus will more easily build faster, better, more secure apps and services with the possibility of provable identity + privacy, crowdfunded projects, businesses, economies, and public infrastructure efforts all seamlessly integrated into UIs that do not need business deals, permission, or any centralized infrastructure to connect services and users, enabling everyone to communicate in provable, private, or public ways that always include bidirectional, secure commerce of all kinds.\nCore Capabilities\nThe core capabilities of this release include (lots to learn to understand it all, but here\u2019s a partial list):\nVerus Intersystem Protocol (VIP) \u2014 Layer Multichain and Inter-chain Protocol\nTo our knowledge, the VIP protocol is the only fully decentralized, provable cross-chain technology available on any network that is based on cryptographic proofs of each chain with optional witnesses to confirm chain state. From what we\u2019ve been able to learn about LayerZero, Cosmos, Polkadot, Thorchain or others, VIP is different from (though closest in some ways to LayerZero), superior to, and more decentralized than all other cross-chain protocols we have seen. We can of course get into any level of discussion on the topic, but expect more descriptions and educational material to follow, now that the protocol was originally conceived of years ago, and has been developed and tested/hardened for years.\nVerusID Content Multimaps \u2014 Unlimited Provable Data for Every VerusID\nOf course this upgrade retains all of the groundbreaking capabilities already available with VerusID, including multisig options, separate revocation and recovery authorities for maximum security to prevent theft of identity or funds, and the ability to timelock your ID, enabling you to even thwart attempts to access your funds after someone compromised your secret keys.\nWith the PBaaS upgrade, VerusIDs also gain a powerful new capability that amounts to an unlimited, rent-free indexed database for every VerusID on every blockchain of the PBaaS network. This data can be encrypted or published in the clear and used for any purpose or application, whether social networking, voting, oracles, publishing any information, various forms of provable attestations, ratings, and much, much more. With the scalability of PBaaS and VerusID content multimaps together, the Verus PBaaS network becomes the most scalable, permissionless, provable source of human data from which AIs can learn about humanity in the world. We don\u2019t believe anything else even comes close, and with the recent rise of AI, it feels great to have this come together as a core original goal at a very appropriate and important time in history.\nPermissionless Chain, Token, and Liquidity Basket Currency Launches\nWhether you are looking to crowdfund an effort in a manner much like Kickstarter or IndieGoGo, sell identities to which you expect to add value or that are sub-IDs of a very cool root ID, or launch an entirely new blockchain economy and blockchain that starts with all of the Verus technology and a bridge to Verus and Ethereum from day , Verus is probably the best platform for you. In fact, as we were planning for the next testnet and wanted to have our own version of DAI to use in the bridge, since we want only decentralized currencies in the live mainnet bridge, we used a command to launch a token on the old testnet, exported it and all its supply to Ethereum\u2019s Goerli on the existing bridge, and that will be the DAI proxy/simulant that we will use on the new testnet. It saved us all some time, proving that Verus PBaaS will also be the easiest, most efficient way to launch even an Ethereum ERC, whether that ERC represents a token, DeFi basket, or even another PBaaS blockchain\nVerus enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing % POW/% POS, % hash attack resistant blockchain that can send and receive from the Verus chain which launched it.\nAll PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\nVerus also enables any ID owner to define Verus DeFi fractional basket currencies with one or more asset currencies backing the liquidity pool at a fractional percentage ranging from % to %. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners, stakers, and liquidity providers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protocols.\nDecentralized Ethereum Bridge\nShortly after PBaaS activates on mainnet, the Ethereum bridge will launch as a decentralized gateway and : provably mapped currency called \u201cvETH\u201d on the Verus network, also available to all PBaaS chains. The Ethereum bridge will also include a % backed basket of % Verus, % Ethereum, and % DAI, which will have the following functions:\nAuto conversion of fees from Verus <-> Ethereum when sending cross chain, based on the on-chain conversion price in the liquidity basket\nPermissionless ability to register *.vETH IDs, which in addition to the normal sub-ID capability of creating a single token that has control over the ID and can be exported to Ethereum as an automatic ERC NFT, can alternately be used to create a \u201cmapped currency\u201d, which can be provably mapped : to any ERC currency on the Ethereum network by exporting it to the vETH bridge. Only Verus root IDs, and IDs of a gateway can create mapped currencies to a gateway.\nDecentralized, fair bridge launch. The vETH bridge will launch as other currencies, chains, and gateways can launch, including the bridge converter. When the bridge launches, the contracts will have a surplus of Verus that comes from the fees paid to launch the gateway. In the protocol, that surplus is first used to solve the chicken and egg problem of none of one currency on the other chain. The contracts will cover the Verus fees for all sends from Ethereum before the Bridge converter launches, the liquidity basket becomes active, and the bridge recognizes that launch. Once that happens, the remainder of \u00bd the fees ( VRSC) that are left over from the launch and did not go to miners and stakers or pay Verus fees for people sending from Ethereum.\nThe Verus Fee Pool and Rewards\nAnother technology and solution unique to Verus, the Verus Fee Pool technology goes live with PBaaS. What this means is that as people use the cross-chain, DeFi, or purchase/register IDs on the network, the miner or staker will put all fees into the on-chain \u201cfee pool\u201d, and then take /th of the pool in addition to the block reward. This gives everyone incentive to still prioritize transactions based on fees, while preventing validators from gaming the fee system by washing fees-in vs. fees-out or working to reorg/rewind to capture a particularly juicy block reward. Instead, this technology aligns all validator incentives with the health/proper operation of the network and creates a circular on-chain economy that can last well beyond block rewards.\nA Historic Move Forward\nFor those who actually understand the challenges actual users have in crypto today, this release represents a historic move forward in public cryptographic networks and credibly and actually neutral infrastructure for society-wide human and AI collaboration and learning. As a community, this version really does realize the vision laid out in the original Verus Vision Paper, and at the same time provides much more than was described there. We are a community of individuals, and it is only because that is what we are that we have all arrived here together. The rest of the world is stuck on their Munchausen\u2019s protocols, trying to figure out how to share the front-running and back-running spoils taken from users, but Verus activation gives them a better path forward.\nAs a community, we do not promise, we describe a shared vision and welcome contributors from everywhere. Now that we, as a community, have delivered on the original phases described in the first vision paper together, it is time for each of us to also consider what we might personally want to build or be part of building over this incredible, geoscale, ID-enabled, fully decentralized platform. Our next efforts across the community should be to realize the promise of this network in the use cases we create, use cases that we will have an advantage creating on Verus over any other platform because it really is that much better."
    },
    {
        "prompt": "What is verus?",
        "input": "",
        "completion": "Open-source, Rent-free, Scalable Public Infrastructure\nVerus is an open-source decentralized blockchain protocol with proof-of-work and proof-of-stake as its consensus mechanism. It offers rent-free blockchain tools for creators and organizations to build products, services and systems.\nVerus is a multichain protocol with strong focus on scalability, security and decentralization. It can scale to world demand, is proven % hash attack resistant and is community built - all coins in circulation are fairly mined and staked.\nWith Public Blockchains as a Service (PBaaS) anyone can launch scalable, interoperable, customizable and independent blockchains for public or private use. Create tokens and currencies on top of blockchains for any use case. Get funding and create markets with protocol level built-in DeFi.\nProtocol-level self-sovereign digital identities and namespaces are at the center of the Verus multichain protocol. Giving builders, communities, businesses and organizations tools never before seen.\nEverything happening on the Verus multichain protocol has aligned incentives with the miners and stakers of the worldwide network. This makes it one of the most secure protocols with opportunities to earn.\n#Accessibility\nVerus creates blockchain technology that is accessible for everyone.\nNo programming needed for blockchain, token and currency launches\nLow protocol fees\nMining and staking accessible for everyone\n#Scalability\nVerus achieves practically unlimited scalability through its Public Blockchains as a Service.\nCreate use case specific blockchains and currencies\nMove activity between chains to avoid congestion\n#Security\nVerus takes blockchain security to the next level.\n% hash attack resistant through Verus Proof of Power\n#Interoperability\nVerus enables a world where all blockchains communicate with eachother.\nCross-chain, cross-system transfers of all data types\nBridges to communicate with external blockchains\n#Community\nVerus is a community driven project in the true spirit of Bitcoin.\nFair launch\nNo ICO, no developer fees, no founder fees, no premine\nDecentralized public blockchain"
    },
    {
        "prompt": "Whats the coin overview?",
        "input": "",
        "completion": "Coin Overview\nLaunch Date May\nCoin Ticker VRSC\nAverage Block Time minute\nTransaction Fee . VRSC\nMax Supply ,, VRSC\nConsensus Algorithm Verus Proof of Power\nHash Algorithm VerusHash .\nPrivacy Zcash Sapling"
    },
    {
        "prompt": "What is VerusPoP?",
        "input": "",
        "completion": "Verus Proof of Power\nVerusPoP is a % proof-of-work, % proof-of-stake consensus algorithm. More information on the Verus miner and staker ecosystem.\n#Hybrid Consensus\nVerus Proof of Power, or VerusPoP, is a hybrid consensus algorithm which uses a statistical function that combines Proof of Work (PoW) and Proof of Stake (PoS) to validate each block by either PoW or PoS, while averaging to a target percentage of blocks being validated by each form of proof.\nIn short, it a unique consensus mechanism with % of all blocks validated by miners, and the other % by stakers.\n#Attack Resistant\nTo successfully attack the Verus blockchain, more than % of the validation power is needed, called Chain Power. A % attack would require a combined value of over % of both the chain\u2019s hashpower and its coin supply. For technical information on VerusPoP read the whitepaper (opens new window).\nVerusPoP provides a decentralizing effect on the network, incentivizing holders to keep nodes online to support the network. Even if a change in network hashrate happens, the PoW/PoS ratio stays the same: /%.\n#VerusHash .\nFrom the VerusPoP whitepaper (opens new window):\n'VerusHash is specifically developed to deliver a competitive advantage for CPUs with GPUs. It is an exceedingly CPU-friendly long input hash function that uses the quantum-secure, short input Haraka V as its core compression algorithm. The result is the fastest known cryptocurrency hash algorithm available to modern CPUs and the only hash algorithm which enables today\u2019s CPUs and GPUs to compete on an economically comparable level.\nHaraka V is designed as a short input hash to exclusively consume one chunk of bits and produce bits of a hash result. Utilizing Haraka V VerusHash takes any length of input and produces a bit hash result, unique to VerusHash, that also provides the same security guarantees as Haraka V. This makes VerusHash bit secure for classical computing attacks and bit secure against quantum computers for pre-image and second pre-image attacks.\nTo understand the VerusHash algorithm it helps to first separate the digest from the core. We then consider the Haraka V core as an abstract digest function that takes bits ( bytes) of input and produces bits ( bytes) of output. Given such a digest function, referred to as haraka, the most concise implementation of VerusHash, in any language to-date, is the following Python code for the VerusHash hash digest as follows:'\n# verus_hash\ndef verus_hash(msg):\nbuf = [] *\nlength = len(msg)\nfor i in range(, length, ):\nclen = min(, length - i)\nbuf[:] = [b for b in msg[i:i + clen]] + [] * ( - clen)\nbuf[:] = haraka(buf)\nreturn bytes(buf[:])\n#PoS Problems Solved\nVerus\u2019 staking algorithm solves the two major theoretical issues undermining other PoS systems, Nothing at Stake and Weak Subjectivity by leveraging its smart transaction capabilities to remove any incentive to attempt cheating, making it a losing proposition. Read: How Verus Solved Proof of Stake\u2019s Two Biggest Problems: Nothing at Stake and Weak Subjectivity"
    },
    {
        "prompt": "What is the decentralization process in verus coin?",
        "input": "",
        "completion": "Verus is a decentralized public blockchain, a community driven project in the true spirit of Bitcoin. Anyone can participate and contribute, no matter who you are or where you come from. Verus is:\nOpen\nBorderless\nPublic\nNeutral\nCensorship Resistant\n#Fair Launch\nVerus had a fair launch, meaning that everyone had, and still has equal opportunity to collect its currency through mining and staking. For Verus this means:\nNo ICO has been held\nNo founder or developer fees\nNo premine\nNo commercial interests\nNo rent-seeking behavior"
    },
    {
        "prompt": "Define currencies and blockchain for me?",
        "input": "",
        "completion": "Launch without programming needed\nEnables any user with VerusID to create their own token currency or even full fledged, multi-currency, VerusID-issuing % PoW/% PoS, % hash attack resistant blockchain that can send and receive from the Verus chain which launched it.\nAll PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, VerusID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n#DeFi liquidity pools and fractional currency baskets\nAny VerusID owner may define Verus DeFi fractional basket currencies with one or more asset currencies backing the liquidity pool at a fractional percentage ranging from % to % backing.\nThe Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protocols.\n#Bridge converter launches\nLaunch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain.\nBridge converter currencies have the same flexibility as other fractional % asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockchain, and all fees generated via cross-chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n#Crowdfunding currency and blockchain launches\nSet required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees.\nThe launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n#Interoperable, multichain network\nThe Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network.\nNotary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access.\nThere is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain network is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\nDefining a currency\nThere are many options to choose from when defining your currency or blockchain. Combine them in the options parameter for different use cases.\n# Options Details\nOPTION_FRACTIONAL Allows reserve conversion using base calculations when set\nOPTION_ID_ISSUANCE Clear is permissionless, if set, IDs may only be created by controlling ID\nOPTION_ID_STAKING All IDs on chain stake equally, rather than value-based staking\nOPTION_ID_REFERRALS If set, this chain supports referrals\nOPTION_ID_REFERRALREQUIRED If set, this chain requires referrals\nOPTION_TOKEN If set, this is a token, not a native currency\nOPTION_SINGLECURRENCY For PBaaS chains or gateways to potentially restrict to single currency\nOPTION_GATEWAY If set, this routes external currencies\nOPTION_PBAAS This is a PBaaS chain definition\nOPTION_GATEWAY_CONVERTER This means that for a specific PBaaS gateway, this is the default converter and will publish prices\nOPTION_GATEWAY_NAMECONTROLLER When not set on a gateway, top level ID and currency registration happen on launch chain\nOPTION_NFT_TOKEN Single satoshi NFT token, tokenizes control over the root ID\nNeed help setting up a currency launch? \ud83e\udd14\nGo to the Verus Discord #pbaas-development channel. The community is happy to assist!(opens new window)\n#VerusID Namespace\nTo create a currency (or blockchain) of a specific name, you need a VerusID of the same name. The controller of this VerusID is the only one who can create a currency of that name, and they can only do so once.\n#Example scenarios\nSo, let's hypothetically assume we have VerusIDs, one named gold@, one named mycoin@, and one named bob@.\nWe would like to have one currency, gold@, that we somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nWe also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, 'my', offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\n#Defining GOLD currency\nOf course, since this is a test currency, we send ourselves some to start. We could define the currency gold as follows:\n./verus -chain=VRSCTEST definecurrency '{\n'name':'gold',\n'options':,\n'currencies':['vrsctest'],\n'conversions':[.],\n'minpreconversion':[],\n'preallocations':[{'david@':.}]\n}'\nThe identity of the currency must be funded with at least VRSCTEST before sending the transaction returned from this command to initiate a currency launch that will start at blocks from when it was made (default), and that must have VRSCTEST preconverted at . VRSCTEST per GOLD in order to launch.\nAll of this happens as part of the mining process, since mining the blocks that launch a currency earn the .% conversion fees of participation in the launch, converting VRSCTEST to GOLD.\n#Converting VRSCTEST to GOLD\nWe could send the following command before the block where GOLD token launches. After it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, we could issue the command:\n./verus -chain=VRSCTEST sendcurrency '*' '[{\n'address':'bob@',\n'convertto':'gold',\n'preconvert':,\n'amount':\n}]'\nThis would effectively park our conversion until the token launches, at which point, we will either find . GOLD in our wallet, or we will have our VRSCTEST back.\nAssuming it launches, and we later want to create MYCOIN, which can be converted to with either GOLD or VRSCTEST.\n#Defining MYCOIN currency\nLet's define MYCOIN with:\n./verus -chain=VRSCTEST definecurrency '{\n'name':'mycoin',\n'options':,\n'proofprotocol':,\n'currencies':['vrsctest', 'gold'],\n'minpreconversion':[,.],\n'initialsupply':\n}'\n#Minting new MYCOIN\nIn 'mycoin', we set proofprotocol to , which is PROOF_CHAINID. That means that the controller of the mycoin@ VerusID can mint new coins as follows:\n./verus -chain=VRSCTEST sendcurrency 'mycoin@' '[{\n'address':'bob@',\n'currency':'mycoin',\n'mintnew':,\n'amount':\n}]'\nDefining a PBaaS-Blockchain\nThere are many options to choose from when defining your blockchain. Combine them in the options parameter for different use cases.\n# Options Details\nOPTION_FRACTIONAL Allows reserve conversion using base calculations when set\nOPTION_ID_ISSUANCE Clear is permissionless, if set, IDs may only be created by controlling ID\nOPTION_ID_STAKING All IDs on chain stake equally, rather than value-based staking\nOPTION_ID_REFERRALS If set, this chain supports referrals\nOPTION_ID_REFERRALREQUIRED If set, this chain requires referrals\nOPTION_TOKEN If set, this is a token, not a native currency\nOPTION_SINGLECURRENCY For PBaaS chains or gateways to potentially restrict to single currency\nOPTION_GATEWAY If set, this routes external currencies\nOPTION_PBAAS This is a PBaaS chain definition\nOPTION_GATEWAY_CONVERTER This means that for a specific PBaaS gateway, this is the default converter and will publish prices\nOPTION_GATEWAY_NAMECONTROLLER When not set on a gateway, top level ID and currency registration happen on launch chain\nOPTION_NFT_TOKEN Single satoshi NFT token, tokenizes control over the root ID\nNeed help setting up a blockchain launch? \ud83e\udd14\nGo to the Verus Discord #pbaas-development channel. The community is happy to assist!(opens new window)\n#VerusID Namespace\nTo create a blockchain of a specific name, you need a VerusID of the same name. The controller of this VerusID is the only one who can create a blockchain of that name, and they can only do so once.\n#Examples of blockchain launches\n#Blockchain\n./verus -chain=VRSCTEST definecurrency '{\n'name':'PBaaSChain',\n'options':,\n'currencies':['VRSCTEST'],\n'conversions':[],\n'eras':[\n{\n'reward':,\n'decay':,\n'halving':,\n'eraend':\n}\n],\n'notaries':[\n'Notary@',\n'Notary@',\n'Notary@'\n],\n'minnotariesconfirm':,\n'nodes':[\n{\n'networkaddress':'...:',\n'nodeidentity':'Node@'\n},\n{\n'networkaddress':'...:',\n'nodeidentity':'Node@'\n}\n],\n'gatewayconvertername':'Bridge',\n'gatewayconverterissuance':\n}'\n'{\n'currencies':['VRSCTEST','PBaaSChain','USD'],\n'initialcontributions':[.,,],\n'initialsupply':\n}'\n#Blockchain\n./verus -chain=vrsctest definecurrency '{\n'name':'v',\n'options':,\n'currencies':['vrsctest'],\n'preallocations':[\n{\n'allnotary@':\n}\n],\n'conversions':[],\n'eras':[\n{\n'reward':,\n'decay':,\n'halving':,\n'eraend':\n}\n],\n'blocktime':,\n'idregistrationfees':,\n'notaries':[\n'allnotary@',\n'allnotary@',\n'allnotary@'\n],\n'startblock':,\n'minnotariesconfirm':,\n'nodes':[\n{\n'networkaddress':'...:',\n'nodeidentity': 'allnotary@'\n},\n{\n'networkaddress':'...:',\n'nodeidentity':'allnotary@'\n},\n{\n'networkaddress':'...:',\n'nodeidentity':'allnotary@'\n}\n],\n'gatewayconvertername':'Bridge',\n'gatewayconverterissuance':\n}'\n'{\n'currencies':['VRSCTEST','v'],\n'initialcontributions':[,],\n'initialsupply':\n}'\nDefining a currency with a : mapping of an ERC-\nWhen defining a currency it can be mapped to an ERC- :. The currency on Verus and the ERC- on Ethereum are then always interchangeable to .\n\u2194\ufe0f Verus-Ethereum Bridge\nThe Verus-Ethereum bridge is the first of its kind. All tokens and currencies flowing over the bridge are never in anyone\u2019s custody, and are proven and verified by consensus rules.\n\ud83d\udc49 Access the Verus-Ethereum Bridge (opens new window)(Goerli testnet)\n#Defining the currency\nTo create a currency of a specific name, we need a VerusID of the same name. The controller of this VerusID is the only one who can create a currency of that name, and we can only do so once.\nThe cost for a VerusID on the Verus testnet is VRSCTEST (or when using a referral). The cost to launch a currency is VRSCTEST. Before launching we need to have enough VRSCTEST in the namespace VerusID.\nIn our example we have a namespace MyUSDC with which we want to launch a currency that is mapped to the Ethereum USDC ERC- (on Goerli testnet, see contract address (opens new window)).\nBelow is the command to map a currency : to an ERC- on Ethereum. The address field is the Ethereum smart contract address of the ERC- we want to map to.\n./verus -chain=VRSCTEST definecurrency '{\n'name':'MyUSDC',\n'options':,\n'systemid':'veth',\n'parent':'vrsctest',\n'launchsystemid':'vrsctest',\n'nativecurrencyid':{\n'type':,\n'address':'xDCBadccCbfBa'\n},\n'initialsupply':,\n'proofprotocol':\n}'\nAfter we put in the command, we get returned a HEX. We use this HEX to launch the currency on the network. Use the command below to launch the currency:\n./verus -chain=VRSCTEST sendrawtransaction 'HEX'\nNow we have to wait a few blocks for the currency to be available on the network.\n#Export to Ethereum\nThe last step is to export the currency to Ethereum so we can see it there too.\nExport a currency to Ethereum (as ERC-)\nA currency on Verus (testnet) can be exported to Ethereum as an ERC-. The currency can then be used in the complete Ethereum ecosystem, and on the Verus network. Sending to and from Verus and Ethereum couldn't be easier.\n\u2194\ufe0f Verus-Ethereum Bridge\nThe Verus-Ethereum bridge is the first of its kind. All tokens and currencies flowing over the bridge are never in anyone\u2019s custody, and are proven and verified by consensus rules.\n\ud83d\udc49 Access the Verus-Ethereum Bridge (opens new window)(Goerli testnet)\n#Exporting the currency\nNow, let\u2019s export a currency from Verus to Ethereum as an ERC- over the non-custodial bridge. We must have enough funds to pay for the export. The export fee is: ~ . vETH or ~ VRSCTEST\nThe command to export a currency to Ethereum as an ERC-:\n./verus -chain=VRSCTEST sendcurrency 'myVerusID@' '[{\n'address':'xADCEEFBcbCefBDEDADBE',\n'currency':'myCurrency',\n'amount':,\n'exportto':'veth',\n'exportcurrency':true,\n'feecurrency':'veth'\n}]'\nLet's break the command down.\nmyVerusID@ is the from- and change-address. The fee to pay for the export comes from here, and if you paid too much fees the rest will be returned here.\naddress is the Verus-Ethereum smart-contract bridge address. Don't change this.\ncurrency is the name of the currency you wish to export as an ERC-.\nfeecurrency is the currency the export fees are paid in. Omit this to pay the fees in VRSCTEST.\nWait for notarization\nAfter the bridge has been notarized to the blockheight where you have exported the currency, you can choose it from the token dropdown on the bridge website"
    },
    {
        "prompt": "What is the network economy?",
        "input": "",
        "completion": "Verus is a rent-free blockchain protocol that has a decentralized economy. Costs for services paid to the protocol are distributed to the miners and stakers. There are no developer fees, and no rent-seeking profiteers."
    },
    {
        "prompt": "What is the mining ecosystem of verus?",
        "input": "",
        "completion": "Verus has a naturally decentralized miner ecosystem. VerusHash . is the mining algorithm that is specifically developed for Verus. The algorithm equalizes mining fairness across hardware classes.\nTo mine Verus no specialized mining equipment is necessary. Anyone can start mining with consumer-grade hardware. Mining is made especially easy for starters, since they can start directly from within Verus Desktop, without any additional software requirements."
    },
    {
        "prompt": "What is merge mining?",
        "input": "",
        "completion": "Additionally, when PBaaS goes live on mainnet, miners can choose to mine up to PBaaS-chains simultaneously, without losing any of their original hashing power"
    },
    {
        "prompt": "What is the staking ecosystem of verus?",
        "input": "",
        "completion": "Anyone can start staking Verus, even with the smallest amount possible, e.g. . VRSC. Although it could take many years before you win a block with such a tiny amount.\nVerus has a powerful and fair staking system. No threshold required and no registrations necessary."
    },
    {
        "prompt": "What are the block rewards of verus coin?",
        "input": "",
        "completion": "Miners and stakers are rewarded for their efforts to keep the network secure. They earn block rewards. The Verus block reward emission schedule:\nBlock Height (& Start Date) Block Rewards Coin Emission\n(..) - , VRSC\n, (..) * ,, VRSC\n, (..) * ,, VRSC\n, (..) ,, VRSC\n, (..) ,, VRSC\n, (..) ,, VRSC\n,, (..) ,, VRSC\n,, (..) ,, VRSC\n,, (~..) ,, VRSC\n,, (~ ) . ,, VRSC\n,, (~ ) . , VRSC\n,, (~ ) . , VRSC\n,, (~ ) . , VRSC\n,, (~ ) . , VRSC\n,, (~ ) . , VRSC\n,, (~ ) . , VRSC\n,, (~ ) . , VRSC\n,, (~ ) . , VRSC\n,, (~ ) . , VRSC\netc. ... ...\nThe maximum circulating supply of all coins is ,, VRSC.\n* , Block Rewards \u23f2\ufe0f\nFrom block height , on, all block rewards of and VRSC were timelocked and then unlocked at random block heights. The last of those rewards were unlocked at block height ,,."
    },
    {
        "prompt": "What about block fees?",
        "input": "",
        "completion": "Fees are generated from users paying for services and interacting with the protocol. These fees are processed in the blocks and earned by miners and stakers.\nProtocol Activity Fees*\nVerusID Registration mainnet - VRSC\nPBaaS-chain Launch testnet , VRSC**\nCurrency/Token Launch testnet VRSC\nConversion Fee testnet .%\nTransaction Fee . VRSC\n* Testnet fees are subject to change. **Half the fee goes to the miners and stakers of the newly launched PBaaS-chain."
    },
    {
        "prompt": "What about pool fees?",
        "input": "",
        "completion": "All the fees generated by the protocol are collected in the fee pool. With each new block, % of the fee pool is added on top of the block rewards. It is expected that fees outnumber block rewards, making mining and staking in the Verus ecosystem a profitable and competitive endeavor."
    },
    {
        "prompt": "What is solomining?",
        "input": "",
        "completion": "Mine solo through Verus Desktop to receive full block rewards. Depending on hashrate it may take a while before winning a block. No additional software is needed to get started"
    },
    {
        "prompt": "What is pool mining?",
        "input": "",
        "completion": "Participate in pool mining to receive regular rewards. You will need to set up a few things before you can start."
    },
    {
        "prompt": "Can i get a quick comparison of mining?",
        "input": "",
        "completion": "Solo mining Pool mining\nFull Node yes no\nRegular Rewards no yes\nSetup Difficulty easy intermediate"
    },
    {
        "prompt": "What are the suitable devices for mining?",
        "input": "",
        "completion": "Mine Verus with various devices. Profitability indication means the electricity usage vs hashrate.\nDevice Profitability Indication\nCPU (processor) high\nGPU (graphics card) medium\nMobile Phone high\nARM (not RP) high\nFPGA not possible\nASIC not possible"
    },
    {
        "prompt": "How do i mine using my CPU?",
        "input": "",
        "completion": "You would need a software and a pool url to mine veruscoin, Some of the softwares that you can download is NheqMiner from veruscoin github organisation, CCMiner by Monkins or SRBMiner."
    },
    {
        "prompt": "How do i mine using my GPU?",
        "input": "",
        "completion": "For mining with your GPU you would need CCMiner GPU miner by Monkins."
    },
    {
        "prompt": "What are the pools to mine on?",
        "input": "",
        "completion": "Pool Name Fee %\nVerus Pool (opens new window)Fees donated to the Verus foundation %\nLuckPool(opens new window) %\nZergPool(opens new window) .%\nCiscoTech(opens new window) %\nLePool(opens new window) %\nZhuaao(opens new window) %\nAlphatechIT(opens new window) .%\nWattpool(opens new window) .%\nData(opens new window) .%"
    },
    {
        "prompt": "How do i start mining on mobile?",
        "input": "",
        "completion": "Start mining with your phone.\nDownload VerusBox Download on Google Play Or\nVerusMiner APK Download"
    },
    {
        "prompt": "How do i stake my verus?",
        "input": "",
        "completion": "Staking is accessible for everyone. Use Verus holdings to secure the network. It does not matter how much $VRSC you have, there are no minimum requirements to start staking.\nOn the Verus blockchain UTXOs (unspent transaction outputs) are staking, not balances. A large UTXO has more chances of winning a block than a small UTXO."
    },
    {
        "prompt": "What are the rules of staking?",
        "input": "",
        "completion": "There are a few rules you need to know before you can start staking.\nRules\nWallet Running\nFull Node Required (native mode in Verus Desktop)\nStaking Enabled\nUTXO Eligible After Blocks\nMinimum of . VRSC in Wallet"
    },
    {
        "prompt": "What about staking pools?",
        "input": "",
        "completion": "community operated staking pools are available.\nHIGH RISK\nWhen joining staking pools, you give away custody of your coins. You don't own your coins anymore and will have to trust the pool operator. Do at your own risk."
    },
    {
        "prompt": "What is VerusCoin exactly?",
        "input": "",
        "completion": "Imagine a new world. Everything you value is safe and secure. Everything you do, see, say and hear can be verified if you choose. Everyone you meet can present a verifiable reflection of the sum of their lifetime experiences. A society where your values, votes, and voice can be immutably expressed and secured by your community. All your data is verified, private, protected, and provable in abling exchanges of self-evident truths. A society where equity of opportunity is available to all. Kindness can be exchanged without fear of fraud or humiliation. All exchanges can be certified, smart, and secure without the need to rely on costly intermediaries. Imagine a worldwide network as scalable and as accessible as today's internet. Capable of processing financial transactions and dollars, euros, Bitcoin, Ethereum, all major currencies. Even custom currencies or auto-rebalancing multi-currency baskets, defined by any organization or individual. This network is not run by any single company or government. Instead, it's a network of independent networks. All connected by a strong cryptographic protocol that ensures all funds of all currencies are accounted for flawlessly. And by doing so, enables anyone in the world to contribute to powering it while enhancing its security and take a reward for doing so. Not only can anyone participate in this network by helping it run, the network makes it easy for anyone worldwide to create new fractal subnetworks that are launched from the network. And after launch, are completely independent from, yet fully connected and interoperable with all other parts of the network. With each new community, country, company or cause that creates its own subnetwork, the network of networks does not congest. But instead, it gains the independent processing of a new subnetwork along with its additional scale and power. Imagine that all the network could be accessed and used by people, organizations, businesses and governments easily, securely, and without any complex programming. You've probably already guessed that I'm not talking about Bitcoin, which is a decentralized tour to force, but only a single currency network. I'm also not talking about any near-term evolution of Ethereum or Ethereum-like networks, which are fundamentally single currency networks as well. Yes, I did just say that Ethereum is a single currency network. That may surprise some people so let me explain. ETH is in fact the only currency that has provable accounting as part of Ethereum's blockchain protocol. It's only contracts. Code, written, copied, and or modified by many, many separate devs and companies, interacting on a simulated computer, the Ethereum virtual machine. All of which hopefully follow best practices and conventions that enable Ethereum to transact in currencies besides ETH itself. The issue is that these contracts define currencies and engage in currency transfers between users and each other without any network-wide protocol that verifies those transfers correct accounting. All contracts may also expose arbitrary functions to other contracts while operating together in what is called a touring complete virtual machine, meaning they can effectively do anything, or make any mistake that can be written into code. Defining accounting for and transacting in any currency besides ETH on the Ethereum blockchain as all similar VM-based blockchains is a matter of how multiple contracts interact, a black box operation to the protocol which cannot be verified by design. That architecture invented by Ethereum years ago and now used by countless protocols, leads to other risks as well, such as multi-step approval and spend operations of non-native currencies, which are quite complex for users and can expose them to fishing scams that request permission to take assets under the guise of performing another action. This new form of fishing attack on users of the most popular centralized NFT marketplace recently took about $ million from unsuspecting users, but total losses from contracts far exceed millions on a regular basis. Estimates of losses to hackers from these contracts not including fishing. In just the last year, range from . to over $ billion. All of that on blockchain networks running a similar VM-based architecture as Ethereum. Perhaps it's time for a better design. Imagine a multi-blockchain network with a real multi-currency protocol that verifies all transactions in all currencies as securely as Bitcoin and Ethereum verify transactions that transfer BTC or ETH. The good news is that now you can do more than just imagine. The system I've described is fully functional today on the various test net and being prepared by contributors across the community now for its imminent main net upgrade. All technologies are currently available for application development by those early adopters who understand the opportunities in leveraging a new disruptive paradigm. It's still officially a test net, but is fully decentralized, functional, and accessible worldwide for launching test currencies, independent and connected blockchains, on-chain exchanges of currencies, and contracts, and more. Various itself is not a new cryptocurrency. In fact, it's an independent blockchain launched May , , with no ICO, no pre-allocation of funds, and no development fee or rent built into the protocol whatsoever. Various is complete with both transparent and zero-knowledge privacy protocols, and in ecologically efficient, provably % hashtag resistant consensus protocol. It's an evolution of knock-a-modo consensus that incorporates proof of stake as well, and the only blockchain with self-sauvrent, revocable, recoverable, and interoperable addresses, and identities built into the core protocol. Various identities are supported across all transaction types, compatible with other provable ID technologies, and serve as a foundation for all currencies and blockchains on the network. Applications of the Various Network extend far beyond D-Apps of blockchain today. Any individual, project, organization, or community, needing an easy-to-use, reliable, decentralized, rent-free currency, fundraising platform, voting network, automated accounting system, or self-sauvrent, revocable, recoverable identities, and a governance model can connect to the Various Internet of Value and get started with no programming required. Solutions that used to take weeks or longer to design and code with solidity experts can now be done better, faster, and more securely, no programming needed. With Various's multi-chain model, scale challenges of today can be naturally solved by scaling out as needed, whether requirements call for centralized corporate, open-government, or fully-decentralized applications. In addition to this new technology, disruptive even among modern blockchains, the open community-driven genesis and approach enables Various to be the first, and only rent-free, decentralized financial network capable of hosting multiple independent, yet connected real-world economies. With thousands of connected blockchains, millions of fungible currencies, and billions of users. Various is an open protocol, implemented in fully open source, designed to connect, interoperate with and serve as either independent or augmenting infrastructure for existing, or completely new, and more scalable, provable, fair, and trustworthy systems than what we have anywhere today. You can download the free and open-source Various Wallet from Various.io. Connect to the public test net, drop by the Discord for some free test currencies, and get started. Without any actual programming, just commands, you will be able to create revocable recoverable identities that you can then use to launch currencies, blockchains, liquidity baskets, automatically bridged ERCEAR, Ethereum currencies, and multi-chain applications using all currencies available on Various or Ethereum."
    },
    {
        "prompt": "What is UTXOs in veruscoin?",
        "input": "",
        "completion": "Unspend transaction output, or in short, UTXR. Let's visualize a part of a blockchain. We fill three of them up and leave a fourth new block empty for some new transactions. This is Alex. Alex has a various wallet and has received various coins so far, in four separate amounts. Now, these four separate amounts is essentially what UTXR is all about. Let's use two balls to explain. The first one shows the total amount of coins in your wallet, pictured is water in the bowl. The second one shows four water capsules in their bowl, each holding their own amount. They don't mix in the second bowl. Now let's have a look with that means. Meet Mary, a friend of Alex. She recently created a various wallet, but does not have any coin share. So Alex wants to send Mary of his coins to get her started. The various wallet will try to use the smallest UTXR values first in order to fill a desired coin transaction size, which in this case means it needs all four UTXRs to get to . When Alex sends the transaction, all four UTXRs will be spent and turns them into STXRs, spent transaction outputs. This is just a background process required and you will never see it. Next, two new transactions are created on the blockchain, for two new UTXRs, one for the various going to Mary, and one for sending the change of the transaction back to Alex. The transactions will go into the latest block in the blockchain so they can be confirmed by all the notes. I will explain how that all works in another animation. So all that is left to do is to send the various coins to Mary's wallet and send the change of the transaction back to Alex's wallet, and this of course is all done automatically."
    },
    {
        "prompt": "What is the near future of veruscoin going to be?",
        "input": "",
        "completion": "Verus is a community project that was fair launched May , . No ICO was held, no coins were pre-mined, and there are no founder or developer fees. Varus' history comes by way of Bitcoin, Zikaash and Komodo, building some of the foundations of blockchain, privacy, the lead proof of work and smart transactions. Varus' consensus algorithm is called proof of power. Proof of power is a split of % proof of stake and % proof of work using Varus' hash, which is optimized for CPU mining, giving everyone a fighting chance on a level playing field. Varus' proof of power is verifiably % hash attack resistant. Varus' ID is the first self-sovereign decentralized identity system of its kind. Firstly, it takes your standard long and impossible to remember address and allows you to create a friendly name, such as John Smith, that you can use to send and receive funds. Your name can include almost all Unicode characters, including emoji. If you ever lose access to your private keys or they become compromised, another ID can be used to securely revoke and recover your name and the fund stored on it. Along with these great features of Varus' ID, you can use the ID to create verifiable digital signatures, decentralized attestations, send and receive private messages, and more. Varus' vault gives users the ability to have a custom defined time lock of their assets that they can still stake with or revoke and recover if needed. Another great feature of Varus is the public block chain as a service, or PVAS, giving anyone the ability to launch tokens or full-interoperable block chains with no programming needed. You can set the price for identities on your chain as well as coin supply and emission, and it comes with all of the features that Varus offers, making it easy for anyone to start a project on the Varus platform, or to start their own block chain with a few clicks of a button. Half of the fee for block chain creation goes into the fee pool to be paid to miners and stakeers over time, and the other half goes into the fee pool of the newly created block chain. An exciting feature of PVAS creation is the ability to do crowdfunding launches, where you can set a minimum collection for that currency to launch. Offer pre-launch participation discounts, pre-conversion currency carve-outs, or price-neutral launch pre-allocations, all with the ability to automatically refund if the fund raise in conditions are not met. PVAS chains are fully interoperable, with cross-chain spends and currency conversions, Varus and PVAS chains can also be merged mine together, up to chains at once with all your hash power securing every chain. This helps small projects get hash power to secure the network for a lower cost. The first bridge is a decentralized bridge to Ethereum for th and ERC tokens, with other cross-platform capabilities in the future. This opens up the Varus ecosystem to value from other block chains, makes tokens and coins from the Varus network available on other platforms, and allows the storing of assets from other chains in a various vault protected Varus ID. The benefits of having layer defy on a UTXO blockchain is the ability to have consensus and reward models that are aligned with the economic activity happening on the chain. Varus uses a parallel processing model that solves all defy transactions in a block at the same time, and with the same pricing for all trade volumes and directions in that block. This, combined with the feeple, provides minor extracted value resistance, increased security, and conversion pricing that is fair and more stable than other systems. Find out more at Varus.io."
    },
    {
        "prompt": "What is verus platform?",
        "input": "",
        "completion": "Our internet and economies have become globally centralized. Our data, bought and sold to the highest bidder. Media platform sensored in the technology engineer to funnel and extract value and commodifying control our behavior. With the emergency blockchain technology, we have a chance to develop new systems in engineer than for more sovereignty, privacy, and freedom. But many blockchain projects fall prey to the same patterns of centralization. Built in silos, they lack scalability and few teams build bridges to work between them. Now, with this understanding, we have a better way forward. The next evolution in decentralized tech is here. Varus is a truly free, open-source blockchain protocol designed for privacy, safety, open participation, and unlimited scalability. Varus is not a business or bank. To ensure integrity and impartiality, the secure public network is supported by a worldwide community of contributors, including a nonprofit foundation. Varus combines the latest in cryptography and zero-knowledge privacy to enable its vision of public blockchains as a service. Decentralized financial and communications tech that can scale to a new internet of value and data exchange. With Varus, any individual or organization can create recoverable self-sauver identities, own their data and build and run apps and business software on any PC or mobile platform. In coming soon on Varus, individuals and organizations can tokenize assets and create currencies, create a shared economy by tokenizing a house for example, or bootstrapping crowd-funded project with fully liquid algorithmic conversion across multiple blockchains and crypto currencies. Individuals and communities can create their own micro economies and connect to a worldwide network about their public blockchains, organizations, and economies, and they don't have to pay anyone to do these things or give away their rights to their data. Now is the time to build. These are the tools we need to do that. Build with us. Varus. Truth and privacy for all. Learn more and join the conversation on Discord."
    }
]